// lib/prisma.ts - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Supabase

import { PrismaClient } from '@prisma/client'

declare global {
  var __prisma: PrismaClient | undefined
}

// –°–æ–∑–¥–∞–µ–º singleton instance Prisma Client
const createPrismaClient = () => {
  console.log('üîß [Prisma] –°–æ–∑–¥–∞–Ω–∏–µ PrismaClient –¥–ª—è Supabase...')
  
  return new PrismaClient({
    log: process.env.NODE_ENV === 'development' 
      ? ['error', 'warn'] 
      : ['error']
  })
}

// –í development –∏—Å–ø–æ–ª—å–∑—É–µ–º global –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const prisma = globalThis.__prisma ?? createPrismaClient()

if (process.env.NODE_ENV === 'development') {
  globalThis.__prisma = prisma
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export async function checkPrismaConnection(): Promise<{
  connected: boolean;
  latency?: number;
  error?: string;
}> {
  const startTime = Date.now()
  
  try {
    await prisma.$queryRaw`SELECT 1 as health_check`
    
    const latency = Date.now() - startTime
    console.log('‚úÖ [Prisma] Database health check passed, latency:', latency + 'ms')
    
    return { connected: true, latency }
    
  } catch (error) {
    console.error('‚ùå [Prisma] Database health check failed:', error)
    
    return { 
      connected: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }
  }
}

// Graceful shutdown handlers
const shutdown = async () => {
  console.log('üì§ [Prisma] –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...')
  
  try {
    await prisma.$disconnect()
    console.log('‚úÖ [Prisma] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
  } catch (error) {
    console.error('‚ùå [Prisma] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', error)
  }
}

process.on('beforeExit', shutdown)
process.on('SIGINT', async () => {
  await shutdown()
  process.exit(0)
})
process.on('SIGTERM', async () => {
  await shutdown()
  process.exit(0)
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π client
export { prisma }
export default prisma