// lib/utils/wbCharacteristicsUtils.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô –î–í–£–• –¶–ï–ù

export function generateEAN13Barcode(): string {
  let code = '22';
  for (let i = 0; i < 10; i++) {
    code += Math.floor(Math.random() * 10);
  }
  let sum = 0;
  for (let i = 0; i < 12; i++) {
    const digit = parseInt(code[i]);
    sum += i % 2 === 0 ? digit : digit * 3;
  }
  const checkDigit = (10 - (sum % 10)) % 10;
  return code + checkDigit;
}

export function generateUniqueBarcodesForSizes(sizesCount: number): string[] {
  const barcodes = new Set<string>();
  while (barcodes.size < sizesCount) {
    const barcode = generateEAN13Barcode();
    barcodes.add(barcode);
  }
  return Array.from(barcodes);
}

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
 * @param hasVariantSizes - –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–º–µ—Ä—ã —É —Ç–æ–≤–∞—Ä–∞
 * @param variantSizes - –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
 * @param originalPrice - —Ü–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
 * @param mainBarcode - –æ—Å–Ω–æ–≤–Ω–æ–π —à—Ç—Ä–∏—Ö–∫–æ–¥
 * @param discountPrice - —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
 */
export function createWBSizes(
  hasVariantSizes: boolean,
  variantSizes: string[],
  originalPrice: number,
  mainBarcode: string,
  discountPrice?: number | null
): Array<any> {
  const basePrice = Math.max(1, Math.round(Number(originalPrice) || 1000));
  const finalPrice = discountPrice ? Math.max(1, Math.round(Number(discountPrice))) : null;

  console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ WB:`);
  console.log(`   - –¶–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏: ${basePrice}‚ÇΩ`);
  console.log(`   - –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${finalPrice ? finalPrice + '‚ÇΩ' : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
  console.log(`   - –†–∞–∑–º–µ—Ä—ã: ${hasVariantSizes ? variantSizes?.length || 0 : '–±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π'}`);

  if (hasVariantSizes && variantSizes && variantSizes.length > 0) {
    console.log(`üëï –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è ${variantSizes.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
    const barcodes = generateUniqueBarcodesForSizes(variantSizes.length);
    
    return variantSizes.map((size, index) => {
      const sizeData: any = {
        techSize: size,
        wbSize: size,
        price: basePrice, // –¶–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏
        skus: [barcodes[index]]
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (finalPrice && finalPrice < basePrice) {
        sizeData.discountedPrice = finalPrice;
        console.log(`   üìè –†–∞–∑–º–µ—Ä "${size}": ${basePrice}‚ÇΩ ‚Üí ${finalPrice}‚ÇΩ`);
      } else {
        console.log(`   üìè –†–∞–∑–º–µ—Ä "${size}": ${basePrice}‚ÇΩ`);
      }

      return sizeData;
    });
  } else {
    console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä`);
    const sizeData: any = {
      price: basePrice, // –¶–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏
      skus: [mainBarcode]
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if (finalPrice && finalPrice < basePrice) {
      sizeData.discountedPrice = finalPrice;
      console.log(`   üí∞ –ë–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π: ${basePrice}‚ÇΩ ‚Üí ${finalPrice}‚ÇΩ`);
    } else {
      console.log(`   üí∞ –ë–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π: ${basePrice}‚ÇΩ`);
    }

    return [sizeData];
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è WB API v2 —Å –¥–≤—É–º—è —Ü–µ–Ω–∞–º–∏
 */
export function createWBSizesWithDualPricing(
  hasVariantSizes: boolean,
  variantSizes: string[],
  priceInfo: {
    original: number;
    discount?: number | null;
    final: number;
  },
  mainBarcode: string
): Array<any> {
  const originalPrice = Math.max(1, Math.round(Number(priceInfo.original) || 1000));
  const discountPrice = priceInfo.discount ? Math.max(1, Math.round(Number(priceInfo.discount))) : null;
  const hasDiscount = discountPrice && discountPrice < originalPrice;

  console.log(`üí∞ WB API v2 - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:`);
  console.log(`   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${originalPrice}‚ÇΩ`);
  console.log(`   - –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${discountPrice ? discountPrice + '‚ÇΩ' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  console.log(`   - –ï—Å—Ç—å —Å–∫–∏–¥–∫–∞: ${hasDiscount ? '–¥–∞' : '–Ω–µ—Ç'}`);

  if (hasVariantSizes && variantSizes && variantSizes.length > 0) {
    const barcodes = generateUniqueBarcodesForSizes(variantSizes.length);
    
    return variantSizes.map((size, index) => {
      const sizeObject: any = {
        techSize: size,
        wbSize: size,
        price: originalPrice, // WB —Ç—Ä–µ–±—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É
        skus: [barcodes[index]]
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º discountedPrice
      if (hasDiscount) {
        sizeObject.discountedPrice = discountPrice;
      }

      return sizeObject;
    });
  } else {
    const sizeObject: any = {
      price: originalPrice, // WB —Ç—Ä–µ–±—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É
      skus: [mainBarcode]
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º discountedPrice
    if (hasDiscount) {
      sizeObject.discountedPrice = discountPrice;
    }

    return [sizeObject];
  }
}

export function validateProductSizes(
  hasVariantSizes: boolean,
  variantSizes: string[],
  categoryId: number
): { isValid: boolean; error?: string } {
  if (hasVariantSizes) {
    if (!variantSizes || variantSizes.length === 0) {
      return {
        isValid: false,
        error: '–î–ª—è —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä'
      };
    }

    for (const size of variantSizes) {
      if (!size || size.trim() === '') {
        return {
          isValid: false,
          error: '–†–∞–∑–º–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'
        };
      }
    }

    const uniqueSizes = new Set(variantSizes);
    if (uniqueSizes.size !== variantSizes.length) {
      return {
        isValid: false,
        error: '–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏'
      };
    }

    if (variantSizes.length > 20) {
      return {
        isValid: false,
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)'
      };
    }
  }

  return { isValid: true };
}

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
 */
export function validateCardForWB(cardData: any): { isValid: boolean; errors: string[] } {
  const errors = [];

  if (!cardData.subjectID) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (subjectID)');
  }

  if (!cardData.variants || !Array.isArray(cardData.variants) || cardData.variants.length === 0) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞');
    return { isValid: false, errors };
  }

  const variant = cardData.variants[0];

  if (!variant.vendorCode) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞');
  }

  if (!variant.title || variant.title.length < 10) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
  }

  if (!variant.brand) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞');
  }

  if (!variant.dimensions) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏');
  } else {
    const dims = variant.dimensions;
    if (!dims.length || dims.length < 1) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 1 —Å–º)');
    }
    if (!dims.width || dims.width < 1) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 1 —Å–º)');
    }
    if (!dims.height || dims.height < 1) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 1 —Å–º)');
    }
    if (!dims.weightBrutto || dims.weightBrutto < 1) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 1 –≥)');
    }
  }

  if (!variant.sizes || !Array.isArray(variant.sizes) || variant.sizes.length === 0) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞');
  } else {
    for (const size of variant.sizes) {
      if (!size.price || size.price < 1) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)');
      }
      
      // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
      if (size.discountedPrice) {
        if (size.discountedPrice < 1) {
          errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)');
        }
        if (size.discountedPrice >= size.price) {
          errors.push('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—ã');
        }
      }
      
      if (!size.skus || !Array.isArray(size.skus) || size.skus.length === 0) {
        errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö');
      }
    }
  }

  if (!variant.characteristics || !Array.isArray(variant.characteristics)) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞');
  } else if (variant.characteristics.length < 3) {
    errors.push('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3)');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
}

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
 */
export function logCardStructure(cardData: any, title: string = '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏'): void {
  console.log(`üìã ${title}:`);
  console.log('‚îú‚îÄ‚îÄ subjectID:', cardData.subjectID);
  console.log('‚îî‚îÄ‚îÄ variants[0]:');
  
  if (cardData.variants && cardData.variants[0]) {
    const variant = cardData.variants[0];
    console.log('    ‚îú‚îÄ‚îÄ vendorCode:', variant.vendorCode);
    console.log('    ‚îú‚îÄ‚îÄ title:', variant.title?.slice(0, 50) + '...');
    console.log('    ‚îú‚îÄ‚îÄ brand:', variant.brand);
    console.log('    ‚îú‚îÄ‚îÄ dimensions:', variant.dimensions);
    console.log('    ‚îú‚îÄ‚îÄ characteristics:', `${variant.characteristics?.length || 0} —à—Ç.`);
    console.log('    ‚îî‚îÄ‚îÄ sizes:', `${variant.sizes?.length || 0} —à—Ç.`);
    
    if (variant.characteristics && variant.characteristics.length > 0) {
      console.log('    üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:');
      variant.characteristics.slice(0, 5).forEach((char: any, index: number) => {
        const valueType = typeof char.value;
        const valuePreview = Array.isArray(char.value) 
          ? `[${char.value.join(', ')}]` 
          : String(char.value);
        console.log(`        ${index + 1}. ID ${char.id}: ${valuePreview} (${valueType})`);
      });
      if (variant.characteristics.length > 5) {
        console.log(`        ... –∏ –µ—â–µ ${variant.characteristics.length - 5} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
      }
    }
    
    if (variant.sizes && variant.sizes.length > 0) {
      console.log('    üìè –†–∞–∑–º–µ—Ä—ã –∏ —Ü–µ–Ω—ã:');
      variant.sizes.forEach((size: any, index: number) => {
        const sizeLabel = size.techSize || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞';
        const priceInfo = size.discountedPrice 
          ? `${size.price}‚ÇΩ ‚Üí ${size.discountedPrice}‚ÇΩ` 
          : `${size.price}‚ÇΩ`;
        console.log(`        ${index + 1}. ${sizeLabel} - ${priceInfo} (—à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤: ${size.skus?.length || 0})`);
      });
    }
  }
}

/**
 * –ù–û–í–ê–Ø –£–¢–ò–õ–ò–¢–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
export function validatePriceInfo(priceInfo: {
  original: number;
  discount?: number | null;
  final: number;
}): { isValid: boolean; errors: string[] } {
  const errors = [];
  
  if (!priceInfo.original || priceInfo.original < 1) {
    errors.push('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
  }
  
  if (priceInfo.discount) {
    if (priceInfo.discount < 1) {
      errors.push('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    if (priceInfo.discount >= priceInfo.original) {
      errors.push('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã');
    }
  }
  
  if (!priceInfo.final || priceInfo.final < 1) {
    errors.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

/**
 * –ù–û–í–ê–Ø –£–¢–ò–õ–ò–¢–ê: –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–∫–∏
 */
export function analyzeDiscount(originalPrice: number, discountPrice: number): {
  discountAmount: number;
  discountPercent: number;
  savings: number;
  isSignificant: boolean;
} {
  const discountAmount = originalPrice - discountPrice;
  const discountPercent = Math.round((discountAmount / originalPrice) * 100);
  const savings = discountAmount;
  const isSignificant = discountPercent >= 10; // –°–∫–∏–¥–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –µ—Å–ª–∏ >= 10%

  return {
    discountAmount,
    discountPercent,
    savings,
    isSignificant
  };
}

/**
 * –ù–û–í–ê–Ø –£–¢–ò–õ–ò–¢–ê: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatPriceDisplay(priceInfo: {
  original: number;
  discount?: number | null;
  final: number;
}): {
  originalFormatted: string;
  discountFormatted?: string;
  finalFormatted: string;
  hasDiscount: boolean;
  discountText?: string;
} {
  const originalFormatted = `${priceInfo.original.toLocaleString('ru-RU')}‚ÇΩ`;
  const finalFormatted = `${priceInfo.final.toLocaleString('ru-RU')}‚ÇΩ`;
  const hasDiscount = !!(priceInfo.discount && priceInfo.discount < priceInfo.original);
  
  let discountFormatted = undefined;
  let discountText = undefined;
  
  if (hasDiscount && priceInfo.discount) {
    discountFormatted = `${priceInfo.discount.toLocaleString('ru-RU')}‚ÇΩ`;
    const discountPercent = Math.round(((priceInfo.original - priceInfo.discount) / priceInfo.original) * 100);
    discountText = `-${discountPercent}%`;
  }

  return {
    originalFormatted,
    discountFormatted,
    finalFormatted,
    hasDiscount,
    discountText
  };
}