// lib/auth/auth-service.ts - –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Supabase PostgreSQL

import { prisma } from '../prisma'
import { cookies } from 'next/headers'

export interface AuthUser {
  id: string
  email: string
  name?: string
  avatarUrl?: string
  role: string
  isActive: boolean
}

export class AuthService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  static async getCurrentUser(): Promise<AuthUser | null> {
    console.log('üîç [AuthService] === –ù–ê–ß–ê–õ–û getCurrentUser (Production) ===')
    
    try {
      const cookieStore = cookies()
      const token = cookieStore.get('session_token')?.value
      console.log('üîç [AuthService] Session token:', token ? `${token.substring(0, 10)}...` : '–Ω–µ –Ω–∞–π–¥–µ–Ω')
      
      if (!token) {
        console.log('üîç [AuthService] No session token found')
        return null
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ –∏—â–µ–º —Å–µ—Å—Å–∏—é
      console.log('üîç [AuthService] Connecting to Supabase PostgreSQL...')
      
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
      await prisma.$connect()
      
      const session = await prisma.session.findUnique({
        where: { token },
        include: { 
          user: {
            select: {
              id: true,
              email: true,
              name: true,
              avatarUrl: true,
              role: true,
              isActive: true
            }
          }
        }
      })

      console.log('üîç [AuthService] Session search result:', session ? {
        sessionId: session.id,
        userId: session.userId,
        expiresAt: session.expiresAt,
        userEmail: session.user.email,
        userActive: session.user.isActive
      } : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

      if (!session) {
        console.log('üîç [AuthService] Session not found in database')
        return null
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏
      if (session.expiresAt < new Date()) {
        console.log('üîç [AuthService] Session expired:', session.expiresAt)
        
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
        await prisma.session.delete({ 
          where: { id: session.id } 
        })
        
        return null
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!session.user.isActive) {
        console.log('üîç [AuthService] User is not active')
        return null
      }

      console.log('‚úÖ [AuthService] User authenticated successfully:', session.user.email)
      
      return {
        id: session.user.id,
        email: session.user.email,
        name: session.user.name || undefined,
        avatarUrl: session.user.avatarUrl || undefined,
        role: session.user.role,
        isActive: session.user.isActive
      }

    } catch (error) {
      console.error('‚ùå [AuthService] Database error:', error)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      if (error instanceof Error) {
        if (error.message.includes('P1001')) {
          console.error('üö® [AuthService] Cannot reach database server')
        } else if (error.message.includes('P1017')) {
          console.error('üö® [AuthService] Server rejected connection')
        } else if (error.message.includes('timeout')) {
          console.error('üö® [AuthService] Database timeout')
        }
      }
      
      throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async createSession(userId: string, ipAddress?: string, userAgent?: string): Promise<string> {
    console.log('üîê [AuthService] Creating session for user:', userId)
    
    try {
      await prisma.$connect()
      
      const token = this.generateToken()
      const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 –¥–Ω–µ–π

      await prisma.session.create({
        data: {
          userId,
          token,
          ipAddress,
          userAgent,
          expiresAt
        }
      })

      console.log('‚úÖ [AuthService] Session created successfully:', token.substring(0, 10) + '...')
      return token
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error creating session:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  static async validateSession(token: string): Promise<AuthUser | null> {
    console.log('üîç [AuthService] Validating session:', token.substring(0, 10) + '...')
    
    try {
      await prisma.$connect()
      
      const session = await prisma.session.findUnique({
        where: { token },
        include: { 
          user: {
            select: {
              id: true,
              email: true,
              name: true,
              avatarUrl: true,
              role: true,
              isActive: true
            }
          }
        }
      })

      if (!session || session.expiresAt < new Date()) {
        if (session) {
          await prisma.session.delete({ where: { id: session.id } })
        }
        return null
      }

      if (!session.user.isActive) return null

      return {
        id: session.user.id,
        email: session.user.email,
        name: session.user.name || undefined,
        avatarUrl: session.user.avatarUrl || undefined,
        role: session.user.role,
        isActive: session.user.isActive
      }
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error validating session:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (logout)
   */
  static async destroySession(token: string): Promise<void> {
    console.log('üîê [AuthService] Destroying session:', token.substring(0, 10) + '...')
    
    try {
      await prisma.$connect()
      
      await prisma.session.delete({ where: { token } })
      console.log('‚úÖ [AuthService] Session deleted successfully')
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error destroying session:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async destroyUserSessions(userId: string): Promise<void> {
    console.log('üîê [AuthService] Destroying all sessions for user:', userId)
    
    try {
      await prisma.$connect()
      
      const result = await prisma.session.deleteMany({ 
        where: { userId } 
      })
      
      console.log('‚úÖ [AuthService] Deleted sessions count:', result.count)
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error destroying user sessions:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
   */
  static async checkDatabaseHealth(): Promise<{ 
    connected: boolean; 
    latency?: number; 
    error?: string 
  }> {
    const startTime = Date.now()
    
    try {
      await prisma.$queryRaw`SELECT 1 as health_check`
      
      const latency = Date.now() - startTime
      console.log('‚úÖ [AuthService] Database health check passed, latency:', latency + 'ms')
      
      return { connected: true, latency }
      
    } catch (error) {
      console.error('‚ùå [AuthService] Database health check failed:', error)
      
      return { 
        connected: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
   */
  static async cleanupExpiredSessions(): Promise<number> {
    console.log('üßπ [AuthService] Cleaning up expired sessions...')
    
    try {
      await prisma.$connect()
      
      const result = await prisma.session.deleteMany({
        where: {
          expiresAt: {
            lt: new Date()
          }
        }
      })
      
      console.log('‚úÖ [AuthService] Cleaned up expired sessions:', result.count)
      return result.count
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error cleaning up sessions:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   */
  static async getSessionStats(): Promise<{
    totalSessions: number;
    activeSessions: number;
    expiredSessions: number;
    uniqueUsers: number;
  }> {
    try {
      await prisma.$connect()
      
      const now = new Date()
      
      const [
        totalSessions,
        activeSessions,
        expiredSessions,
        uniqueUsers
      ] = await Promise.all([
        prisma.session.count(),
        prisma.session.count({
          where: { expiresAt: { gte: now } }
        }),
        prisma.session.count({
          where: { expiresAt: { lt: now } }
        }),
        prisma.session.groupBy({
          by: ['userId'],
          where: { expiresAt: { gte: now } }
        }).then(result => result.length)
      ])
      
      return {
        totalSessions,
        activeSessions,
        expiredSessions,
        uniqueUsers
      }
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error getting session stats:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  private static generateToken(): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    let token = ''
    for (let i = 0; i < 64; i++) {
      token += chars.charAt(Math.floor(Math.random() * chars.length))
    }
    return token
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static hasRole(user: AuthUser, requiredRole: 'USER' | 'ADMIN' | 'SUPER_ADMIN'): boolean {
    const roleHierarchy = {
      'USER': 1,
      'ADMIN': 2,
      'SUPER_ADMIN': 3
    }

    const userRoleLevel = roleHierarchy[user.role as keyof typeof roleHierarchy] || 0
    const requiredRoleLevel = roleHierarchy[requiredRole]

    return userRoleLevel >= requiredRoleLevel
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateLastLogin(userId: string): Promise<void> {
    try {
      await prisma.$connect()
      
      await prisma.user.update({
        where: { id: userId },
        data: { lastLoginAt: new Date() }
      })
      
      console.log('‚úÖ [AuthService] Updated last login for user:', userId)
      
    } catch (error) {
      console.error('‚ùå [AuthService] Error updating last login:', error)
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    } finally {
      await prisma.$disconnect()
    }
  }
}