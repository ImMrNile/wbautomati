// lib/services/enhancedGeminiService.ts - –£–õ–£–ß–®–ï–ù–ù–´–ô –°–ï–†–í–ò–° –ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–û–í–ê–†–û–í

import OpenAI from 'openai';
import { WB_API_CONFIG, DEFAULT_VALUES } from '../config/wbApiConfig';

// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò
export interface EnhancedAiAnalysisResult {
  // –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  imageAnalysis: {
    productType: string;
    primaryColor: string;
    secondaryColors: string[];
    materials: string[];
    style: string;
    keyFeatures: string[];
    estimatedSize: string;
    condition: string;
    confidence: number;
    detectedText?: string;
    productCategory: string;
  };
  
  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞-–∞–Ω–∞–ª–æ–≥–∞
  referenceAnalysis: {
    extractedBrand: string;
    extractedCategory: string;
    extractedCharacteristics: { name: string; value: string }[];
    priceRange: string;
    marketPosition: string;
    qualityScore: number;
  };
  
  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è WB
  wbContent: {
    title: string;
    description: string;
    characteristics: Array<{ id: number; value: string }>;
    categoryId: number;
    keywords: string[];
    seoKeywords: string[];
    sellingPoints: string[];
  };
  
  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  metadata: {
    processingTime: number;
    confidence: number;
    suggestions: string[];
    warnings: string[];
    aiModel: string;
    analysisVersion: string;
  };
}

// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
interface EnhancedAnalysisInput {
  userImage: string; // base64 –∏–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userProductName: string;
  packageContents: string;
  referenceUrl?: string;
  price: number;
  dimensions: {
    length: number;
    width: number;
    height: number;
    weight: number;
  };
}

export class EnhancedGeminiService {
  private openai: OpenAI;
  private model: string;
  private visionModel: string;

  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    this.model = process.env.OPENAI_MODEL || 'gpt-4o';
    this.visionModel = process.env.OPENAI_VISION_MODEL || 'gpt-4o'; // –ú–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  }

  async analyzeProductComprehensive(input: EnhancedAnalysisInput): Promise<EnhancedAiAnalysisResult> {
    const startTime = Date.now();
    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞: ${input.userProductName}`);

    try {
      // –®–∞–≥ 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üì∏ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const imageAnalysis = await this.analyzeUserImageAdvanced(input.userImage, input.userProductName, input.dimensions);

      // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞-–∞–Ω–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞)
      let referenceAnalysis = null;
      if (input.referenceUrl) {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞-–∞–Ω–∞–ª–æ–≥–∞...');
        referenceAnalysis = await this.analyzeReferenceProduct(input.referenceUrl);
      }

      // –®–∞–≥ 3: –°–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è WB
      console.log('‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Wildberries...');
      const wbContent = await this.generateAdvancedWBContent({
        imageAnalysis,
        referenceAnalysis,
        userInput: input
      });

      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${processingTime}–º—Å`);

      return {
        imageAnalysis,
        referenceAnalysis: referenceAnalysis || this.getDefaultReferenceAnalysis(),
        wbContent,
        metadata: {
          processingTime,
          confidence: this.calculateOverallConfidence(imageAnalysis, referenceAnalysis),
          suggestions: this.generateSuggestions(imageAnalysis, referenceAnalysis, input),
          warnings: this.generateWarnings(imageAnalysis, referenceAnalysis, input),
          aiModel: this.visionModel,
          analysisVersion: '2.0'
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private async analyzeUserImageAdvanced(imageBase64: string, productName: string, dimensions: any) {
    const prompt = `
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ Wildberries. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ.

–¢–û–í–ê–†: ${productName}
–†–ê–ó–ú–ï–†–´: ${dimensions.length}x${dimensions.width}x${dimensions.height} —Å–º, –≤–µ—Å: ${dimensions.weight} –∫–≥

–ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ü–≤–µ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –í—ã—è–≤–∏—Ç–µ —Å—Ç–∏–ª—å –∏ –¥–∏–∑–∞–π–Ω
5. –ù–∞–π–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
6. –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
7. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
8. –ù–∞–π–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
9. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è WB

–í–ê–ñ–ù–´–ï –¶–í–ï–¢–ê –î–õ–Ø WB:
—á–µ—Ä–Ω—ã–π, –±–µ–ª—ã–π, –∫—Ä–∞—Å–Ω—ã–π, —Å–∏–Ω–∏–π, –∑–µ–ª–µ–Ω—ã–π, –∂–µ–ª—Ç—ã–π, —Å–µ—Ä—ã–π, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π, —Ä–æ–∑–æ–≤—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∑–æ–ª–æ—Ç–æ–π, —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π, –±–µ–∂–µ–≤—ã–π, –º—è—Ç–Ω—ã–π, –ª–∏–ª–æ–≤—ã–π

–ú–ê–¢–ï–†–ò–ê–õ–´:
–ø–ª–∞—Å—Ç–∏–∫, –º–µ—Ç–∞–ª–ª, —Ç–∫–∞–Ω—å, –∫–æ–∂–∞, –¥–µ—Ä–µ–≤–æ, —Å—Ç–µ–∫–ª–æ, —Ä–µ–∑–∏–Ω–∞, —Å–∏–ª–∏–∫–æ–Ω, –Ω–µ–π–ª–æ–Ω, –ø–æ–ª–∏—ç—Å—Ç–µ—Ä, —Ö–ª–æ–ø–æ–∫, —à–µ—Ä—Å—Ç—å, —Å–º–µ—à–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–í–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "productType": "–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º",
  "primaryColor": "–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
  "secondaryColors": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞"],
  "materials": ["–æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
  "style": "—Å—Ç–∏–ª—å/–¥–∏–∑–∞–π–Ω (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏–∑–º –∏ —Ç.–¥.)",
  "keyFeatures": ["—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"],
  "estimatedSize": "—Ä–∞–∑–º–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –∫—Ä—É–ø–Ω—ã–π)",
  "condition": "–Ω–æ–≤—ã–π",
  "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1,
  "detectedText": "—Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å",
  "productCategory": "–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è WB"
}

–ë–£–î–¨–¢–ï –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ú–ò –ò –î–ï–¢–ê–õ–¨–ù–´–ú–ò!
`;

    const response = await this.openai.chat.completions.create({
      model: this.visionModel,
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: prompt },
            {
              type: 'image_url',
              image_url: {
                url: imageBase64.startsWith('data:') ? imageBase64 : `data:image/jpeg;base64,${imageBase64}`,
                detail: 'high' // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
              }
            }
          ]
        }
      ],
      temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      max_tokens: 1500,
      response_format: { type: 'json_object' },
    });

    const result = response.choices[0]?.message?.content;
    if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');

    try {
      const parsed = JSON.parse(result);
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        productType: parsed.productType,
        confidence: parsed.confidence,
        category: parsed.productCategory
      });
      return parsed;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', result);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
  }

  private async analyzeReferenceProduct(referenceUrl: string) {
    const prompt = `
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ Wildberries.

–°–°–´–õ–ö–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: ${referenceUrl}

–í–ê–ñ–ù–û: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.

–ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. –ò–∑—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –±—Ä–µ–Ω–¥
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB
3. –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ü–µ–Ω—É –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
5. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
6. –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
7. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
8. –ù–∞–π–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
- –ò–∑—É—á–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
- –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤

–í–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "extractedBrand": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ NoName",
  "extractedCategory": "–ø–æ–ª–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB",
  "extractedTitle": "–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
  "extractedDescription": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏",
  "extractedCharacteristics": [
    {"name": "–º–∞—Ç–µ—Ä–∏–∞–ª", "value": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"},
    {"name": "—Ü–≤–µ—Ç", "value": "—Ç–æ—á–Ω—ã–π —Ü–≤–µ—Ç"},
    {"name": "—Ä–∞–∑–º–µ—Ä", "value": "—Ä–∞–∑–º–µ—Ä—ã"},
    {"name": "–≤–µ—Å", "value": "–≤–µ—Å"}
  ],
  "priceRange": "–±—é–¥–∂–µ—Ç–Ω—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–ø—Ä–µ–º–∏—É–º",
  "extractedPrice": "—Ü–µ–Ω–∞_–µ—Å–ª–∏_–≤–∏–¥–Ω–∞",
  "marketPosition": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞",
  "qualityScore": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
  "targetAudience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞",
  "uniqueFeatures": ["—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", "—Ç–æ–≤–∞—Ä–∞"],
  "competitiveAdvantages": ["–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"]
}

–ê–ù–ê–õ–ò–ó–ò–†–£–ô–¢–ï –†–ï–ê–õ–¨–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ –¢–û–í–ê–†–ê, –ù–ï –î–ï–õ–ê–ô–¢–ï –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ô!
`;

    const response = await this.openai.chat.completions.create({
      model: this.model,
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      max_tokens: 2000,
      response_format: { type: 'json_object' },
    });

    const result = response.choices[0]?.message?.content;
    if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ');

    try {
      const parsed = JSON.parse(result);
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        brand: parsed.extractedBrand,
        category: parsed.extractedCategory,
        qualityScore: parsed.qualityScore,
        characteristicsCount: parsed.extractedCharacteristics?.length || 0
      });
      return parsed;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ:', result);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ');
    }
  }

  private async generateAdvancedWBContent({ imageAnalysis, referenceAnalysis, userInput }: {
    imageAnalysis: any;
    referenceAnalysis: any;
    userInput: EnhancedAnalysisInput;
  }) {
    const prompt = `
–°–æ–∑–¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Wildberries.

–î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
${JSON.stringify(imageAnalysis, null, 2)}

–î–ê–ù–ù–´–ï –ê–ù–ê–õ–û–ì–ê:
${JSON.stringify(referenceAnalysis, null, 2)}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${userInput.userProductName}
- –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: ${userInput.packageContents}
- –¶–µ–Ω–∞: ${userInput.price} —Ä—É–±
- –†–∞–∑–º–µ—Ä—ã: ${userInput.dimensions.length}x${userInput.dimensions.width}x${userInput.dimensions.height} —Å–º
- –í–µ—Å: ${userInput.dimensions.weight} –∫–≥

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¢–ï–ù–¢–£:
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤, —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
2. –û–ø–∏—Å–∞–Ω–∏–µ: –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–¥–∞—é—â–µ–µ, —Å —ç–º–æ—Ü–∏—è–º–∏
3. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID –¥–ª—è WB API
4. –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ WB
5. SEO-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
6. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞

–ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò WB (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ ID):
- 963: –ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã
- 964: –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏  
- 965: –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
- 14727: –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
- 2674: –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å
- 629: –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
- 8126: –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï ID –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:
- 85: –ë—Ä–µ–Ω–¥
- 91: –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
- 14177449: –¶–≤–µ—Ç
- 372: –°–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª

–í–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "title": "–ø—Ä–æ–¥–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤",
  "description": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
  "characteristics": [
    {"id": 85, "value": "–±—Ä–µ–Ω–¥"},
    {"id": 91, "value": "–†–æ—Å—Å–∏—è"},
    {"id": 14177449, "value": "–æ—Å–Ω–æ–≤–Ω–æ–π_—Ü–≤–µ—Ç"},
    {"id": 372, "value": "–º–∞—Ç–µ—Ä–∏–∞–ª"}
  ],
  "categoryId": —Ä–µ–∞–ª—å–Ω—ã–π_ID_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–∏–∑_—Å–ø–∏—Å–∫–∞_–≤—ã—à–µ,
  "keywords": ["–æ—Å–Ω–æ–≤–Ω—ã–µ", "–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞"],
  "seoKeywords": ["seo", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "—Ñ—Ä–∞–∑—ã"],
  "sellingPoints": ["—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", "—Ç–æ–≤–∞—Ä–∞"]
}

–°–û–ó–î–ê–ô–¢–ï –ö–û–ù–¢–ï–ù–¢, –ö–û–¢–û–†–´–ô –ó–ê–°–¢–ê–í–ò–¢ –ö–£–ü–ò–¢–¨!
`;

    const response = await this.openai.chat.completions.create({
      model: this.model,
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3, // –ù–µ–º–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
      max_tokens: 2000,
      response_format: { type: 'json_object' },
    });

    const result = response.choices[0]?.message?.content;
    if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');

    try {
      const parsed = JSON.parse(result);
      console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è WB —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', {
        titleLength: parsed.title?.length,
        descriptionLength: parsed.description?.length,
        categoryId: parsed.categoryId,
        characteristicsCount: parsed.characteristics?.length
      });
      return parsed;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', result);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
  }

  private getDefaultReferenceAnalysis() {
    return {
      extractedBrand: '–ù–µ—Ç –±—Ä–µ–Ω–¥–∞', // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      extractedCategory: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      extractedCharacteristics: [],
      priceRange: '—Å—Ä–µ–¥–Ω–∏–π',
      marketPosition: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      qualityScore: 5
    };
  }

  private calculateOverallConfidence(imageAnalysis: any, referenceAnalysis: any): number {
    let confidence = 0.6; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    if (imageAnalysis?.confidence) {
      confidence = (confidence + imageAnalysis.confidence) / 2;
    }
    
    if (referenceAnalysis?.qualityScore && referenceAnalysis.qualityScore > 7) {
      confidence += 0.1;
    }
    
    if (imageAnalysis?.keyFeatures && imageAnalysis.keyFeatures.length > 2) {
      confidence += 0.1;
    }
    
    return Math.min(confidence, 1.0);
  }

  private generateSuggestions(imageAnalysis: any, referenceAnalysis: any, userInput: any): string[] {
    const suggestions = [];
    
    if (imageAnalysis?.confidence < 0.7) {
      suggestions.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥ –ª—É—á—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º');
    }
    
    if (!referenceAnalysis || referenceAnalysis.qualityScore < 5) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä-–∞–Ω–∞–ª–æ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    if (userInput.price < 100) {
      suggestions.push('–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏–∑–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞–∂–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å');
    }
    
    if (userInput.price > 5000) {
      suggestions.push('–î–ª—è –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤–∞–∂–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ, –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ—Å—Ç—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏');
    }
    
    if (!imageAnalysis?.detectedText) {
      suggestions.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞');
    }
    
    return suggestions;
  }

  private generateWarnings(imageAnalysis: any, referenceAnalysis: any, userInput: any): string[] {
    const warnings = [];
    
    if (imageAnalysis?.condition !== '–Ω–æ–≤—ã–π') {
      warnings.push('–¢–æ–≤–∞—Ä –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º WB –∫ –Ω–æ–≤—ã–º —Ç–æ–≤–∞—Ä–∞–º');
    }
    
    if (imageAnalysis?.confidence < 0.4) {
      warnings.push('–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (userInput.userProductName.length > 60) {
      warnings.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ WB - –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ');
    }
    
    if (!userInput.packageContents || userInput.packageContents.length < 10) {
      warnings.push('–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ - –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π');
    }
    
    return warnings;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async quickImageAnalysis(imageBase64: string): Promise<{ productType: string; confidence: number; category: string }> {
    const prompt = `
–ë—ã—Å—Ç—Ä–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

–í–µ—Ä–Ω–∏—Ç–µ JSON:
{
  "productType": "—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞",
  "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1,
  "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è WB"
}
`;

    const response = await this.openai.chat.completions.create({
      model: this.visionModel,
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: prompt },
            {
              type: 'image_url',
              image_url: {
                url: imageBase64.startsWith('data:') ? imageBase64 : `data:image/jpeg;base64,${imageBase64}`,
                detail: 'low' // –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
              }
            }
          ]
        }
      ],
      temperature: 0.1,
      max_tokens: 200,
      response_format: { type: 'json_object' },
    });

    const result = response.choices[0]?.message?.content;
    if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ');

    return JSON.parse(result);
  }
}

export const enhancedGeminiService = new EnhancedGeminiService();