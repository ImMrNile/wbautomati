// lib/utils/categoryMatcher.ts - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

interface CategoryMatch {
  category: {
    objectID: number;
    objectName: string;
    parentID?: number;
    parentName?: string;
    isLeaf?: boolean;
  };
  score: number;
  reason: string;
  source: 'ai' | 'reference' | 'keywords' | 'fallback';
}

export class CategoryMatcher {
  /**
   * –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ò–ò
   */
  static findBestCategory(
    aiCategory: string,
    productName: string,
    productType: string,
    wbCategories: any[],
    referenceData?: any
  ): CategoryMatch {
    console.log('üéØ === –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ò ===');
    console.log(`ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: "${aiCategory}"`);
    console.log(`üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: "${productType}"`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: "${productName}"`);
    
    if (referenceData?.category) {
      console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceData.category}"`);
    }

    const matches: CategoryMatch[] = [];

    // 1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    const aiMatch = this.findByAICategory(aiCategory, wbCategories);
    if (aiMatch) {
      matches.push(aiMatch);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò: ${aiMatch.category.objectName} (${aiMatch.score} –±–∞–ª–ª–æ–≤)`);
    }

    // 2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const keywordMatches = this.findByKeywords(productName, productType, wbCategories);
    matches.push(...keywordMatches);

    // 3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    if (referenceData?.category) {
      const referenceMatch = this.findByReferenceName(referenceData.category, wbCategories);
      if (referenceMatch) {
        matches.push(referenceMatch);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–æ–≥–æ–º: ${referenceMatch.category.objectName} (${referenceMatch.score} –±–∞–ª–ª–æ–≤)`);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É, –ø–æ—Ç–æ–º –ø–æ —Å–∫–æ—Ä—É
    matches.sort((a, b) => {
      const sourcePriority = { 'ai': 4, 'keywords': 3, 'reference': 2, 'fallback': 1 };
      const aPriority = sourcePriority[a.source];
      const bPriority = sourcePriority[b.source];
      
      if (aPriority !== bPriority) {
        return bPriority - aPriority; // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      }
      return b.score - a.score; // –ü–æ—Ç–æ–º –ø–æ —Å–∫–æ—Ä—É
    });

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (matches.length > 0) {
      const bestMatch = matches[0];
      console.log(`üèÜ –í–´–ë–†–ê–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø: "${bestMatch.category.objectName}"`);
      console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${bestMatch.source}, –û—Ü–µ–Ω–∫–∞: ${bestMatch.score}, –ü—Ä–∏—á–∏–Ω–∞: ${bestMatch.reason}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      if (matches.length > 1) {
        console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:`);
        matches.slice(1, 3).forEach((match, i) => {
          console.log(`   ${i + 2}. ${match.category.objectName} (${match.source}, ${match.score} –±–∞–ª–ª–æ–≤)`);
        });
      }
      
      return bestMatch;
    }

    // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    return this.getFallbackCategory(aiCategory, productName);
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private static findByAICategory(aiCategory: string, categories: any[]): CategoryMatch | null {
    if (!aiCategory || aiCategory.length < 3) return null;

    const aiLower = aiCategory.toLowerCase().trim();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const category of categories) {
      const categoryName = (category.objectName || '').toLowerCase();
      
      if (categoryName === aiLower) {
        return {
          category,
          score: 100,
          reason: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
          source: 'ai'
        };
      }
    }

    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const category of categories) {
      const categoryName = (category.objectName || '').toLowerCase();
      
      if (categoryName.includes(aiLower) || aiLower.includes(categoryName)) {
        return {
          category,
          score: 90,
          reason: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
          source: 'ai'
        };
      }
    }

    return null;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
   */
  private static findByKeywords(productName: string, productType: string, categories: any[]): CategoryMatch[] {
    const matches: CategoryMatch[] = [];
    
    // –ö–∞—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    const electronicsKeywords = [
      '–∫–∞–±–µ–ª—å', 'cable', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'usb', 'type-c', 'lightning', 'micro',
      '–∑–∞—Ä—è–¥–Ω–æ–µ', '–∑–∞—Ä—è–¥–∫–∞', 'charger', '–∞–¥–∞–ø—Ç–µ—Ä', 'adapter', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫',
      '–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones', 'bluetooth', '–∫–æ–ª–æ–Ω–∫–∞', 'speaker',
      '—Ç–µ–ª–µ—Ñ–æ–Ω', 'phone', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–ø–ª–∞–Ω—à–µ—Ç', 'tablet',
      '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π', 'electric', 'electronic',
      '–≥–∞–¥–∂–µ—Ç', '–¥–µ–≤–∞–π—Å', 'device', '—Ç–µ—Ö–Ω–∏–∫–∞', 'technology'
    ];

    const homeKeywords = [
      '–¥–æ–º', '–¥–æ–º–∞—à–Ω–∏–π', '–∫—É—Ö–Ω—è', '–∫—É—Ö–æ–Ω–Ω—ã–π', '–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∞', '—á–∞—à–∫–∞',
      '–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '—Ç–µ–∫—Å—Ç–∏–ª—å', '–∫–æ–≤–µ—Ä', '–¥–µ–∫–æ—Ä'
    ];

    const autoKeywords = [
      '–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–¥–ª—è –∞–≤—Ç–æ', '–≤ –º–∞—à–∏–Ω—É'
    ];

    const searchText = `${productName} ${productType}`.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É
    const electronicsMatches = electronicsKeywords.filter(keyword => 
      searchText.includes(keyword)
    );

    if (electronicsMatches.length > 0) {
      const electronicsCategory = categories.find(cat => 
        cat.objectName.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞') ||
        cat.objectID === 1229 ||
        cat.objectName.toLowerCase().includes('–∫–∞–±–µ–ª')
      );

      if (electronicsCategory) {
        matches.push({
          category: electronicsCategory,
          score: 85 + (electronicsMatches.length * 5), // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
          reason: `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏: ${electronicsMatches.join(', ')}`,
          source: 'keywords'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã
    const autoMatches = autoKeywords.filter(keyword => 
      searchText.includes(keyword)
    );

    if (autoMatches.length > 0) {
      const autoCategory = categories.find(cat => 
        cat.objectName.toLowerCase().includes('–∞–≤—Ç–æ') ||
        cat.objectID === 1347
      );

      if (autoCategory) {
        matches.push({
          category: autoCategory,
          score: 80 + (autoMatches.length * 5),
          reason: `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–≤—Ç–æ—Ç–æ–≤–∞—Ä–æ–≤: ${autoMatches.join(', ')}`,
          source: 'keywords'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
    const homeMatches = homeKeywords.filter(keyword => 
      searchText.includes(keyword)
    );

    if (homeMatches.length > 0 && matches.length === 0) {
      const homeCategory = categories.find(cat => 
        cat.objectName.toLowerCase().includes('–¥–æ–º') ||
        cat.objectID === 14727
      );

      if (homeCategory) {
        matches.push({
          category: homeCategory,
          score: 70 + (homeMatches.length * 3),
          reason: `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞: ${homeMatches.join(', ')}`,
          source: 'keywords'
        });
      }
    }

    return matches;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–æ–≥–∞
   */
  private static findByReferenceName(referenceCategoryName: string, categories: any[]): CategoryMatch | null {
    if (!referenceCategoryName) return null;

    const refLower = referenceCategoryName.toLowerCase();

    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–æ–≥–∞, –µ—Å–ª–∏ —ç—Ç–æ "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", –∞ —Ç–æ–≤–∞—Ä —è–≤–Ω–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π
    if (refLower.includes('–¥–æ–º') || refLower.includes('—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞')) {
      console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
      return null;
    }

    for (const category of categories) {
      const categoryName = (category.objectName || '').toLowerCase();
      
      if (categoryName.includes(refLower) || refLower.includes(categoryName)) {
        return {
          category,
          score: 60, // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–æ–≥–∞
          reason: '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∞–Ω–∞–ª–æ–≥–∞',
          source: 'reference'
        };
      }
    }

    return null;
  }

  /**
   * Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  private static getFallbackCategory(aiCategory: string, productName: string): CategoryMatch {
    const searchText = `${aiCategory} ${productName}`.toLowerCase();

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const fallbackCategories = [
      {
        keywords: ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–∫–∞–±–µ–ª—å', '–∑–∞—Ä—è–¥–∫', 'usb', 'type-c'],
        category: { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '', isLeaf: true }
      },
      {
        keywords: ['–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª', '–º–∞—à–∏–Ω'],
        category: { objectID: 1347, objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', parentID: 0, parentName: '', isLeaf: true }
      },
      {
        keywords: ['–æ–¥–µ–∂–¥', '—Ñ—É—Ç–±–æ–ª–∫', '—Ä—É–±–∞—à–∫'],
        category: { objectID: 306, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '', isLeaf: true }
      }
    ];

    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (const fallback of fallbackCategories) {
      const hasMatch = fallback.keywords.some(keyword => searchText.includes(keyword));
      if (hasMatch) {
        return {
          category: fallback.category,
          score: 50,
          reason: `Fallback –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º`,
          source: 'fallback'
        };
      }
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ù–ï "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
    if (searchText.includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω') || searchText.includes('–∫–∞–±–µ–ª') || searchText.includes('–∑–∞—Ä—è–¥–∫')) {
      return {
        category: { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '', isLeaf: true },
        score: 45,
        reason: '–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
        source: 'fallback'
      };
    }

    // –û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    return {
      category: { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: 0, parentName: '', isLeaf: true },
      score: 25,
      reason: '–û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      source: 'fallback'
    };
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–æ—É—Ç–µ
export function findBestCategoryForProduct(
  geminiAnalysis: any,
  wbCategories: any[],
  referenceData?: any
): CategoryMatch {
  return CategoryMatcher.findBestCategory(
    geminiAnalysis.wbCategory || '',
    geminiAnalysis.visualAnalysis?.productType || '',
    geminiAnalysis.visualAnalysis?.productType || '',
    wbCategories,
    referenceData
  );
}