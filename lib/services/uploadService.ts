// lib/services/uploadService.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤

export class UploadService {
  private readonly maxFileSize = 10 * 1024 * 1024; // 10MB
  private readonly allowedTypes = [
    'image/jpeg',
    'image/jpg', 
    'image/png',
    'image/webp',
    'image/gif'
  ];

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
   */
  async uploadFile(file: File): Promise<string> {
    try {
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name, `(${this.formatFileSize(file.size)})`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      this.validateFile(file);
      
      // TODO: Implement real file upload (Supabase Storage, Cloudinary, AWS S3, etc.)
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ data URL
      const dataUrl = await this.convertToDataUrl(file);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return dataUrl;
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:
      /*
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`Upload failed: ${response.status}`);
      }
      
      const result = await response.json();
      return result.url;
      */
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private validateFile(file: File): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > this.maxFileSize) {
      throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if (!this.allowedTypes.includes(file.type)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${this.allowedTypes.join(', ')}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    const allowedExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];
    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
    
    if (!allowedExtensions.includes(fileExtension)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fileExtension}`);
    }

    console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ data URL (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
   */
private async convertToDataUrl(file: File): Promise<string> {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ –Ω–µ—Ç FileReader
    // –ú—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ ArrayBuffer, –∑–∞—Ç–µ–º –≤ Buffer, –∑–∞—Ç–µ–º –≤ Base64
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64 = buffer.toString('base64');
    
    return `data:${file.type};base64,${base64}`;
  }

 
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async deleteFile(url: string): Promise<boolean> {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª:', url);
      
      // TODO: Implement real file deletion
      // –î–ª—è data URLs –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å
      if (url.startsWith('data:')) {
        return true;
      }
      
      // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö URLs:
      /*
      const response = await fetch('/api/upload', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url })
      });
      
      return response.ok;
      */
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –ø–æ URL
   */
  async getFileInfo(url: string): Promise<{
    exists: boolean;
    size?: number;
    type?: string;
    lastModified?: Date;
  }> {
    try {
      // –î–ª—è data URLs
      if (url.startsWith('data:')) {
        const mimeMatch = url.match(/^data:([^;]+)/);
        const base64Data = url.split(',')[1];
        
        return {
          exists: true,
          type: mimeMatch ? mimeMatch[1] : 'unknown',
          size: base64Data ? Math.floor(base64Data.length * 0.75) : 0 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        };
      }

      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö URLs
      const response = await fetch(url, { method: 'HEAD' });
      
      if (!response.ok) {
        return { exists: false };
      }

      return {
        exists: true,
        size: parseInt(response.headers.get('content-length') || '0'),
        type: response.headers.get('content-type') || 'unknown',
        lastModified: response.headers.get('last-modified') 
          ? new Date(response.headers.get('last-modified')!) 
          : undefined
      };

    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ:', error);
      return { exists: false };
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  async uploadMultipleFiles(files: FileList | File[]): Promise<{
    successful: string[];
    failed: Array<{ file: string; error: string }>;
  }> {
    const successful: string[] = [];
    const failed: Array<{ file: string; error: string }> = [];

    const fileArray = Array.from(files);
    
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º ${fileArray.length} —Ñ–∞–π–ª–æ–≤...`);

    for (const file of fileArray) {
      try {
        const url = await this.uploadFile(file);
        successful.push(url);
        console.log(`‚úÖ ${file.name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        failed.push({ file: file.name, error: errorMessage });
        console.error(`‚ùå ${file.name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:`, errorMessage);
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${successful.length} —É—Å–ø–µ—à–Ω–æ, ${failed.length} —Å –æ—à–∏–±–∫–∞–º–∏`);

    return { successful, failed };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async checkServiceHealth(): Promise<{
    status: 'healthy' | 'degraded' | 'unhealthy';
    message: string;
  }> {
    try {
      // TODO: Implement real health check
      // –î–ª—è –∑–∞–≥–ª—É—à–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º healthy
      return {
        status: 'healthy',
        message: '–°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)'
      };

      /*
      // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:
      const response = await fetch('/api/upload/health', {
        method: 'GET',
        signal: AbortSignal.timeout(5000)
      });

      if (response.ok) {
        return {
          status: 'healthy',
          message: '–°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
        };
      } else {
        return {
          status: 'degraded',
          message: `–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: HTTP ${response.status}`
        };
      }
      */

    } catch (error) {
      return {
        status: 'unhealthy',
        message: `–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  getUploadSettings() {
    return {
      maxFileSize: this.maxFileSize,
      maxFileSizeFormatted: this.formatFileSize(this.maxFileSize),
      allowedTypes: this.allowedTypes,
      allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp', '.gif']
    };
  }

  /**
   * –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
   */
  async compressImage(file: File, quality: number = 0.8): Promise<File> {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();

      img.onload = () => {
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–º–∞–∫—Å–∏–º—É–º 1920x1080)
        const maxWidth = 1920;
        const maxHeight = 1080;
        
        let { width, height } = img;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }

        canvas.width = width;
        canvas.height = height;

        // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx?.drawImage(img, 0, 0, width, height);

        canvas.toBlob(
          (blob) => {
            if (blob) {
              const compressedFile = new File([blob], file.name, {
                type: file.type,
                lastModified: Date.now()
              });
              resolve(compressedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            }
          },
          file.type,
          quality
        );
      };

      img.onerror = () => {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è'));
      };

      img.src = URL.createObjectURL(file);
    });
  }
}

export const uploadService = new UploadService();