// lib/services/updatedWbApiService.ts - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WB API

import { WB_API_CONFIG, DEFAULT_VALUES } from '../config/wbApiConfig';
import {
  WBCategory,
  CategoryHierarchy,
  CategoryCharacteristic,
  ProductCardData,
  WBApiResponse,
  WBCardCreateRequest,
  normalizeCategory,
  getCategoryId,
  WB_CATEGORY_DEFAULTS
} from '../types/wbTypes';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type {
  WBCategory,
  CategoryHierarchy,
  CategoryCharacteristic,
  ProductCardData,
  WBApiResponse,
  WBCardCreateRequest
} from '../types/wbTypes';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è API –ø—Ä–æ–∫—Å–∏.
 * –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å.
 */
const getApiProxyUrl = (): string => {
  if (typeof window !== 'undefined') {
    // –í –±—Ä–∞—É–∑–µ—Ä–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    return '/api/wb-proxy';
  }
  // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å—Ç—Ä–æ–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
  return `${baseUrl}/api/wb-proxy`;
};

export class UpdatedWbApiService {
  private readonly maxRetries = 3;
  private readonly retryDelay = 1000;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB
   */
  async getAllCategories(cabinetId: string, useCache: boolean = true): Promise<WBCategory[]> {
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB...');

      const response = await fetch(`/api/wb-categories?cabinetId=${cabinetId}&flat=true&useCache=${useCache}`);
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result.data.categories.map(normalizeCategory);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getCategoryHierarchy(cabinetId: string, useCache: boolean = true): Promise<CategoryHierarchy[]> {
    try {
      console.log('üå≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB...');

      const response = await fetch(`/api/wb-categories?cabinetId=${cabinetId}&flat=false&useCache=${useCache}`);
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è –∏–∑ ${result.data.hierarchy?.length || 0} –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result.data.hierarchy || [];

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error.message}`);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  async searchCategories(cabinetId: string, query: string, limit: number = 20): Promise<WBCategory[]> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

      const response = await fetch(
        `/api/wb-categories?cabinetId=${cabinetId}&search=${encodeURIComponent(query)}&limit=${limit}&flat=true`
      );
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.data.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result.data.categories.map(normalizeCategory);

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`);
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞
   */
  async findBestCategory(productName: string, cabinetId: string, productDescription?: string): Promise<WBCategory | null> {
    try {
      console.log(`üéØ –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: "${productName}"`);

      const response = await fetch('/api/wb-categories', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cabinetId,
          productName,
          productDescription
        })
      });

      const result = await response.json();

      if (!result.success) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ò–ò –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        return null;
      }

      const suggestions = result.data.suggestions;
      if (suggestions && suggestions.length > 0) {
        const bestCategory = normalizeCategory(suggestions[0].category);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${bestCategory.objectName} (ID: ${bestCategory.objectID})`);
        return bestCategory;
      }

      return null;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(cabinetId: string, categoryId: number): Promise<CategoryCharacteristic[]> {
    try {
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}...`);

      const response = await fetch(
        `/api/wb-categories/characteristics?cabinetId=${cabinetId}&categoryId=${categoryId}`
      );
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
      return result.data.characteristics;

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
   */
  async validateCharacteristics(
    cabinetId: string,
    categoryId: number,
    characteristics: Record<string, any>
  ): Promise<{
    valid: boolean;
    errors: string[];
    warnings: string[];
    missingRequired: string[];
  }> {
    try {
      console.log(`‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}...`);

      const response = await fetch('/api/wb-categories/characteristics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cabinetId,
          categoryId,
          characteristics
        })
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
      }

      return result.data;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
      return {
        valid: false,
        errors: [`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`],
        warnings: [],
        missingRequired: []
      };
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è WB
   */
  prepareCardDataForWB(productData: ProductCardData): WBCardCreateRequest {
    const {
      vendorCode,
      title,
      description,
      brand,
      categoryId,
      price,
      dimensions,
      characteristics,
      packageContents,
      barcode
    } = productData;

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è WB API
    const cardData: WBCardCreateRequest = {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      vendorCode: vendorCode.substring(0, 75), // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ WB
      object: categoryId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º object –≤–º–µ—Å—Ç–æ subjectID
      brand: brand || DEFAULT_VALUES.BRAND,

      // –ù–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è
      title: title.substring(0, 60), // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ WB
      description: description.substring(0, 5000), // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ WB

      // –†–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å
      dimensions: {
        length: Math.round(dimensions.length * 10) / 10,
        width: Math.round(dimensions.width * 10) / 10,
        height: Math.round(dimensions.height * 10) / 10,
        weight: Math.round(dimensions.weight * 1000) / 1000
      },

      // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      characteristics: this.formatCharacteristicsForWB(characteristics),

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      composition: packageContents || '–¢–æ–≤–∞—Ä - 1 —à—Ç., —É–ø–∞–∫–æ–≤–∫–∞ - 1 —à—Ç.',

      // –ë–∞—Ä–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      ...(barcode && { barcode })
    };

    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è WB API');
    return cardData;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è WB API
   */
  private formatCharacteristicsForWB(characteristics: Record<string, any>): any[] {
    return Object.entries(characteristics).map(([id, value]) => {
      const formattedValue = Array.isArray(value) ? value : [String(value)];

      return {
        id: parseInt(id),
        value: formattedValue
      };
    }).filter(char => char.id && char.value.length > 0);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –≤ WB
   */
  async createProductCard(cardData: WBCardCreateRequest, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log('üöÄ –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –≤ WB...');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
      const response = await this.makeWbApiRequest({
        endpoint: '/content/v2/cards/upload',
        method: 'POST',
        data: [cardData], // WB API –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
        apiToken
      });

      if (response.success) {
        console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');

        const taskId = response.data?.taskID || response.data?.data?.taskID;

        return {
          success: true,
          data: response.data,
          taskId: taskId
        };
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏):', response.error);
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏');
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞: ${error.message}`
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
   */
  async checkCardCreationStatus(taskId: string, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (Task ID: ${taskId})...`);

      const response = await this.makeWbApiRequest({
        endpoint: `/content/v2/cards/upload/task/${taskId}/status`,
        method: 'GET',
        apiToken
      });

      if (response.success) {
        const status = response.data?.data?.status || response.data?.status;
        console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${status}`);

        return {
          success: true,
          data: {
            status,
            taskId,
            ...response.data
          }
        };
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ${error.message}`
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
   */
  async getCardByVendorCode(vendorCode: string, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ${vendorCode}`);

      const response = await this.makeWbApiRequest({
        endpoint: `/content/v2/get/cards/list?vendorCode=${encodeURIComponent(vendorCode)}`,
        method: 'GET',
        apiToken
      });

      if (response.success) {
        const cards = response.data?.data?.cards || response.data?.cards || [];

        if (cards.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${vendorCode}`);
          return {
            success: true,
            data: cards[0]
          };
        } else {
          return {
            success: false,
            error: `–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${vendorCode} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
          };
        }
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏');
      }

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É ${vendorCode}:`, error);
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É: ${error.message}`
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
   */
  async updateProductPrice(vendorCode: string, price: number, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${vendorCode}: ${price} —Ä—É–±.`);

      const response = await this.makeWbApiRequest({
        endpoint: '/public/api/v1/prices',
        method: 'POST',
        data: [{
          vendorCode,
          price: Math.round(price * 100) // WB API –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }],
        apiToken,
        baseUrl: WB_API_CONFIG.BASE_URLS.DISCOUNTS_PRICES
      });

      if (response.success) {
        console.log(`‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${vendorCode}`);
        return {
          success: true,
          data: response.data
        };
      } else {
        throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã');
      }

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${vendorCode}:`, error);
      return {
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É: ${error.message}`
      };
    }
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WB API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù)
   */
  private async makeWbApiRequest({
    endpoint,
    method = 'GET',
    data,
    apiToken,
    baseUrl,
    retry = 0
  }: {
    endpoint: string;
    method?: string;
    data?: any;
    apiToken: string;
    baseUrl?: string;
    retry?: number;
  }): Promise<WBApiResponse> {
    const proxyUrl = getApiProxyUrl(); // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL

    try {
      const response = await fetch(proxyUrl, { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          endpoint,
          method,
          data,
          apiToken,
          baseUrl,
          useCache: method === 'GET'
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Proxy Error ${response.status}: ${errorText}`);
      }
      
      const result = await response.json();

      if (!result.success && retry < this.maxRetries) {
        console.warn(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retry + 1}/${this.maxRetries} –¥–ª—è ${endpoint} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Ç –ø—Ä–æ–∫—Å–∏: ${result.error}`);
        await this.delay(this.retryDelay * (retry + 1));
        return this.makeWbApiRequest({ endpoint, method, data, apiToken, baseUrl, retry: retry + 1 });
      }

      return result;

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–∫—Å–∏ (${endpoint}): ${error.message}`);
      if (retry < this.maxRetries) {
        console.warn(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retry + 1}/${this.maxRetries} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏.`);
        await this.delay(this.retryDelay * (retry + 1));
        return this.makeWbApiRequest({ endpoint, method, data, apiToken, baseUrl, retry: retry + 1 });
      }

      // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ –ø–æ —Å—Ç–µ–∫—É –≤—ã–∑–æ–≤–æ–≤
      throw error;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WB API
   */
  async testConnection(apiToken: string): Promise<{
    success: boolean;
    tests: Array<{
      name: string;
      description: string;
      status: 'success' | 'error';
      message: string;
      responseTime: string;
      endpoint?: string;
      httpStatus?: number;
    }>;
    summary: {
      totalTests: number;
      successCount: number;
      failureCount: number;
      overallStatus: 'success' | 'partial' | 'failed';
      recommendation: string;
    };
  }> {
    const tests = [
      {
        name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API —Ç–æ–∫–µ–Ω–∞',
        endpoint: '/content/v2/object/parent/all?locale=ru&limit=1'
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        endpoint: '/content/v2/object/all?locale=ru&limit=10'
      },
      {
        name: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞")',
        endpoint: `/content/v2/object/charcs/${WB_CATEGORY_DEFAULTS.FALLBACK_CATEGORY_ID}?locale=ru`
      }
    ];

    const results = [];
    let successCount = 0;

    for (const test of tests) {
      const startTime = Date.now();
      let response: WBApiResponse | null = null;
      let errorMessage = '';

      try {
        response = await this.makeWbApiRequest({
          endpoint: test.endpoint,
          method: 'GET',
          apiToken
        });

        if (!response.success) {
            errorMessage = response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç API';
        }
      } catch (error: any) {
        errorMessage = error.message;
      }

      const responseTime = `${Date.now() - startTime}ms`;

      if (response && response.success) {
        successCount++;
        results.push({
          ...test,
          status: 'success' as const,
          message: '–£—Å–ø–µ—à–Ω–æ',
          responseTime,
          httpStatus: response.statusCode
        });
      } else {
        results.push({
          ...test,
          status: 'error' as const,
          message: errorMessage,
          responseTime,
          httpStatus: response?.statusCode
        });
      }
    }

    const totalTests = tests.length;
    const failureCount = totalTests - successCount;

    let overallStatus: 'success' | 'partial' | 'failed';
    let recommendation: string;

    if (successCount === totalTests) {
      overallStatus = 'success';
      recommendation = '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. API —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.';
    } else if (successCount > 0) {
      overallStatus = 'partial';
      recommendation = '–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ API —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ü–∏–π.';
    } else {
      overallStatus = 'failed';
      recommendation = 'API —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.';
    }

    return {
      success: overallStatus !== 'failed',
      tests: results,
      summary: {
        totalTests,
        successCount,
        failureCount,
        overallStatus,
        recommendation
      }
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const updatedWbApiService = new UpdatedWbApiService();