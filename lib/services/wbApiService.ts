// lib/services/wbApiService.ts
import axios from 'axios';
export class WbApiService {
  private readonly BASE_URL = 'https://suppliers-api.wildberries.ru';

  private async makeRequest(endpoint: string, apiToken: string, options: RequestInit = {}) {
    const url = `${this.BASE_URL}${endpoint}`;
    const headers = {
      'Authorization': apiToken,
      'Content-Type': 'application/json',
      ...options.headers,
    };
const readClient = axios.create({
  baseURL: 'https://content-api.wildberries.ru',
  headers: { Authorization: process.env.WB_API_READ_TOKEN },
});

const writeClient = axios.create({
  baseURL: 'https://content-api.wildberries.ru',
  headers: { Authorization: process.env.WB_API_WRITE_TOKEN },
});

    console.log(`üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ WB API: ${url}`);
    const response = await fetch(url, { ...options, headers });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ WB API (HTTP ${response.status}): ${errorText}`);
    }
    
    return response.json();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getAllCategories(apiToken: string): Promise<any[]> {
    const response = await this.makeRequest('/content/v1/object/all', apiToken);
    return response.data || [];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(subjectId: number, apiToken: string): Promise<any[]> {
    const response = await this.makeRequest(`/content/v1/object/charcs/${subjectId}`, apiToken);
    return response.data || [];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–æ–≤–æ–º—É API v3
   */
  async createProductCard(cardData: any, apiToken: string): Promise<any> {
    // –í–ê–ñ–ù–û: API v3 –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ –ø–æ–ª–µ 'characteristics' –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ 'nomenclatures'
    const payload = {
      imtID: cardData.imtID,
      nomenclatures: cardData.nomenclatures.map((nom: any) => ({
        ...nom,
        characteristics: cardData.characteristics, // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—é–¥–∞
      })),
    };

    const response = await this.makeRequest('/content/v3/cards/upload', apiToken, {
      method: 'POST',
      body: JSON.stringify([payload]), // API –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤
    });

    if (response?.error) {
        return { success: false, error: response.errorText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
    }
    
    return { success: true, data: response };
  }
}


export const wbApiService = new WbApiService();