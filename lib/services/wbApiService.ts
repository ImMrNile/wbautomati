// lib/services/wbApiService.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ò–ú–ü–û–†–¢–ê–ú–ò

import { WB_API_CONFIG, WBApiUtils, EXTENDED_DEFAULT_VALUES, DEFAULT_VALUES } from '../config/wbApiConfig';
import { 
  validateCardForWB, 
  logCardStructure
} from '../utils/wbCharacteristicsUtils';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface WBApiResponse {
  success: boolean;
  data?: any;
  error?: string;
  taskId?: string;
}

interface CharacteristicValue {
  id: number;
  value: any;
}

interface ProductDimensions {
  length: number;
  width: number;
  height: number;
  weightBrutto: number;
}

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ü–µ–Ω
interface ProductSize {
  techSize?: string;
  wbSize?: string;
  price: number;
  discountedPrice?: number; // –ù–û–í–û–ï –ü–û–õ–ï: –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
  skus: string[];
}

interface ProductVariant {
  vendorCode: string;
  title: string;
  description?: string;
  brand: string;
  dimensions: ProductDimensions;
  characteristics: CharacteristicValue[];
  sizes: ProductSize[];
}

interface ProductCard {
  subjectID: number;
  variants: ProductVariant[];
}

interface ApiHealthResult {
  healthy: boolean;
  message: string;
  details?: {
    responseTime: number;
    endpoint?: string;
    error?: string;
    timestamp: string;
  };
}

interface CategoryCharacteristic {
  id: number;
  name: string;
  required: boolean;
  type: string;
  maxLength?: number | null;
  values: any[];
  dictionary?: any;
}

interface DbCharacteristic {
  id: number;
  wbCharacteristicId?: number | null;
  name: string;
  type: string;
  isRequired: boolean;
  values?: any[];
}

// –ù–û–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
interface PriceInfo {
  original: number;
  discount?: number | null;
  final: number;
  hasDiscount: boolean;
  discountPercent?: number | null;
  discountAmount?: number | null;
}

interface PriceValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

interface SizePricingStats {
  totalSizes: number;
  sizesWithDiscount: number;
  sizesWithoutDiscount: number;
  averagePrice: number;
  averageDiscountedPrice?: number;
  averageDiscountPercent?: number;
  maxDiscount?: number;
  minDiscount?: number;
}

// –ù–û–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –¥–ª—è –º–µ–¥–∏–∞
interface MediaUploadResult {
  success: boolean;
  mediaId?: string;
  url?: string;
  error?: string;
}

interface ImageProcessingOptions {
  resize?: {
    width: number;
    height: number;
  };
  quality?: number;
  format?: 'jpg' | 'png' | 'webp';
}

// –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (—Å–∏—Å—Ç–µ–º–Ω—ã–µ)
const EXCLUDED_CHARACTERISTICS_IDS = new Set([
  15001135, // –ù–æ–º–µ—Ä –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
  15001136, // –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è  
  15001137, // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  15001138, // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  15001405, // –°—Ç–∞–≤–∫–∞ –ù–î–°
  15001650, // –ò–ö–ü–£
  15001706, // –ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏
  14177453, // SKU
  15000001  // –¢–ù–í–≠–î
]);

// FALLBACK –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î)
const FALLBACK_NUMERIC_IDS = new Set([
  89008, 13491, 90746, 72739, 90878, 63292, 65667, 65666, 75146,
  89064, 90630, 90652, 90607, 90608, 11001, 11002, 90653, 90654, 90655,
  15003008, 15003011, 5478, 5479, 5480, 5481, 5482, 6234, 6235, 6236, 6237,
  7891, 7894, 7895, 7896, 8456, 8457, 8458, 9123, 9124, 9125,
  10234, 10235, 10236, 10237, 11003, 12001, 12002, 12003,
  13001, 13002, 13003, 14001, 14002, 14003, 15001, 15002, 15003
]);

export class WbApiService {
  private readonly BASE_URL = WB_API_CONFIG.BASE_URLS.CONTENT;
  private readonly TIMEOUT = WB_API_CONFIG.TIMEOUTS.DEFAULT;

  // –ö–µ—à —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –ë–î
  private characteristicTypesCache = new Map<number, string>();
  
  // –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  private categoriesCache = new Map<number, any>();
  private characteristicsCache = new Map<number, CategoryCharacteristic[]>();

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ WB
   */
  private validateToken(token: string): boolean {
    try {
      const segments = token.split('.');
      if (segments.length !== 3) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Å–µ–≥–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ:', segments.length);
        return false;
      }
      
      const payload = JSON.parse(atob(segments[1]));
      if (!payload.sid || !payload.exp) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–æ–∫–µ–Ω–µ');
        return false;
      }
      
      if (Date.now() > payload.exp * 1000) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
        return false;
      }
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, ID –ø—Ä–æ–¥–∞–≤—Ü–∞:', payload.sid);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WB API
   */
  private async makeRequest(endpoint: string, apiToken: string, options: RequestInit = {}): Promise<any> {
    if (!this.validateToken(apiToken)) {
      throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.');
    }

    const url = `${this.BASE_URL}${endpoint}`;
    
    const headers = {
      'Authorization': apiToken,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'User-Agent': 'WB-AI-Assistant/2.0',
      ...options.headers,
    };

    console.log(`üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ WB API: ${url}`);
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.TIMEOUT);

      const response = await fetch(url, {
        ...options,
        headers,
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      const responseClone = response.clone();

      if (!response.ok) {
        let errorData = null;
        let responseText = '';
        
        try {
          responseText = await responseClone.text();
          console.log('üì• –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API:', responseText);
          
          if (responseText) {
            errorData = JSON.parse(responseText);
          }
        } catch (parseError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç');
          errorData = { message: responseText || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞' };
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        const formattedError = this.formatWBApiError(response.status, errorData, responseText);
        throw new Error(formattedError);
      }

      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç WB API');
      return data;

    } catch (error) {
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API');
        }
        throw error;
      }
      throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ WB API
   */
  private formatWBApiError(status: number, errorData: any, responseText: string): string {
    switch (status) {
      case 400:
        console.error('‚ùå –û—à–∏–±–∫–∞ 400 - –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', errorData);
        const detailedError = errorData?.errors ? 
          `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errorData.errors)}` :
          `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${errorData?.message || errorData?.detail || responseText}`;
        return detailedError;
        
      case 401:
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WB API:', errorData);
        return `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API: ${errorData?.detail || errorData?.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ'}`;
        
      case 403:
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ WB API:', errorData);
        return `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: ${errorData?.detail || errorData?.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞'}`;
        
      case 404:
        console.error('‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω WB API:', errorData);
        return `–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${errorData?.detail || errorData?.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞'}`;
        
      case 409:
        console.error('‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö WB API:', errorData);
        return `–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö: ${errorData?.detail || errorData?.message || '–í–æ–∑–º–æ–∂–Ω–æ, –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`;
        
      case 422:
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WB API:', errorData);
        return `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${errorData?.detail || errorData?.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö'}`;
        
      case 429:
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ WB API');
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
        
      case 500:
      case 502:
      case 503:
      case 504:
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ WB API:', errorData);
        return `–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ WB (${status}). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.`;
        
      default:
        const errorText = errorData?.detail || errorData?.message || responseText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        return `–û—à–∏–±–∫–∞ WB API (${status}): ${errorText}`;
    }
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
   */
  async createProductCard(cardData: any, apiToken: string, categoryCharacteristics?: DbCharacteristic[]): Promise<WBApiResponse> {
    try {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ WB API v2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω...');
      
      if (!cardData.subjectID) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (subjectID)');
      }
      
      if (!cardData.variants || cardData.variants.length === 0) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞');
      }

      const variant = cardData.variants[0];
      if (!variant.vendorCode) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
      if (!WBApiUtils.validateVendorCode(variant.vendorCode)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞');
      }

      // –ö–µ—à–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (categoryCharacteristics && categoryCharacteristics.length > 0) {
        this.cacheCharacteristicTypes(categoryCharacteristics);
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
      const correctedCardData = this.createCorrectedCardData(cardData);
      
      logCardStructure(correctedCardData, '–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ü–µ–Ω–∞–º–∏');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –¥–≤—É—Ö —Ü–µ–Ω
      const cardValidation = this.validateCardData(correctedCardData);
      if (!cardValidation.isValid) {
        console.error('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', cardValidation.errors);
        throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${cardValidation.errors.join('; ')}`);
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const pricingStats = this.analyzePricingStructure(correctedCardData.variants[0].sizes);
      this.logPricingStats(pricingStats);

      const response = await this.makeRequest(
        WB_API_CONFIG.ENDPOINTS.CREATE_CARDS,
        apiToken,
        {
          method: 'POST',
          body: JSON.stringify([correctedCardData])
        }
      );

      console.log('üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç WB API:', JSON.stringify(response, null, 2));

      if (response.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ WB API:', response.error);
        return { 
          success: false, 
          error: WBApiUtils.formatApiError(response.error)
        };
      }

      if (Array.isArray(response) && response.length > 0 && response[0].error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç–≤–µ—Ç–æ–≤:', response[0].error);
        return { 
          success: false, 
          error: WBApiUtils.formatApiError(response[0].error)
        };
      }

      console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      console.log(`üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: ${pricingStats.totalSizes}`);
      console.log(`üìä –†–∞–∑–º–µ—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${pricingStats.sizesWithDiscount}`);
      
      return { 
        success: true, 
        data: response,
        taskId: response.taskId || (Array.isArray(response) ? response[0]?.taskId : null)
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–≤—É–º—è —Ü–µ–Ω–∞–º–∏:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }

  /**
   * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –ë–î
   */
  private cacheCharacteristicTypes(characteristics: DbCharacteristic[]): void {
    console.log('üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –ë–î...');
    for (const char of characteristics) {
      const id = char.wbCharacteristicId || char.id;
      const type = char.type || 'string';
      this.characteristicTypesCache.set(id, type);
      console.log(`üìã –ö–µ—à: ID ${id} ‚Üí —Ç–∏–ø "${type}"`);
    }
    console.log(`‚úÖ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ ${this.characteristicTypesCache.size} —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ë–î ‚Üí fallback)
   */
  private getCharacteristicType(characteristicId: number): 'number' | 'string' {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∏–∑ –ë–î
    const cachedType = this.characteristicTypesCache.get(characteristicId);
    if (cachedType) {
      console.log(`üìã –¢–∏–ø –∏–∑ –ë–î: ID ${characteristicId} ‚Üí ${cachedType}`);
      return cachedType === 'number' ? 'number' : 'string';
    }

    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const isNumeric = FALLBACK_NUMERIC_IDS.has(characteristicId);
    console.log(`üìã –¢–∏–ø fallback: ID ${characteristicId} ‚Üí ${isNumeric ? 'number' : 'string'}`);
    return isNumeric ? 'number' : 'string';
  }

  /**
   * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API —Å –¥–≤—É–º—è —Ü–µ–Ω–∞–º–∏
   */
  private createCorrectedCardData(originalData: any): ProductCard {
    const variant = originalData.variants[0];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ç–∏–ø–∞–º–∏ –∏–∑ –ë–î
    const correctedCharacteristics = this.correctCharacteristicsWithDbTypes(variant.characteristics || []);
    
    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
    const correctedSizes = this.correctSizesWithDualPricing(variant.sizes || []);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏
    const dimensions = this.validateAndCorrectDimensions(variant.dimensions);
    
    const correctedData: ProductCard = {
      subjectID: originalData.subjectID,
      variants: [{
        vendorCode: variant.vendorCode,
        title: WBApiUtils.truncateText(variant.title || '–¢–æ–≤–∞—Ä', 120),
        description: WBApiUtils.truncateText(variant.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 5000),
        brand: variant.brand || DEFAULT_VALUES.BRAND || '–ù–µ—Ç –±—Ä–µ–Ω–¥–∞',
        dimensions: dimensions,
        characteristics: correctedCharacteristics,
        sizes: correctedSizes // –¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π discountedPrice
      }]
    };

    return correctedData;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏
   */
private validateAndCorrectDimensions(dimensions: any): ProductDimensions {
  const defaultDims = EXTENDED_DEFAULT_VALUES.DIMENSIONS;
  
  // üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–ï–°–ê
  const userWeight = Number(dimensions?.weightBrutto || dimensions?.weight);
  let weightInGrams: number;
  
  console.log(`üìê –ò—Å—Ö–æ–¥–Ω—ã–π –≤–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userWeight} (—Ç–∏–ø: ${typeof userWeight})`);
  
  if (userWeight && !isNaN(userWeight)) {
    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if (userWeight <= 10) {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚â§ 10, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
      weightInGrams = Math.round(userWeight * 1000);
      console.log(`üìê –í–µ—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã: ${userWeight} –∫–≥ ‚Üí ${weightInGrams} –≥`);
    } else if (userWeight >= 1000) {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚â• 1000, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É–∂–µ –≥—Ä–∞–º–º—ã
      weightInGrams = Math.round(userWeight);
      console.log(`üìê –í–µ—Å –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –≥—Ä–∞–º–º—ã: ${weightInGrams} –≥`);
    } else {
      // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (10-1000) - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É
      if (userWeight < 100) {
        // –í–µ—Ä–æ—è—Ç–Ω–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã (10-100 –∫–≥ - —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
        weightInGrams = Math.round(userWeight * 1000);
        console.log(`üìê –í–µ—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã (–¥–∏–∞–ø–∞–∑–æ–Ω 10-100): ${userWeight} –∫–≥ ‚Üí ${weightInGrams} –≥`);
      } else {
        // –í–µ—Ä–æ—è—Ç–Ω–æ –≥—Ä–∞–º–º—ã (100-1000 –≥ - —Ç–æ–∂–µ —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
        weightInGrams = Math.round(userWeight);
        console.log(`üìê –í–µ—Å –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –≥—Ä–∞–º–º—ã (–¥–∏–∞–ø–∞–∑–æ–Ω 100-1000): ${weightInGrams} –≥`);
      }
    }
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    weightInGrams = defaultDims.WEIGHT || 500;
    console.log(`üìê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–µ—Å: ${weightInGrams} –≥`);
  }
  
  // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: WB —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –æ—Ç 1 –¥–æ 1000000
  weightInGrams = Math.max(1, Math.min(1000000, weightInGrams));
  
  const corrected = {
    length: Math.max(1, Math.round(Number(dimensions?.length) || defaultDims.LENGTH)),
    width: Math.max(1, Math.round(Number(dimensions?.width) || defaultDims.WIDTH)),
    height: Math.max(1, Math.round(Number(dimensions?.height) || defaultDims.HEIGHT)),
    weightBrutto: weightInGrams // ‚úÖ –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è WB API
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
  const validationErrors = WBApiUtils.validateDimensions({
    length: corrected.length,
    width: corrected.width,
    height: corrected.height,
    weight: corrected.weightBrutto / 1000 // –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∫–≥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  });

  if (validationErrors.length > 0) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:', validationErrors);
  }

  console.log(`üìê –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è WB API:`);
  console.log(`   - –î–ª–∏–Ω–∞: ${corrected.length} —Å–º`);
  console.log(`   - –®–∏—Ä–∏–Ω–∞: ${corrected.width} —Å–º`);
  console.log(`   - –í—ã—Å–æ—Ç–∞: ${corrected.height} —Å–º`);
  console.log(`   - –í–µ—Å: ${corrected.weightBrutto} –≥ (${(corrected.weightBrutto/1000).toFixed(2)} –∫–≥)`);
  
  return corrected;
}

/**
 * üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–∞
 */
private smartWeightNormalization(inputWeight: any, context?: string): number {
  const weight = parseFloat(String(inputWeight).replace(/[^\d.,]/g, '').replace(',', '.'));
  
  if (isNaN(weight) || weight <= 0) {
    console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: "${inputWeight}", –∏—Å–ø–æ–ª—å–∑—É–µ–º 500–≥`);
    return 500;
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü
  const contextHints = {
    hasKgIndicator: String(inputWeight).toLowerCase().includes('–∫–≥'),
    hasGramIndicator: String(inputWeight).toLowerCase().includes('–≥'),
    hasDecimalPoint: String(inputWeight).includes('.') || String(inputWeight).includes(',')
  };
  
  console.log(`üîç –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–∞ "${inputWeight}":`, {
    numericValue: weight,
    ...contextHints
  });
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –µ–¥–∏–Ω–∏—Ü
  if (contextHints.hasKgIndicator) {
    const result = Math.round(weight * 1000);
    console.log(`‚úÖ –Ø–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∫–≥": ${weight} –∫–≥ ‚Üí ${result} –≥`);
    return result;
  }
  
  if (contextHints.hasGramIndicator) {
    const result = Math.round(weight);
    console.log(`‚úÖ –Ø–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–≥": ${result} –≥`);
    return result;
  }
  
  // –õ–æ–≥–∏–∫–∞ –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
  if (weight <= 0.001) {
    // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤–µ—Ä–æ—è—Ç–Ω–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
    const result = Math.round(weight * 1000000); // –º–∏–∫—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí –≥—Ä–∞–º–º—ã
    console.log(`üî¨ –ú–∏–∫—Ä–æ–∑–Ω–∞—á–µ–Ω–∏–µ: ${weight} ‚Üí ${result} –≥`);
    return Math.max(1, result);
  }
  
  if (weight <= 10) {
    // 0.001 - 10: –≤–µ—Ä–æ—è—Ç–Ω–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
    const result = Math.round(weight * 1000);
    console.log(`‚öñÔ∏è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞–∫ –∫–≥: ${weight} –∫–≥ ‚Üí ${result} –≥`);
    return result;
  }
  
  if (weight <= 100) {
    // 10 - 100: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (contextHints.hasDecimalPoint) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ç–æ—á–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
      const result = Math.round(weight * 1000);
      console.log(`üìä –î–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∫–≥: ${weight} –∫–≥ ‚Üí ${result} –≥`);
      return result;
    } else {
      // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ - –≤–µ—Ä–æ—è—Ç–Ω–æ –≥—Ä–∞–º–º—ã
      const result = Math.round(weight);
      console.log(`üî¢ –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –≥—Ä–∞–º–º—ã: ${result} –≥`);
      return result;
    }
  }
  
  if (weight <= 1000) {
    // 100 - 1000: —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≥—Ä–∞–º–º—ã
    const result = Math.round(weight);
    console.log(`üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥—Ä–∞–º–º–æ–≤: ${result} –≥`);
    return result;
  }
  
  // > 1000: —Ç–æ—á–Ω–æ –≥—Ä–∞–º–º—ã
  const result = Math.round(weight);
  console.log(`üìà –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –≥—Ä–∞–º–º—ã: ${result} –≥`);
  return result;
}

/**
 * üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–∞ –¥–ª—è WB
 */
private validateWeightForWB(weightInGrams: number): { 
  isValid: boolean; 
  correctedWeight: number; 
  warnings: string[] 
} {
  const warnings: string[] = [];
  let correctedWeight = weightInGrams;
  
  // WB –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 1–≥ - 1000–∫–≥ (1,000,000–≥)
  const MIN_WEIGHT = 1;
  const MAX_WEIGHT = 1000000;
  
  if (weightInGrams < MIN_WEIGHT) {
    warnings.push(`–í–µ—Å ${weightInGrams}–≥ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (${MIN_WEIGHT}–≥)`);
    correctedWeight = MIN_WEIGHT;
  }
  
  if (weightInGrams > MAX_WEIGHT) {
    warnings.push(`–í–µ—Å ${weightInGrams}–≥ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (${MAX_WEIGHT}–≥ = 1000–∫–≥)`);
    correctedWeight = MAX_WEIGHT;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å
  if (weightInGrams > 50000) { // > 50 –∫–≥
    warnings.push(`–í–µ—Å ${weightInGrams}–≥ (${(weightInGrams/1000).toFixed(1)}–∫–≥) –∫–∞–∂–µ—Ç—Å—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`);
  }
  
  if (weightInGrams < 10) { // < 10 –≥
    warnings.push(`–í–µ—Å ${weightInGrams}–≥ –∫–∞–∂–µ—Ç—Å—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`);
  }
  
  return {
    isValid: warnings.length === 0,
    correctedWeight,
    warnings
  };
}

/**
 * üõ°Ô∏è –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò: –õ–æ–≥ –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –≤–µ—Å–∞
 */
private logWeightConversion(originalInput: any, finalWeight: number): void {
  console.log(`\nüìä –û–¢–ß–ï–¢ –û –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ò –í–ï–°–ê:`);
  console.log(`   üî¢ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(originalInput)}`);
  console.log(`   ‚öñÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Å: ${finalWeight} –≥ (${(finalWeight/1000).toFixed(3)} –∫–≥)`);
  console.log(`   üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${originalInput?.weight ? (finalWeight / Number(originalInput.weight)).toFixed(2) : 'N/A'}`);
  console.log(`   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç WB API: ${finalWeight >= 1 && finalWeight <= 1000000 ? '–î–ê' : '–ù–ï–¢'}`);
}

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ç–∏–ø–∞–º–∏ –∏–∑ –ë–î
   */
  private correctCharacteristicsWithDbTypes(characteristics: any[]): CharacteristicValue[] {
    const corrected: CharacteristicValue[] = [];
    
    console.log('üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∏–∑ –ë–î:', characteristics.length);
    
    for (const char of characteristics) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      if (EXCLUDED_CHARACTERISTICS_IDS.has(char.id)) {
        console.log(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É ID ${char.id}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const characteristicType = this.getCharacteristicType(char.id);
      
      if (characteristicType === 'number') {
        // –ß–ò–°–õ–û–í–´–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ß–ò–°–¢–û–ï –ß–ò–°–õ–û
        const numericValue = this.extractNumericValue(char.value);
        if (numericValue !== null) {
          corrected.push({
            id: char.id,
            value: numericValue
          });
          console.log(`‚úÖ –ß–ò–°–õ–û–í–ê–Ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID ${char.id}: "${char.value}" ‚Üí ${numericValue} (${typeof numericValue})`);
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ "${char.value}" –¥–ª—è —á–∏—Å–ª–æ–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${char.id}`);
          corrected.push({
            id: char.id,  
            value: 1
          });
          console.log(`üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1 –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${char.id}`);
        }
      } else {
        // –°–¢–†–û–ö–û–í–´–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        const value = Array.isArray(char.value) ? char.value[0] : char.value;
        if (value && String(value).trim() !== '') {
          corrected.push({
            id: char.id,
            value: [String(value).trim()]
          });
          console.log(`‚úÖ –°–¢–†–û–ö–û–í–ê–Ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID ${char.id}: [${String(value).trim()}]`);
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    this.addRequiredCharacteristics(corrected);
    
    console.log(`‚úÖ –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${corrected.length}`);
    return corrected;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  private addRequiredCharacteristics(characteristics: CharacteristicValue[]): void {
    const existingIds = characteristics.map(c => c.id);
    
    if (!existingIds.includes(85)) {
      characteristics.push({
        id: 85,
        value: [DEFAULT_VALUES.BRAND || "–ù–µ—Ç –±—Ä–µ–Ω–¥–∞"]
      });
      console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID 85: [–ù–µ—Ç –±—Ä–µ–Ω–¥–∞]');
    }
    
    if (!existingIds.includes(91)) {
      characteristics.push({
        id: 91,
        value: [DEFAULT_VALUES.COUNTRY || "–†–æ—Å—Å–∏—è"]
      });
      console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID 91: [–†–æ—Å—Å–∏—è]');
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  private extractNumericValue(value: any): number | null {
    if (value === null || value === undefined) {
      return null;
    }

    if (typeof value === 'number') {
      return value;
    }

    const stringValue = String(value).replace(/\s+/g, '').trim();
    
    if (stringValue === '') {
      return null;
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
    let match = stringValue.match(/^(\d+(?:[.,]\d+)?)$/);
    if (match) {
      return parseFloat(match[1].replace(',', '.'));
    }

    // –ß–∏—Å–ª–æ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    match = stringValue.match(/^(\d+(?:[.,]\d+)?)/);
    if (match) {
      return parseFloat(match[1].replace(',', '.'));
    }

    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑: "${stringValue}"`);
    return null;
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ü–µ–Ω
   */
  private correctSizesWithDualPricing(originalSizes: any[]): ProductSize[] {
    if (!originalSizes || originalSizes.length === 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞');
      throw new Error('–†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏');
    }

    const firstSize = originalSizes[0];
    const isSizeless = !firstSize.techSize && !firstSize.wbSize;

    console.log(`üìè –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (${originalSizes.length} —à—Ç.) —Å —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:`);

    if (isSizeless) {
      console.log('üì¶ –ë–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä - —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–µ–∑ techSize/wbSize');
      
      const correctedSize: ProductSize = {
        price: Math.max(1, Math.round(Number(firstSize.price) || 1000)),
        skus: firstSize.skus || []
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
      if (!WBApiUtils.validatePrice(correctedSize.price)) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${correctedSize.price}. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-999999 —Ä—É–±–ª–µ–π`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (firstSize.discountedPrice && firstSize.discountedPrice < firstSize.price) {
        correctedSize.discountedPrice = Math.max(1, Math.round(Number(firstSize.discountedPrice)));
        
        if (!WBApiUtils.validatePrice(correctedSize.discountedPrice)) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${correctedSize.discountedPrice}`);
        }
        
        const discountPercent = Math.round(((correctedSize.price - correctedSize.discountedPrice) / correctedSize.price) * 100);
        console.log(`   üí∞ –ë–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π: ${correctedSize.price}‚ÇΩ ‚Üí ${correctedSize.discountedPrice}‚ÇΩ (-${discountPercent}%)`);
      } else {
        console.log(`   üí∞ –ë–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π: ${correctedSize.price}‚ÇΩ`);
      }

      return [correctedSize];
    } else {
      console.log(`üëï –¢–æ–≤–∞—Ä —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${originalSizes.length} —Ä–∞–∑–º–µ—Ä–æ–≤`);
      
      return originalSizes.map((size, index) => {
        const correctedSize: ProductSize = {
          techSize: size.techSize || EXTENDED_DEFAULT_VALUES.TECH_SIZE,
          wbSize: size.wbSize || EXTENDED_DEFAULT_VALUES.WB_SIZE, 
          price: Math.max(1, Math.round(Number(size.price) || 1000)),
          skus: size.skus || []
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if (!WBApiUtils.validatePrice(correctedSize.price)) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1}: ${correctedSize.price}`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if (size.discountedPrice && size.discountedPrice < size.price) {
          correctedSize.discountedPrice = Math.max(1, Math.round(Number(size.discountedPrice)));
          
          if (!WBApiUtils.validatePrice(correctedSize.discountedPrice)) {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1}: ${correctedSize.discountedPrice}`);
          }
          
          const discountPercent = Math.round(((correctedSize.price - correctedSize.discountedPrice) / correctedSize.price) * 100);
          console.log(`   üìè –†–∞–∑–º–µ—Ä "${correctedSize.techSize}": ${correctedSize.price}‚ÇΩ ‚Üí ${correctedSize.discountedPrice}‚ÇΩ (-${discountPercent}%)`);
        } else {
          console.log(`   üìè –†–∞–∑–º–µ—Ä "${correctedSize.techSize}": ${correctedSize.price}‚ÇΩ`);
        }

        return correctedSize;
      });
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–Ω
   */
  private validateCardData(cardData: ProductCard): { isValid: boolean; errors: string[] } {
    const errors = [];

    if (!cardData.subjectID) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (subjectID)');
    }

    if (!cardData.variants || cardData.variants.length === 0) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞');
      return { isValid: false, errors };
    }

    const variant = cardData.variants[0];

    if (!variant.vendorCode) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞');
    } else if (!WBApiUtils.validateVendorCode(variant.vendorCode)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞');
    }

    if (!variant.title || variant.title.length < 10) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    if (variant.title && variant.title.length > 120) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 120 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    if (!variant.sizes || variant.sizes.length === 0) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞');
    } else {
      // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–Ω
      for (const [index, size] of variant.sizes.entries()) {
        if (!size.price || size.price < 1) {
          errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1} (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)`);
        }
        
        if (!WBApiUtils.validatePrice(size.price)) {
          errors.push(`–¶–µ–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${size.price}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
        if (size.discountedPrice) {
          if (size.discountedPrice < 1) {
            errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1} (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)`);
          }
          if (size.discountedPrice >= size.price) {
            errors.push(`–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—ã`);
          }
          if (!WBApiUtils.validatePrice(size.discountedPrice)) {
            errors.push(`–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${size.discountedPrice}`);
          }
        }
        
        if (!size.skus || !Array.isArray(size.skus) || size.skus.length === 0) {
          errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –≤ —Ä–∞–∑–º–µ—Ä–µ ${index + 1}`);
        }
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if (!variant.characteristics || !Array.isArray(variant.characteristics)) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    } else if (variant.characteristics.length < 3) {
      errors.push('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3)');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  private analyzePricingStructure(sizes: ProductSize[]): SizePricingStats {
    const sizesWithDiscount = sizes.filter(size => size.discountedPrice);
    const sizesWithoutDiscount = sizes.filter(size => !size.discountedPrice);

    const totalPrice = sizes.reduce((sum, size) => sum + size.price, 0);
    const averagePrice = totalPrice / sizes.length;

    let averageDiscountedPrice = undefined;
    let averageDiscountPercent = undefined;
    let maxDiscount = undefined;
    let minDiscount = undefined;

    if (sizesWithDiscount.length > 0) {
      const totalDiscountedPrice = sizesWithDiscount.reduce((sum, size) => sum + (size.discountedPrice || 0), 0);
      averageDiscountedPrice = totalDiscountedPrice / sizesWithDiscount.length;

      const discountPercents = sizesWithDiscount.map(size => 
        ((size.price - (size.discountedPrice || 0)) / size.price) * 100
      );
      
      averageDiscountPercent = discountPercents.reduce((sum, percent) => sum + percent, 0) / discountPercents.length;
      maxDiscount = Math.max(...discountPercents);
      minDiscount = Math.min(...discountPercents);
    }

    return {
      totalSizes: sizes.length,
      sizesWithDiscount: sizesWithDiscount.length,
      sizesWithoutDiscount: sizesWithoutDiscount.length,
      averagePrice,
      averageDiscountedPrice,
      averageDiscountPercent,
      maxDiscount,
      minDiscount
    };
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω
   */
  private logPricingStats(stats: SizePricingStats): void {
    console.log(`üí∞ –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏:`);
    console.log(`   - –í—Å–µ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤: ${stats.totalSizes}`);
    console.log(`   - –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–∫–∏: ${stats.sizesWithDiscount}`);
    console.log(`   - –ë–µ–∑ —Å–∫–∏–¥–∫–∏: ${stats.sizesWithoutDiscount}`);
    console.log(`   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${stats.averagePrice.toFixed(2)}‚ÇΩ`);
    
    if (stats.averageDiscountedPrice && stats.averageDiscountPercent) {
      console.log(`   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${stats.averageDiscountedPrice.toFixed(2)}‚ÇΩ`);
      console.log(`   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: ${stats.averageDiscountPercent.toFixed(1)}%`);
      console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: ${stats.maxDiscount?.toFixed(1)}%`);
      console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: ${stats.minDiscount?.toFixed(1)}%`);
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  public validatePriceInfo(priceInfo: PriceInfo): PriceValidationResult {
    const errors = [];
    const warnings = [];
    
    if (!priceInfo.original || priceInfo.original < 1) {
      errors.push('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    if (!WBApiUtils.validatePrice(priceInfo.original)) {
      errors.push(`–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${priceInfo.original}`);
    }
    
    if (priceInfo.discount) {
      if (priceInfo.discount < 1) {
        errors.push('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      
      if (priceInfo.discount >= priceInfo.original) {
        errors.push('–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã');
      }
      
      if (!WBApiUtils.validatePrice(priceInfo.discount)) {
        errors.push(`–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${priceInfo.discount}`);
      }
      
      const discountPercent = ((priceInfo.original - priceInfo.discount) / priceInfo.original) * 100;
      
      if (discountPercent > 90) {
        warnings.push('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞ (–±–æ–ª–µ–µ 90%) –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π');
      }
      
      if (discountPercent < 5) {
        warnings.push('–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å–∫–∏–¥–∫–∞ (–º–µ–Ω–µ–µ 5%) –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–º–µ—Ç–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π');
      }
    }
    
    if (!priceInfo.final || priceInfo.final < 1) {
      errors.push('–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getCategoryCharacteristics(subjectId: number, apiToken: string, locale: string = 'ru'): Promise<CategoryCharacteristic[]> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      if (this.characteristicsCache.has(subjectId)) {
        console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${subjectId}`);
        return this.characteristicsCache.get(subjectId)!;
      }

      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${subjectId}...`);
      
      const response = await this.makeRequest(
        `${WB_API_CONFIG.ENDPOINTS.GET_CATEGORY_CHARACTERISTICS}/${subjectId}?locale=${locale}`,
        apiToken
      );
      
      const characteristics = response.data || [];
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
      
      const formattedCharacteristics = characteristics.map((char: any) => ({
        id: char.id,
        name: char.name,
        required: char.required || false,
        type: char.type || 'string',
        maxLength: char.maxLength || null,
        values: char.values || [],
        dictionary: char.dictionary || null
      }));

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.characteristicsCache.set(subjectId, formattedCharacteristics);
      
      return formattedCharacteristics;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${subjectId}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getCategories(apiToken: string): Promise<any[]> {
    try {
      if (this.categoriesCache.has(0)) {
        console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
        return this.categoriesCache.get(0)!;
      }

      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
      
      const response = await this.makeRequest(
        WB_API_CONFIG.ENDPOINTS.GET_PARENT_CATEGORIES,
        apiToken
      );
      
      const categories = response.data || [];
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.categoriesCache.set(0, categories);
      
      return categories;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  async checkTaskStatus(taskId: string, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${taskId}`);
      
      const response = await this.makeRequest(
        `${WB_API_CONFIG.ENDPOINTS.GET_ERRORS}?taskId=${taskId}`,
        apiToken
      );
      
      return {
        success: true,
        data: response.data || response
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
   */
  async checkApiHealth(apiToken: string): Promise<ApiHealthResult> {
    const startTime = Date.now();
    
    try {
      await this.getCategoryCharacteristics(5581, apiToken);
      
      const responseTime = Date.now() - startTime;
      
      return {
        healthy: true,
        message: `WB API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (${responseTime}–º—Å)`,
        details: {
          responseTime,
          endpoint: 'category-characteristics',
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      return {
        healthy: false,
        message: `WB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        details: {
          responseTime,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          timestamp: new Date().toISOString()
        }
      };
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
   */
  async getSellerProducts(apiToken: string, filters?: {
    limit?: number;
    offset?: number;
    search?: string;
    orderBy?: string;
    orderDirection?: 'asc' | 'desc';
  }): Promise<WBApiResponse> {
    try {
      const params = new URLSearchParams();
      
      if (filters?.limit) params.append('limit', filters.limit.toString());
      if (filters?.offset) params.append('offset', filters.offset.toString());
      if (filters?.search) params.append('search', filters.search);
      if (filters?.orderBy) params.append('orderBy', filters.orderBy);
      if (filters?.orderDirection) params.append('orderDirection', filters.orderDirection);

      console.log(`üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞...`);
      
      const response = await this.makeRequest(
        `${WB_API_CONFIG.ENDPOINTS.GET_CARDS_LIST}?${params.toString()}`,
        apiToken
      );
      
      return {
        success: true,
        data: response.data || response
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞
   */
  async updateProductPrices(vendorCode: string, priceData: {
    price: number;
    discountedPrice?: number;
  }, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${vendorCode}:`, priceData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
      const priceValidation = this.validatePriceInfo({
        original: priceData.price,
        discount: priceData.discountedPrice,
        final: priceData.discountedPrice || priceData.price,
        hasDiscount: !!priceData.discountedPrice
      });

      if (!priceValidation.isValid) {
        throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω: ${priceValidation.errors.join(', ')}`);
      }

      const updateData: any = {
        vendorCode,
        price: priceData.price
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
      if (priceData.discountedPrice && priceData.discountedPrice < priceData.price) {
        updateData.discountedPrice = priceData.discountedPrice;
        console.log(`   üí∏ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É: ${priceData.price}‚ÇΩ ‚Üí ${priceData.discountedPrice}‚ÇΩ`);
      }

      const response = await this.makeRequest(
        '/content/v1/cards/update/prices', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π endpoint
        apiToken,
        {
          method: 'POST',
          body: JSON.stringify([updateData])
        }
      );
      
      return {
        success: true,
        data: response
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
   */
  async getProductByVendorCode(vendorCode: string, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ${vendorCode}`);
      
      const response = await this.makeRequest(
        `${WB_API_CONFIG.ENDPOINTS.GET_CARDS_LIST}?vendorCode=${vendorCode}`,
        apiToken
      );
      
      return {
        success: true,
        data: response.data || response
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É ${vendorCode}:`, error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
   */
  public analyzePriceCompetitiveness(priceInfo: PriceInfo, categoryAveragePrice?: number): {
    competitiveness: 'low' | 'medium' | 'high';
    recommendation: string;
    metrics: {
      pricePosition: string;
      discountAttractiveness?: string;
      marketPosition: string;
    };
  } {
    const finalPrice = priceInfo.discount || priceInfo.final;
    
    let competitiveness: 'low' | 'medium' | 'high' = 'medium';
    let recommendation = '';
    let pricePosition = '';
    let marketPosition = '';
    let discountAttractiveness = undefined;

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—ã
    if (categoryAveragePrice) {
      const priceRatio = finalPrice / categoryAveragePrice;
      
      if (priceRatio < 0.8) {
        pricePosition = '–¶–µ–Ω–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ ' + Math.round((1 - priceRatio) * 100) + '%';
        marketPosition = 'budget';
        competitiveness = 'high';
      } else if (priceRatio > 1.2) {
        pricePosition = '–¶–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–æ–π –Ω–∞ ' + Math.round((priceRatio - 1) * 100) + '%';
        marketPosition = 'premium';
        competitiveness = 'low';
      } else {
        pricePosition = '–¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–æ–π';
        marketPosition = 'standard';
        competitiveness = 'medium';
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–∏–¥–∫–∏
    if (priceInfo.hasDiscount && priceInfo.discountPercent) {
      if (priceInfo.discountPercent >= 30) {
        discountAttractiveness = '–û—á–µ–Ω—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞';
        competitiveness = 'high';
      } else if (priceInfo.discountPercent >= 15) {
        discountAttractiveness = '–•–æ—Ä–æ—à–∞—è —Å–∫–∏–¥–∫–∞';
        if (competitiveness === 'medium') competitiveness = 'high';
      } else if (priceInfo.discountPercent >= 5) {
        discountAttractiveness = '–ù–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞';
      } else {
        discountAttractiveness = '–°–∫–∏–¥–∫–∞ –º–∞–ª–æ–∑–∞–º–µ—Ç–Ω–∞';
      }
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (competitiveness === 'high') {
      recommendation = '–û—Ç–ª–∏—á–Ω–∞—è —Ü–µ–Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è. –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω —Ö–æ—Ä–æ—à–æ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ.';
    } else if (competitiveness === 'low') {
      recommendation = '–¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏.';
    } else {
      recommendation = '–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.';
    }

    return {
      competitiveness,
      recommendation,
      metrics: {
        pricePosition,
        discountAttractiveness,
        marketPosition
      }
    };
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
   */
  async batchUpdatePrices(updates: Array<{
    vendorCode: string;
    price: number;
    discountedPrice?: number;
  }>, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üí∞ –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è ${updates.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ü–µ–Ω
      for (const [index, update] of updates.entries()) {
        const validation = this.validatePriceInfo({
          original: update.price,
          discount: update.discountedPrice,
          final: update.discountedPrice || update.price,
          hasDiscount: !!update.discountedPrice
        });

        if (!validation.isValid) {
          throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${index + 1} (${update.vendorCode}): ${validation.errors.join(', ')}`);
        }
      }

      const updateData = updates.map(update => {
        const data: any = {
          vendorCode: update.vendorCode,
          price: update.price
        };
        
        if (update.discountedPrice && update.discountedPrice < update.price) {
          data.discountedPrice = update.discountedPrice;
        }
        
        return data;
      });

      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
      const withDiscount = updates.filter(u => u.discountedPrice && u.discountedPrice < u.price).length;
      console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–∫–∏–¥–∫–∏: ${withDiscount}`);
      console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Ç–æ–ª—å–∫–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω—ã: ${updates.length - withDiscount}`);

      const response = await this.makeRequest(
        '/content/v1/cards/update/prices',
        apiToken,
        {
          method: 'POST',
          body: JSON.stringify(updateData)
        }
      );
      
      return {
        success: true,
        data: response
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 900x1200)
   */
  async uploadMedia(imageBuffer: Buffer, fileName: string, apiToken: string, options?: ImageProcessingOptions): Promise<MediaUploadResult> {
    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª: ${fileName}`);
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const formData = new FormData();
      const blob = new Blob([imageBuffer], { type: 'image/jpeg' });
      formData.append('uploadfile', blob, fileName);

      const response = await fetch(`${this.BASE_URL}/content/v2/media/save`, {
        method: 'POST',
        headers: {
          'Authorization': apiToken,
        },
        body: formData
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ (${response.status}): ${errorText}`);
      }

      const result = await response.json();
      
      console.log('‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      return {
        success: true,
        mediaId: result.data?.mediaId,
        url: result.data?.url,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π
   */
  public clearAllCaches(): void {
    this.characteristicTypesCache.clear();
    this.categoriesCache.clear();
    this.characteristicsCache.clear();
    console.log('üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π
   */
  public getCacheSize(): number {
    return this.characteristicTypesCache.size + 
           this.categoriesCache.size + 
           this.characteristicsCache.size;
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ API —Å–µ—Ä–≤–∏—Å—É
   */
  public getServiceStatistics(): {
    cacheSize: number;
    lastUpdate: string;
    systemFeatures: string[];
    version: string;
    endpoints: string[];
  } {
    return {
      cacheSize: this.getCacheSize(),
      lastUpdate: new Date().toISOString(),
      systemFeatures: [
        'dual_pricing_support',
        'wb_image_resize_900x1200',
        'enhanced_characteristics',
        'batch_price_updates',
        'price_competitiveness_analysis',
        'cache_management',
        'detailed_error_handling',
        'request_validation'
      ],
      version: '2.0.0',
      endpoints: Object.values(WB_API_CONFIG.ENDPOINTS)
    };
  }
}

export const wbApiService = new WbApiService();