// lib/services/wbMediaService.ts - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±–µ–∑ Sharp

import { WB_API_CONFIG } from '../config/wbApiConfig';

export interface WBMediaResponse {
  success: boolean;
  data?: any;
  error?: string;
}

export class WBMediaService {
  private readonly baseUrl: string;
  private readonly timeout: number;

  constructor() {
    this.baseUrl = WB_API_CONFIG.BASE_URLS.CONTENT;
    this.timeout = WB_API_CONFIG.TIMEOUTS.DEFAULT;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ WB (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async uploadMediaToWB(imageBuffer: Buffer, vendorCode: string, apiToken: string): Promise<WBMediaResponse> {
    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: ${vendorCode}`);

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const formData = new FormData();
      const blob = new Blob([imageBuffer], { type: 'image/jpeg' });
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è WB API
      formData.append('file', blob, `${vendorCode}.jpg`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ WB API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
      const response = await fetch(`${this.baseUrl}${WB_API_CONFIG.ENDPOINTS.UPLOAD_MEDIA}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          'Accept': 'application/json'
        },
        body: formData
      });

      if (!response.ok) {
        let errorText;
        try {
          errorText = await response.text();
        } catch (e) {
          errorText = `Failed to read error response: ${e}`;
        }
        
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (${response.status}):`, {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          headers: Object.fromEntries(response.headers.entries()),
          body: errorText
        });
        
        return {
          success: false,
          error: `WB Media API Error ${response.status}: ${errorText}`
        };
      }

      let result;
      try {
        result = await response.json();
        console.log('‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WB:', result);
      } catch (e) {
        console.log('‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
        result = { uploaded: true };
      }

      return {
        success: true,
        data: result
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞'
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è WB
   */
  validateImageForWB(file: File): { valid: boolean; error?: string } {
    if (!file.type.startsWith('image/')) {
      return { valid: false, error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º' };
    }

    if (file.size > 10 * 1024 * 1024) {
      return { valid: false, error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB' };
    }

    const allowedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    if (!allowedFormats.includes(file.type)) {
      return { valid: false, error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, WebP' };
    }

    return { valid: true };
  }
}

export const wbMediaService = new WBMediaService();