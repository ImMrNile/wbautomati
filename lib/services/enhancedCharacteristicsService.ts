// lib/services/enhancedCharacteristicsService.ts
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –∑–∞—â–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ

import { prisma } from '../prisma';
import { optimizedGPT5MiniSystem } from './optimizedGPT5MiniSystem';

/** ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã ---------- */

/** –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ/—Ä—É—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚Äî –ò–ò –∏—Ö –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç */
const USER_INPUT_CHARACTERISTICS = new Set<number>([
  89008, 90630, 90607, 90608, 90652, 90653, 11001, 11002, 72739, 90654, 90655
]);

/** –¶–≤–µ—Ç ‚Äî WB –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∞–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º */
const COLOR_CHAR_IDS = new Set<number>([14177449]); // "–¶–≤–µ—Ç"

/** –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
const PROTECTED_USER_CHARACTERISTICS = new Set<number>([
  14177441, // –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
  // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ ID —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
]);

/** –õ–∏–º–∏—Ç—ã title –ø–æ WB subjectId */
const TITLE_LIMITS: Record<number, number> = {
  593: 60, // –¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ / –ù–∞—É—à–Ω–∏–∫–∏
  // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ subjectId: –ª–∏–º–∏—Ç
};

/** –£–õ–£–ß–®–ï–ù–ù–´–ô —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä —Ç–µ–∫—Å—Ç–∞ */
function sanitizeText(input: unknown): string {
  let s = String(input ?? '');
  // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±—ã/–ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –ø—Ä–æ–±–µ–ª
  s = s.replace(/[\u00A0\t\r\n]+/g, ' ');
  // —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã
  s = s.replace(/\s{2,}/g, ' ');
  // –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  s = s.replace(/\s*([,.:;!?])\s*/g, '$1 ');
  // –∑–∞–º–µ–Ω–∏—Ç—å —ë‚Üí–µ
  s = s.replace(/—ë/g, '–µ').replace(/–Å/g, '–ï');
  // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π trim
  s = s.trim();
  return s;
}

/** –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞ */
function normalizeWeight(weight: any): number {
  const numericValue = parseFloat(String(weight).replace(/[^\d.,]/g, '').replace(',', '.'));
  
  if (isNaN(numericValue)) {
    console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: "${weight}", –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.5 –∫–≥`);
    return 0.5; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–≥
  }
  
  // –ï—Å–ª–∏ –≤–µ—Å –º–µ–Ω—å—à–µ 10, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
  if (numericValue <= 10) {
    console.log(`üìê –í–µ—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã: ${numericValue} –∫–≥`);
    return numericValue;
  } 
  // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≥—Ä–∞–º–º—ã - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–≥
  else {
    const weightInKg = numericValue / 1000;
    console.log(`üìê –í–µ—Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –≥—Ä–∞–º–º–æ–≤: ${numericValue} –≥ ‚Üí ${weightInKg} –∫–≥`);
    return weightInKg;
  }
}

/** ---------- –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–∞ ---------- */

export interface ProductAnalysisInput {
  productName: string;
  productImages: string[];
  categoryId: number;
  packageContents?: string;
  referenceUrl?: string;
  price: number;
  dimensions: any;
  hasVariantSizes?: boolean;
  variantSizes?: string[];
  aiPromptComment?: string;
  additionalCharacteristics?: any[];
  preserveUserData?: {
    preserveUserData: boolean;
    userProvidedPackageContents: string;
    userProvidedDimensions: any;
    specialInstructions: string;
  };
  useGPT5?: boolean;
}

interface CategoryCharacteristic {
  id: number;
  wbCharacteristicId?: number | null;
  name: string;
  type: 'string' | 'number' | string;
  isRequired: boolean;
  maxLength?: number | null;
  minValue?: number | null;
  maxValue?: number | null;
  description?: string | null;
  values?: Array<{
    id: number;
    wbValueId?: number | null;
    value: string;
    displayName?: string | null;
  }>;
}

interface ProcessedCharacteristic {
  id: number;
  name: string;
  value: any;
  confidence: number;
  reasoning: string;
  source: string;
  dbType: 'string' | 'number';
  isRequired: boolean;
}

interface ValidationResult {
  warnings: string[];
  errors: string[];
}

interface ProcessedResults {
  characteristics: ProcessedCharacteristic[];
  confidence: number;
  fillPercentage: number;
  warnings: string[];
  seoTitle: string;
  seoDescription: string;
}

export interface FinalAnalysisResult {
  characteristics: Array<{
    id: number;
    name: string;
    value: any;
    confidence: number;
    reasoning: string;
    detectedType: 'string' | 'number';
    source: string;
  }>;
  seoTitle: string;
  seoDescription: string;
  suggestedKeywords: string[];
  competitiveAdvantages: string[];
  tnvedCode?: string;

  confidence: number;
  fillPercentage: number;
  qualityMetrics: {
    overallScore: number;
    fillRate: number;
    sourceReliability: number;
    dataCompleteness: number;
    wbCompliance?: number;
  };

  analysisReport: {
    totalSearchQueries: number;
    totalSources: number;
    totalProcessingTime: number;
    totalCost: number;
    systemUsed: string;
    modelDetails: any;
    phase1Results: any;
    phase2Results: any;
    phase3Results?: any;
  };

  wbCompliance?: {
    categoryName: string;
    titleLimit: number;
    descriptionLimit: number;
    titleLength: number;
    descriptionLength: number;
    isCompliant: boolean;
    errors: string[];
    warnings: string[];
  };

  gabaritInfo?: {
    note: string;
    gabaritCharacteristics: any[];
    needsManualInput: boolean;
  };

  warnings: string[];
  recommendations: string[];
}

/** ---------- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–ª–∞—Å—Å —Å–µ—Ä–≤–∏—Å–∞ ---------- */

export class EnhancedCharacteristicsIntegrationService {
  
  /** –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î —Å –∑–∞—â–∏—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
  async analyzeProductWithEnhancedSystem(input: ProductAnalysisInput): Promise<FinalAnalysisResult> {
    const startedAt = Date.now();

    try {
      console.log(`\nüöÄ ENHANCED SYSTEM: –ê–Ω–∞–ª–∏–∑ "${input.productName}" / cat=${input.categoryId}`);
      
      // üõ°Ô∏è –ó–ê–©–ò–©–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï
      const protectedData = this.extractAndProtectUserData(input);
      console.log('üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:', {
        packageContents: protectedData.packageContents,
        weight: protectedData.normalizedWeight,
        dimensions: protectedData.dimensions
      });

      // 1) –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
      const categoryCharacteristics = await this.loadCategoryCharacteristicsFromDB(input.categoryId);
      if (categoryCharacteristics.length === 0) {
        throw new Error(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${input.categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î`);
      }

      // 2) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryInfo = await this.getCategoryInfoFromDB(input.categoryId);

      // 3) –°–û–ó–î–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –° –ó–ê–©–ò–©–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
      const agentContext = {
        productId: `temp-${Date.now()}`,
        productName: input.productName,
        categoryId: input.categoryId,
        categoryInfo: {
          id: categoryInfo.id,
          name: categoryInfo.name,
          parentName: categoryInfo.parentName,
          characteristics: categoryCharacteristics
        },
        images: input.productImages || [],
        referenceUrl: input.referenceUrl || '',
        price: input.price,
        
        // üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ï –†–ê–ó–ú–ï–†–´ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å)
        dimensions: protectedData.dimensions,
        
        // üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–Ø
        packageContents: protectedData.packageContents,
        
        userComments: input.aiPromptComment || '',
        additionalData: {
          hasVariantSizes: !!input.hasVariantSizes,
          variantSizes: input.variantSizes || [],
          additionalCharacteristics: input.additionalCharacteristics || [],
          
          // üõ°Ô∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ò–ò –û –ó–ê–©–ò–¢–ï –î–ê–ù–ù–´–•
          protectedFields: {
            packageContents: protectedData.packageContents,
            dimensions: protectedData.dimensions,
            instructions: `
              –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
              1. –ù–ï –∏–∑–º–µ–Ω—è–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é: "${protectedData.packageContents}"
              2. –ù–ï –∏–∑–º–µ–Ω—è–π —Ä–∞–∑–º–µ—Ä—ã: ${JSON.stringify(protectedData.dimensions)}
              3. –í–µ—Å —É–∂–µ —É–∫–∞–∑–∞–Ω –≤ –ö–ò–õ–û–ì–†–ê–ú–ú–ê–•: ${protectedData.normalizedWeight} –∫–≥
              4. –ó–∞–ø–æ–ª–Ω—è–π –¢–û–õ–¨–ö–û —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–±—Ä–µ–Ω–¥, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ç.–¥.)
            `
          }
        }
      };

      // 4) –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö
      const analysisResult = await optimizedGPT5MiniSystem.analyzeProduct(agentContext);
      if (!analysisResult?.finalResult) {
        throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }

      // 5) –û–ë–†–ê–ë–û–¢–ö–ê —Å –í–ê–õ–ò–î–ê–¶–ò–ï–ô –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const processed = this.processAIResultsWithProtection(
        analysisResult.finalResult, 
        categoryCharacteristics,
        protectedData
      );

      // 6) –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = this.validateCharacteristics(processed.characteristics, categoryCharacteristics);

      // 7) –ú–µ—Ç—Ä–∏–∫–∏
      const totalProcessingTime = Date.now() - startedAt;
      const overallScore = this.calculateQualityScore(processed, analysisResult);
      const sourceReliability = 90;

      // 8) SEO: —á–∏—Å—Ç–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
      const subjectId = categoryInfo.wbSubjectId;
      const titleLimit = subjectId && TITLE_LIMITS[subjectId] ? TITLE_LIMITS[subjectId] : 120;

      let safeTitle = sanitizeText(processed.seoTitle || analysisResult.finalResult.seoTitle || '');
      if (safeTitle.length > titleLimit) safeTitle = safeTitle.slice(0, titleLimit).trim();
      let safeDescription = sanitizeText(processed.seoDescription || analysisResult.finalResult.seoDescription || '');

      // 9) –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      this.validateUserDataIntegrity(processed, protectedData);

      // 10) –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
      const final: FinalAnalysisResult = {
        characteristics: processed.characteristics.map(ch => ({
          id: ch.id,
          name: ch.name,
          value: ch.value,
          confidence: ch.confidence,
          reasoning: ch.reasoning,
          detectedType: ch.dbType,
          source: ch.source
        })),
        seoTitle: safeTitle,
        seoDescription: safeDescription,

        suggestedKeywords: analysisResult.finalResult.keywords || [],
        competitiveAdvantages: analysisResult.finalResult.marketingInsights?.competitiveAdvantages || [],
        tnvedCode: analysisResult.finalResult.tnvedCode || undefined,

        confidence: processed.confidence,
        fillPercentage: processed.fillPercentage,
        qualityMetrics: {
          overallScore,
          fillRate: processed.fillPercentage,
          sourceReliability,
          dataCompleteness: processed.fillPercentage,
          wbCompliance: analysisResult.finalResult.qualityMetrics?.wbCompliance?.isCompliant ? 100 : 70
        },
        analysisReport: {
          totalSearchQueries: 0,
          totalSources: 5,
          totalProcessingTime,
          totalCost: analysisResult.totalCost,
          systemUsed: 'gpt5_mini_gpt41_protected',
          modelDetails: {
            phase1: analysisResult.phase1?.modelUsed,
            phase2: analysisResult.phase2?.modelUsed,
            phase3: analysisResult.phase3?.modelUsed
          },
          phase1Results: {
            processingTime: analysisResult.phase1?.processingTime,
            tokensUsed: analysisResult.phase1?.tokensUsed || 0,
            cost: analysisResult.phase1?.cost || 0
          },
          phase2Results: {
            processingTime: analysisResult.phase2?.processingTime,
            tokensUsed: analysisResult.phase2?.tokensUsed || 0,
            cost: analysisResult.phase2?.cost || 0
          },
          phase3Results: {
            processingTime: analysisResult.phase3?.processingTime,
            tokensUsed: analysisResult.phase3?.tokensUsed || 0,
            cost: analysisResult.phase3?.cost || 0
          }
        },
        wbCompliance: analysisResult.finalResult.qualityMetrics?.wbCompliance,
        gabaritInfo: {
          note: '–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
          gabaritCharacteristics: this.getGabaritCharacteristics(categoryCharacteristics),
          needsManualInput: true
        },
        warnings: [...processed.warnings, ...validation.warnings].map(sanitizeText).filter(Boolean),
        recommendations: this.generateEnhancedRecommendations(
          processed,
          validation,
          this.normalizeRecommendations(analysisResult.finalResult.recommendations),
          protectedData
        ).map(sanitizeText).filter(Boolean)
      };

      return final;

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Enhanced System:', err);
      throw new Error(`Enhanced System failed: ${(err as Error).message}`);
    }
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
  private extractAndProtectUserData(input: ProductAnalysisInput): {
    packageContents: string;
    dimensions: any;
    normalizedWeight: number;
  } {
    // –ó–∞—â–∏—â–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
    const packageContents = sanitizeText(input.packageContents || '');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–º–º–∞–º–∏)
    const originalWeight = input.dimensions?.weight;
    const normalizedWeight = normalizeWeight(originalWeight);
    
    // –ó–∞—â–∏—â–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º
    const dimensions = {
      length: Math.max(1, Number(input.dimensions?.length) || 30),
      width: Math.max(1, Number(input.dimensions?.width) || 20),
      height: Math.max(1, Number(input.dimensions?.height) || 10),
      weight: normalizedWeight // ‚úÖ –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
    };
    
    console.log(`üìê –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤:`);
    console.log(`   - –î–ª–∏–Ω–∞: ${dimensions.length} —Å–º`);
    console.log(`   - –®–∏—Ä–∏–Ω–∞: ${dimensions.width} —Å–º`);
    console.log(`   - –í—ã—Å–æ—Ç–∞: ${dimensions.height} —Å–º`);
    console.log(`   - –í–µ—Å: ${originalWeight} ‚Üí ${normalizedWeight} –∫–≥`);

    return {
      packageContents,
      dimensions,
      normalizedWeight
    };
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ò–ò —Å –∑–∞—â–∏—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
  private processAIResultsWithProtection(
    aiResults: any, 
    categoryCharacteristics: CategoryCharacteristic[],
    protectedData: any
  ): ProcessedResults {
    
    const byId = new Map<number, CategoryCharacteristic>();
    const byWB = new Map<number, CategoryCharacteristic>();
    const byName = new Map<string, CategoryCharacteristic>();

    for (const c of categoryCharacteristics) {
      byId.set(c.id, c);
      if (c.wbCharacteristicId) byWB.set(c.wbCharacteristicId, c);
      byName.set(c.name.toLowerCase(), c);
    }

    const processed: ProcessedCharacteristic[] = [];
    const warnings: string[] = [];
    let confSum = 0;

    const items = Array.isArray(aiResults?.characteristics) ? aiResults.characteristics : [];

    for (const it of items) {
      // —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –ø–æ WB id ‚Üí –ª–æ–∫ id ‚Üí –∏–º–µ–Ω–∏
      let dbChar =
        (typeof it.id === 'number' && byWB.get(it.id)) ||
        (typeof it.id === 'number' && byId.get(it.id)) ||
        (it.name && byName.get(String(it.name).toLowerCase())) ||
        undefined;

      if (!dbChar) {
        warnings.push(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${it?.name ?? it?.id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î ‚Äî –ø—Ä–æ–ø—É—Å–∫`);
        continue;
      }

      // üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ò—Å–∫–ª—é—á–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (PROTECTED_USER_CHARACTERISTICS.has(dbChar.id)) {
        warnings.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${dbChar.name}" –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ò–ò`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (dbChar.name.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç')) {
          processed.push({
            id: dbChar.id,
            name: dbChar.name,
            value: protectedData.packageContents, // ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            confidence: 1.0, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            reasoning: '–ó–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∑–∞—â–∏—â–µ–Ω–æ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ò–ò)',
            source: 'user_input',
            dbType: (dbChar.type === 'number' ? 'number' : 'string') as 'number' | 'string',
            isRequired: !!dbChar.isRequired
          });
          confSum += 1.0;
        }
        continue;
      }

      // –∏—Å–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
      if (COLOR_CHAR_IDS.has(dbChar.id)) {
        warnings.push(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "–¶–≤–µ—Ç" (${dbChar.name}) –∏—Å–∫–ª—é—á–µ–Ω–∞: –Ω–∞ WB –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
        continue;
      }

      // –∏—Å–∫–ª—é—á–∏—Ç—å –≥–∞–±–∞—Ä–∏—Ç–Ω—ã–µ/—Ä—É—á–Ω—ã–µ –ø–æ–ª—è
      if (USER_INPUT_CHARACTERISTICS.has(dbChar.id)) {
        warnings.push(`–†—É—á–Ω–∞—è (–≥–∞–±–∞—Ä–∏—Ç–Ω–∞—è) —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${dbChar.name}" ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
        continue;
      }

      // –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
      let typedValue = it.value;
      if (dbChar.type === 'number' && typeof typedValue !== 'number') {
        const num = parseFloat(String(typedValue).replace(/[^\d.-]/g, ''));
        if (Number.isFinite(num)) typedValue = num;
      } else if (dbChar.type === 'string' && typeof typedValue !== 'string') {
        typedValue = String(typedValue);
      }

      // —á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      if (dbChar.type === 'string' && typeof typedValue === 'string') {
        typedValue = sanitizeText(typedValue);
      }

      // –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –ë–î
      const v = this.validateCharacteristicValue(typedValue, dbChar);
      if (!v.isValid) {
        warnings.push(`"${dbChar.name}": ${v.error}`);
        continue;
      }

      const confidence = typeof it.confidence === 'number' ? it.confidence : 0.8;

      processed.push({
        id: dbChar.id,
        name: dbChar.name,
        value: typedValue,
        confidence,
        reasoning: it.reasoning || '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º',
        source: it.source || '–ò–ò —Å–∏—Å—Ç–µ–º–∞',
        dbType: (dbChar.type === 'number' ? 'number' : 'string') as 'number' | 'string',
        isRequired: !!dbChar.isRequired
      });

      confSum += confidence;
    }

    const avgConf = processed.length ? confSum / processed.length : 0;

    const availableForAI = categoryCharacteristics.filter(c => 
      !USER_INPUT_CHARACTERISTICS.has(c.id) && 
      !PROTECTED_USER_CHARACTERISTICS.has(c.id)
    ).length || 1;
    
    const fillPercentage = Math.round((processed.length / availableForAI) * 100);

    const seoTitle = sanitizeText(aiResults?.seoTitle || '');
    const seoDescription = sanitizeText(aiResults?.seoDescription || '');

    return {
      characteristics: processed,
      confidence: avgConf,
      fillPercentage,
      warnings,
      seoTitle,
      seoDescription
    };
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
  private validateUserDataIntegrity(processed: ProcessedResults, protectedData: any): void {
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
    const packageContentChar = processed.characteristics.find(char => 
      PROTECTED_USER_CHARACTERISTICS.has(char.id) || 
      char.name.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç')
    );
    
    if (packageContentChar) {
      if (packageContentChar.value !== protectedData.packageContents) {
        console.warn('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ò–ò –∏–∑–º–µ–Ω–∏–ª –∑–∞—â–∏—â–µ–Ω–Ω—É—é –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é!');
        console.warn(`   –ó–∞—â–∏—â–µ–Ω–æ: "${protectedData.packageContents}"`);
        console.warn(`   –ò–ò: "${packageContentChar.value}"`);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        packageContentChar.value = protectedData.packageContents;
        packageContentChar.source = 'user_input_restored';
        packageContentChar.reasoning = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö';
        packageContentChar.confidence = 1.0;
      }
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /** –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  private async loadCategoryCharacteristicsFromDB(categoryId: number): Promise<CategoryCharacteristic[]> {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      return await this._loadCategoryCharacteristics(categoryId, prisma);
    } catch (error: any) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—Ä–æ–±—É–µ–º fallback
      if (error.code === 'P1001' || error.code === 'P1017') {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        return await this._loadCategoryCharacteristics(categoryId, prisma);
      }
      throw error;
    }
  }

  /** –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */
  private async _loadCategoryCharacteristics(categoryId: number, client: any): Promise<CategoryCharacteristic[]> {
    const subcategory = await client.wbSubcategory.findFirst({
      where: {
        OR: [{ id: categoryId }, { wbSubjectId: categoryId }]
      },
      include: {
        characteristics: {
          include: {
            values: {
              where: { isActive: true },
              orderBy: { sortOrder: 'asc' }
            }
          },
          orderBy: [{ isRequired: 'desc' }, { sortOrder: 'asc' }, { name: 'asc' }]
        },
        parentCategory: true
      }
    });

    if (!subcategory) return [];

    return subcategory.characteristics.map((ch: any) => ({
      id: ch.wbCharacteristicId || ch.id,
      wbCharacteristicId: ch.wbCharacteristicId || undefined,
      name: ch.name,
      type: (ch.type === 'number' ? 'number' : 'string') as 'number' | 'string' | string,
      isRequired: !!ch.isRequired,
      maxLength: ch.maxLength ?? null,
      minValue: ch.minValue ?? null,
      maxValue: ch.maxValue ?? null,
      description: ch.description ?? null,
      values: (ch.values || []).map((v: any) => ({
        id: v.wbValueId || v.id,
        wbValueId: v.wbValueId || undefined,
        value: v.value,
        displayName: v.displayName || v.value
      }))
    }));
  }

  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  private async getCategoryInfoFromDB(categoryId: number): Promise<{ id: number; name: string; parentName: string; wbSubjectId?: number }> {
    try {
      return await this._getCategoryInfo(categoryId, prisma);
    } catch (error: any) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ø—Ä–æ–±—É–µ–º fallback
      if (error.code === 'P1001' || error.code === 'P1017') {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ fallback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        return await this._getCategoryInfo(categoryId, prisma);
      }
      throw error;
    }
  }

  /** –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  private async _getCategoryInfo(categoryId: number, client: any): Promise<{ id: number; name: string; parentName: string; wbSubjectId?: number }> {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let subcategory = await client.wbSubcategory.findFirst({
      where: { id: categoryId },
      include: { parentCategory: true }
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID, –∏—â–µ–º –ø–æ wbSubjectId (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (!subcategory) {
      subcategory = await client.wbSubcategory.findFirst({
        where: { wbSubjectId: categoryId },
        include: { parentCategory: true }
      });
    }

    if (subcategory) {
      console.log(`üîç [Enhanced System] –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ID=${subcategory.id}, name="${subcategory.name}", wbSubjectId=${subcategory.wbSubjectId}`);
      return {
        id: subcategory.id,
        name: subcategory.name,
        parentName: subcategory.parentCategory?.name || '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        wbSubjectId: subcategory.wbSubjectId ?? undefined
      };
    }
    
    console.warn(`‚ö†Ô∏è [Enhanced System] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î`);
    return { id: categoryId, name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', parentName: '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', wbSubjectId: undefined };
  }

  /** –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */
  private validateCharacteristicValue(value: any, dbChar: CategoryCharacteristic): { isValid: boolean; error?: string } {
    const t = dbChar.type === 'number' ? 'number' : 'string';

    if (t === 'number' && typeof value !== 'number') {
      return { isValid: false, error: '–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' };
    }
    if (t === 'string' && typeof value !== 'string') {
      return { isValid: false, error: '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' };
    }

    if (t === 'number') {
      if (dbChar.minValue != null && value < dbChar.minValue) {
        return { isValid: false, error: `–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (${dbChar.minValue})` };
      }
      if (dbChar.maxValue != null && value > dbChar.maxValue) {
        return { isValid: false, error: `–ó–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (${dbChar.maxValue})` };
      }
    }

    if (t === 'string' && dbChar.maxLength != null && String(value).length > dbChar.maxLength) {
      return { isValid: false, error: `–î–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é (${dbChar.maxLength})` };
    }

    if (dbChar.values?.length) {
      const allowed = new Set(dbChar.values.map(v => v.value));
      if (!allowed.has(String(value))) {
        return { isValid: false, error: '–ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞' };
      }
    }

    return { isValid: true };
  }

  /** –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */
  private validateCharacteristics(
    characteristics: ProcessedCharacteristic[],
    categoryCharacteristics: CategoryCharacteristic[]
  ): ValidationResult {
    const warnings: string[] = [];
    const errors: string[] = [];

    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–µ–∑ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
    const required = categoryCharacteristics.filter(
      c => c.isRequired && 
           !USER_INPUT_CHARACTERISTICS.has(c.id) && 
           !PROTECTED_USER_CHARACTERISTICS.has(c.id)
    );

    const filledIds = new Set<number>(characteristics.map(c => c.id));

    for (const req of required) {
      if (!filledIds.has(req.id)) {
        warnings.push(`–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${req.name}`);
      }
    }

    // –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const LOW_CONF = 0.7;
    const lowCount = characteristics.reduce((acc, c) => acc + (c.confidence < LOW_CONF ? 1 : 0), 0);
    if (lowCount > 0) {
      warnings.push(`${lowCount} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (< ${Math.round(LOW_CONF * 100)}%)`);
    }

    return { warnings, errors };
  }

  /** –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ */
  private calculateQualityScore(processed: ProcessedResults, analysisResult: any): number {
    let score = 0;
    score += (processed.fillPercentage / 100) * 40;
    score += (processed.confidence) * 30;
    const analysisQuality = analysisResult?.confidence ?? 0.8;
    score += analysisQuality * 30;
    return Math.min(100, Math.round(score));
  }

  /** –ì–∞–±–∞—Ä–∏—Ç—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ UI */
  private getGabaritCharacteristics(categoryCharacteristics: CategoryCharacteristic[]): any[] {
    return categoryCharacteristics
      .filter(c => USER_INPUT_CHARACTERISTICS.has(c.id))
      .map(c => ({
        id: c.id,
        name: c.name,
        type: c.type === 'number' ? 'number' : 'string',
        isRequired: !!c.isRequired,
        needsManualMeasurement: true
      }));
  }

  /** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */
  private normalizeRecommendations(input: unknown): string[] {
    if (Array.isArray(input)) return (input as unknown[]).filter(x => typeof x === 'string') as string[];
    if (typeof input === 'string') return [input];
    if (input && typeof input === 'object') {
      const out: string[] = [];
      for (const [k, v] of Object.entries(input as Record<string, unknown>)) {
        if (typeof v === 'string') out.push(`${k}: ${v}`);
        else if (Array.isArray(v)) for (const i of v) if (typeof i === 'string') out.push(`${k}: ${i}`);
      }
      return out;
    }
    return [];
  }

  /** üõ°Ô∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö */
  private generateEnhancedRecommendations(
    processed: ProcessedResults,
    validation: ValidationResult,
    systemRecommendations: string[] | string | Record<string, unknown> | undefined,
    protectedData: any
  ): string[] {
    const base = this.normalizeRecommendations(systemRecommendations);
    const recs = [...base];

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (processed.fillPercentage < 60) {
      recs.push('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ‚Äî —É–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤.');
    }
    if (processed.confidence < 0.7) {
      recs.push('–ù–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ä—É—á–Ω—É—é.');
    }
    if (validation.warnings.length > 5) {
      recs.push('–ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö.');
    }

    // üõ°Ô∏è –ù–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ø–æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö
    recs.push('‚úÖ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–≤–æ–¥—É.');
    recs.push(`‚úÖ –í–µ—Å —Ç–æ–≤–∞—Ä–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: ${protectedData.normalizedWeight} –∫–≥.`);
    recs.push('‚úÖ –†–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ò–ò —Å–∏—Å—Ç–µ–º–æ–π.');
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    recs.push('ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ GPT-5-mini + GPT-4.1.');
    recs.push('üìê –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø–æ —Ñ–∞–∫—Ç—É –∏–∑–º–µ—Ä–µ–Ω–∏–π.');
    recs.push('üõ°Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ò–ò.');
    recs.push('üîç –ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.');

    return recs;
  }

  /** –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç WB API */
  async formatForWildberries(result: FinalAnalysisResult): Promise<Array<{ id: number; value: any }>> {
    const filtered = result.characteristics.filter(c => !COLOR_CHAR_IDS.has(c.id));

    return filtered.map((c) => {
      if (c.detectedType === 'number') {
        return { id: c.id, value: Number(c.value) };
      }
      if (Array.isArray(c.value)) {
        return { id: c.id, value: c.value.map((v: any) => sanitizeText(v)) };
      }
      return { id: c.id, value: sanitizeText(c.value) };
    });
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º */
  validateProtectedFields(input: ProductAnalysisInput): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
    normalizedData: any;
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
    if (!input.packageContents || input.packageContents.trim() === '') {
      errors.push('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    } else if (input.packageContents.length > 1000) {
      warnings.push('–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    const dimensions = input.dimensions || {};
    if (!dimensions.weight) {
      warnings.push('–ù–µ —É–∫–∞–∑–∞–Ω –≤–µ—Å —Ç–æ–≤–∞—Ä–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0.5 –∫–≥)');
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const normalizedData = this.extractAndProtectUserData(input);

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      normalizedData
    };
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö */
  getDataProtectionStats(): {
    protectedCharacteristics: number[];
    protectedFieldsCount: number;
    userInputCharacteristics: number[];
    colorCharacteristics: number[];
    totalProtected: number;
  } {
    return {
      protectedCharacteristics: Array.from(PROTECTED_USER_CHARACTERISTICS),
      protectedFieldsCount: PROTECTED_USER_CHARACTERISTICS.size,
      userInputCharacteristics: Array.from(USER_INPUT_CHARACTERISTICS),
      colorCharacteristics: Array.from(COLOR_CHAR_IDS),
      totalProtected: PROTECTED_USER_CHARACTERISTICS.size + USER_INPUT_CHARACTERISTICS.size + COLOR_CHAR_IDS.size
    };
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö */
  createDataProtectionReport(input: ProductAnalysisInput, result: FinalAnalysisResult): {
    originalData: {
      packageContents: string;
      weight: any;
      dimensions: any;
    };
    processedData: {
      packageContents: string;
      normalizedWeight: number;
      protectedDimensions: any;
    };
    protectionStatus: {
      packageContentsProtected: boolean;
      weightNormalized: boolean;
      dimensionsProtected: boolean;
      allDataIntact: boolean;
    };
    protectionLog: string[];
  } {
    const protectedData = this.extractAndProtectUserData(input);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π
    const packageContentChar = result.characteristics.find(char => 
      char.name.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç') || 
      PROTECTED_USER_CHARACTERISTICS.has(char.id)
    );
    
    const packageContentsProtected = !packageContentChar || 
      packageContentChar.value === protectedData.packageContents;

    const protectionLog = [
      `üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`,
      `üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: ${packageContentsProtected ? '–ó–ê–©–ò–©–ï–ù–ê' : '–ò–ó–ú–ï–ù–ï–ù–ê'}`,
      `‚öñÔ∏è –í–µ—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: ${input.dimensions?.weight} ‚Üí ${protectedData.normalizedWeight} –∫–≥`,
      `üìê –†–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${JSON.stringify(protectedData.dimensions)}`,
      `üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${PROTECTED_USER_CHARACTERISTICS.size}`,
      `üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${USER_INPUT_CHARACTERISTICS.size + COLOR_CHAR_IDS.size}`
    ];

    return {
      originalData: {
        packageContents: input.packageContents || '',
        weight: input.dimensions?.weight,
        dimensions: input.dimensions
      },
      processedData: {
        packageContents: protectedData.packageContents,
        normalizedWeight: protectedData.normalizedWeight,
        protectedDimensions: protectedData.dimensions
      },
      protectionStatus: {
        packageContentsProtected,
        weightNormalized: protectedData.normalizedWeight !== input.dimensions?.weight,
        dimensionsProtected: true,
        allDataIntact: packageContentsProtected
      },
      protectionLog
    };
  }

  /** üõ°Ô∏è –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
  emergencyRestoreUserData(
    characteristics: Array<{ id: number; name: string; value: any; source: string }>, 
    originalInput: ProductAnalysisInput
  ): Array<{ id: number; name: string; value: any; source: string; restored?: boolean }> {
    
    const protectedData = this.extractAndProtectUserData(originalInput);
    const restored = characteristics.map(char => ({ ...char }));
    
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const char of restored) {
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
      if (PROTECTED_USER_CHARACTERISTICS.has(char.id) || 
          char.name.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç')) {
        
        if (char.value !== protectedData.packageContents) {
          console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "${char.name}": "${char.value}" ‚Üí "${protectedData.packageContents}"`);
          char.value = protectedData.packageContents;
          char.source = 'emergency_restore';
          (char as any).restored = true;
        }
      }
    }
    
    console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return restored;
  }
}

/** –≠–∫—Å–ø–æ—Ä—Ç –∏–Ω—Å—Ç–∞–Ω—Å–∞ */
export const enhancedCharacteristicsIntegrationService = new EnhancedCharacteristicsIntegrationService();