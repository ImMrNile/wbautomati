// lib/services/enhancedTypingProcessor.ts - –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –¢–ò–ü–ò–ó–ê–¶–ò–ò

interface CharacteristicWithType {
  id: number;
  name: string;
  type: 'string' | 'number';
  value: any;
  confidence: number;
  source: string;
  reasoning: string;
}

interface TypingRule {
  pattern: RegExp;
  stringFormat: (value: number) => string;
  examples: string[];
}

export class UnifiedCharacteristicsService {

  /**
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
   */
  processCharacteristicsWithEnhancedTyping(
    aiCharacteristics: any[],
    categoryCharacteristics: any[]
  ): CharacteristicWithType[] {
    console.log('üîß ENHANCED TYPING: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π');
    
    const processed: CharacteristicWithType[] = [];
    const typingRules = this.getTypingRules();
    
    for (const aiChar of aiCharacteristics) {
      const dbChar = categoryCharacteristics.find(c => c.id === aiChar.id);
      if (!dbChar) continue;
      
      console.log(`\nüîç PROCESSING: ${dbChar.name} (ID: ${aiChar.id})`);
      console.log(`   üìä DB Type: ${dbChar.type}`);
      console.log(`   üéØ AI Value: "${aiChar.value}"`);
      
      const processedChar = this.applyEnhancedTyping(aiChar, dbChar, typingRules);
      if (processedChar) {
        processed.push(processedChar);
        console.log(`   ‚úÖ RESULT: ${JSON.stringify(processedChar.value)} (${dbChar.type})`);
      }
    }
    
    return processed;
  }

  /**
   * –ü–†–ê–í–ò–õ–ê –¢–ò–ü–ò–ó–ê–¶–ò–ò –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  private getTypingRules(): Map<string, TypingRule> {
    const rules = new Map<string, TypingRule>();
    
    // –í–†–ï–ú–Ø –ó–ê–†–Ø–î–ö–ò
    rules.set('–≤—Ä–µ–º—è_–∑–∞—Ä—è–¥–∫–∏', {
      pattern: /–≤—Ä–µ–º—è.*–∑–∞—Ä—è–¥–∫/i,
      stringFormat: (value: number) => {
        if (value === 1) return '1 —á–∞—Å';
        if (value === 2) return '2 —á–∞—Å–∞';
        if (value <= 4) return `${value} —á–∞—Å–∞`;
        if (value <= 10) return `${value} —á–∞—Å–æ–≤`;
        if (value <= 120) return `${value} –º–∏–Ω—É—Ç`;
        return `${Math.round(value / 60)} —á–∞—Å–æ–≤`;
      },
      examples: ['1 —á–∞—Å', '2 —á–∞—Å–∞', '3 —á–∞—Å–∞', '120 –º–∏–Ω—É—Ç']
    });
    
    // –í–†–ï–ú–Ø –†–ê–ë–û–¢–´
    rules.set('–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã', {
      pattern: /–≤—Ä–µ–º—è.*—Ä–∞–±–æ—Ç|–∞–≤—Ç–æ–Ω–æ–º–Ω/i,
      stringFormat: (value: number) => {
        if (value === 1) return '1 —á–∞—Å';
        if (value <= 4) return `${value} —á–∞—Å–∞`;
        if (value <= 100) return `${value} —á–∞—Å–æ–≤`;
        return `${Math.round(value / 60)} —á–∞—Å–æ–≤`;
      },
      examples: ['8 —á–∞—Å–æ–≤', '60 —á–∞—Å–æ–≤', '24 —á–∞—Å–∞']
    });
    
    // –ï–ú–ö–û–°–¢–¨ –ê–ö–ö–£–ú–£–õ–Ø–¢–û–†–ê
    rules.set('–µ–º–∫–æ—Å—Ç—å', {
      pattern: /–µ–º–∫–æ—Å—Ç—å/i,
      stringFormat: (value: number) => {
        if (value >= 100) return `${value} –º–ê—á`;
        return `${value * 1000} –º–ê—á`;
      },
      examples: ['400 –º–ê—á', '3000 –º–ê—á', '5000 –º–ê—á']
    });
    
    // –ò–ú–ü–ï–î–ê–ù–°
    rules.set('–∏–º–ø–µ–¥–∞–Ω—Å', {
      pattern: /–∏–º–ø–µ–¥–∞–Ω—Å/i,
      stringFormat: (value: number) => `${value} –û–º`,
      examples: ['16 –û–º', '32 –û–º', '64 –û–º']
    });
    
    // –ß–ê–°–¢–û–¢–ê
    rules.set('—á–∞—Å—Ç–æ—Ç–∞', {
      pattern: /—á–∞—Å—Ç–æ—Ç–∞/i,
      stringFormat: (value: number) => {
        if (value >= 1000) return `${value / 1000} –∫–ì—Ü`;
        return `${value} –ì—Ü`;
      },
      examples: ['20 –ì—Ü', '1 –∫–ì—Ü', '20 –∫–ì—Ü']
    });
    
    // –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨
    rules.set('—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', {
      pattern: /—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç/i,
      stringFormat: (value: number) => `${value} –¥–ë`,
      examples: ['100 –¥–ë', '104 –¥–ë', '110 –¥–ë']
    });
    
    // –ú–û–©–ù–û–°–¢–¨
    rules.set('–º–æ—â–Ω–æ—Å—Ç—å', {
      pattern: /–º–æ—â–Ω–æ—Å—Ç—å/i,
      stringFormat: (value: number) => `${value} –í—Ç`,
      examples: ['5 –í—Ç', '10 –í—Ç', '20 –í—Ç']
    });
    
    // –ù–ê–ü–†–Ø–ñ–ï–ù–ò–ï
    rules.set('–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', {
      pattern: /–Ω–∞–ø—Ä—è–∂–µ–Ω/i,
      stringFormat: (value: number) => `${value} –í`,
      examples: ['3.7 –í', '5 –í', '12 –í']
    });
    
    // –ì–ê–†–ê–ù–¢–ò–ô–ù–´–ô –°–†–û–ö
    rules.set('–≥–∞—Ä–∞–Ω—Ç–∏—è', {
      pattern: /–≥–∞—Ä–∞–Ω—Ç–∏—è|—Å—Ä–æ–∫/i,
      stringFormat: (value: number) => {
        if (value >= 12) {
          const years = Math.round(value / 12);
          if (years === 1) return '1 –≥–æ–¥';
          if (years <= 4) return `${years} –≥–æ–¥–∞`;
          return `${years} –ª–µ—Ç`;
        }
        if (value === 1) return '1 –º–µ—Å—è—Ü';
        if (value <= 4) return `${value} –º–µ—Å—è—Ü–∞`;
        return `${value} –º–µ—Å—è—Ü–µ–≤`;
      },
      examples: ['6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞']
    });
    
    return rules;
  }

  /**
   * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ò
   */
  private applyEnhancedTyping(
    aiChar: any,
    dbChar: any,
    typingRules: Map<string, TypingRule>
  ): CharacteristicWithType | null {
    
    const name = dbChar.name;
    const type = dbChar.type;
    let value = aiChar.value;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    const applicableRule = this.findApplicableRule(name, typingRules);
    
    if (type === 'string') {
      // –î–õ–Ø –°–¢–†–û–ö–û–í–´–• –ü–û–õ–ï–ô - –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
      const processedValue = this.processStringValue(value, applicableRule, name);
      
      return {
        id: aiChar.id,
        name: name,
        type: 'string',
        value: processedValue,
        confidence: aiChar.confidence || 0.8,
        source: aiChar.source || 'Enhanced Typing',
        reasoning: `STRING —Ç–∏–ø: ${applicableRule ? '–ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏' : '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞'}`
      };
      
    } else if (type === 'number') {
      // –î–õ–Ø –ß–ò–°–õ–û–í–´–• –ü–û–õ–ï–ô - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
      const processedValue = this.processNumberValue(value, name);
      
      if (processedValue !== null) {
        return {
          id: aiChar.id,
          name: name,
          type: 'number',
          value: processedValue,
          confidence: aiChar.confidence || 0.8,
          source: aiChar.source || 'Enhanced Typing',
          reasoning: `NUMBER —Ç–∏–ø: –∏–∑–≤–ª–µ—á–µ–Ω–æ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ`
        };
      }
    }
    
    return null;
  }

  /**
   * –ü–û–ò–°–ö –ü–†–ò–ú–ï–ù–ò–ú–û–ì–û –ü–†–ê–í–ò–õ–ê
   */
  private findApplicableRule(name: string, rules: Map<string, TypingRule>): TypingRule | null {
    for (const [key, rule] of rules) {
      if (rule.pattern.test(name)) {
        console.log(`   üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: ${key}`);
        return rule;
      }
    }
    return null;
  }

  /**
   * –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
   */
  private processStringValue(value: any, rule: TypingRule | null, name: string): string {
    const stringValue = String(value).trim();
    
    // –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (this.hasUnits(stringValue)) {
      console.log(`   ‚úÖ –ï–¥–∏–Ω–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å: "${stringValue}"`);
      return stringValue;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ - –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if (rule) {
      const numValue = this.extractNumber(stringValue);
      if (numValue !== null) {
        const formatted = rule.stringFormat(numValue);
        console.log(`   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: "${stringValue}" ‚Üí "${formatted}"`);
        return formatted;
      }
    }
    
    // –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    return this.applyGeneralStringRules(stringValue, name);
  }

  /**
   * –û–ë–†–ê–ë–û–¢–ö–ê –ß–ò–°–õ–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô
   */
  private processNumberValue(value: any, name: string): number | null {
    if (typeof value === 'number') {
      console.log(`   üî¢ –£–∂–µ —á–∏—Å–ª–æ: ${value}`);
      return value;
    }
    
    const extracted = this.extractNumber(String(value));
    if (extracted !== null) {
      console.log(`   üî¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–∏—Å–ª–æ: "${value}" ‚Üí ${extracted}`);
      return extracted;
    }
    
    console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑: "${value}"`);
    return null;
  }

  /**
   * –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ß–ò–°–õ–ê –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractNumber(value: string): number | null {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
    const cleaned = value.replace(/[^\d.,]/g, '').replace(/,/g, '.');
    
    // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
    const match = cleaned.match(/(\d+(?:\.\d+)?)/);
    if (match) {
      const num = parseFloat(match[1]);
      if (!isNaN(num)) {
        return num;
      }
    }
    
    return null;
  }

  /**
   * –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø
   */
  private hasUnits(value: string): boolean {
    const unitsPatterns = [
      // –í—Ä–µ–º—è
      /\d+\s*(—á–∞—Å|—á–∞—Å–æ–≤|—á–∞—Å–∞|–º–∏–Ω|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—Å–µ–∫|—Å–µ–∫—É–Ω–¥|—á|–º|—Å)(\s|$)/i,
      /\d+\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü–∞)(\s|$)/i,
      
      // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      /\d+\s*(–º–∞—á|mah|–ºa¬∑—á|–∞—á|ah)(\s|$)/i,
      /\d+\s*(–≤—Ç|–≤–∞—Ç—Ç|w)(\s|$)/i,
      /\d+\s*(–≤|–≤–æ–ª—å—Ç|v)(\s|$)/i,
      /\d+\s*(–æ–º|ohm|Œ©)(\s|$)/i,
      
      // –ß–∞—Å—Ç–æ—Ç–∞ –∏ –∑–≤—É–∫
      /\d+\s*(–≥—Ü|hz|–∫–≥—Ü|khz|–º–≥—Ü|mhz)(\s|$)/i,
      /\d+\s*(–¥–±|db)(\s|$)/i,
      
      // –†–∞–∑–º–µ—Ä—ã
      /\d+\s*(—Å–º|–º–º|–º|–¥–º|–∫–º|–¥—é–π–º)(\s|$)/i
    ];

    return unitsPatterns.some(pattern => pattern.test(value));
  }

  /**
   * –û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
   */
  private applyGeneralStringRules(value: string, name: string): string {
    const nameLower = name.toLowerCase();
    const numValue = this.extractNumber(value);
    
    if (numValue === null) {
      console.log(`   üìù –ù–µ—Ç —á–∏—Å–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É: "${value}"`);
      return value;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ–æ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if (nameLower.includes('–¥–∏–∞–º–µ—Ç—Ä') || nameLower.includes('—Ä–∞–∑–º–µ—Ä')) {
      if (numValue <= 10) return `${numValue} —Å–º`;
      return `${numValue} –º–º`;
    }
    
    if (nameLower.includes('–≤–µ—Å') && !nameLower.includes('—É–ø–∞–∫–æ–≤–∫')) {
      if (numValue < 1) return `${numValue * 1000} –≥`;
      return `${numValue} –∫–≥`;
    }
    
    if (nameLower.includes('–¥–ª–∏–Ω–∞') || nameLower.includes('–≤—ã—Å–æ—Ç–∞') || nameLower.includes('—à–∏—Ä–∏–Ω–∞')) {
      if (numValue <= 100) return `${numValue} —Å–º`;
      return `${numValue} –º–º`;
    }
    
    console.log(`   üìù –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º: "${value}"`);
    return value;
  }

  /**
   * –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
   */
  validateTypedCharacteristics(characteristics: CharacteristicWithType[]): {
    valid: CharacteristicWithType[];
    invalid: Array<{ char: CharacteristicWithType; errors: string[] }>;
    summary: {
      totalProcessed: number;
      validCount: number;
      invalidCount: number;
      stringCount: number;
      numberCount: number;
    };
  } {
    console.log('\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    
    const valid: CharacteristicWithType[] = [];
    const invalid: Array<{ char: CharacteristicWithType; errors: string[] }> = [];
    
    for (const char of characteristics) {
      const errors: string[] = [];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
      if (char.type === 'string' && typeof char.value !== 'string') {
        errors.push(`–û–∂–∏–¥–∞–µ—Ç—Å—è string, –ø–æ–ª—É—á–µ–Ω–æ ${typeof char.value}`);
      }
      
      if (char.type === 'number' && typeof char.value !== 'number') {
        errors.push(`–û–∂–∏–¥–∞–µ—Ç—Å—è number, –ø–æ–ª—É—á–µ–Ω–æ ${typeof char.value}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      if (char.type === 'string' && typeof char.value === 'string') {
        const hasNumber = this.extractNumber(char.value) !== null;
        const hasUnits = this.hasUnits(char.value);
        
        if (hasNumber && !hasUnits && this.needsUnits(char.name)) {
          errors.push(`–ß–∏—Å–ª–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è`);
        }
      }
      
      if (errors.length === 0) {
        valid.push(char);
        console.log(`   ‚úÖ –í–ê–õ–ò–î–ù–ê–Ø: ${char.name} = ${JSON.stringify(char.value)}`);
      } else {
        invalid.push({ char, errors });
        console.log(`   ‚ùå –ù–ï–í–ê–õ–ò–î–ù–ê–Ø: ${char.name} - ${errors.join(', ')}`);
      }
    }
    
    const summary = {
      totalProcessed: characteristics.length,
      validCount: valid.length,
      invalidCount: invalid.length,
      stringCount: valid.filter(c => c.type === 'string').length,
      numberCount: valid.filter(c => c.type === 'number').length
    };
    
    console.log(`\nüìä –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:`);
    console.log(`   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: ${summary.validCount}`);
    console.log(`   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ${summary.invalidCount}`);
    console.log(`   üìù –°—Ç—Ä–æ–∫–æ–≤—ã—Ö: ${summary.stringCount}`);
    console.log(`   üî¢ –ß–∏—Å–ª–æ–≤—ã—Ö: ${summary.numberCount}`);
    
    return { valid, invalid, summary };
  }

  /**
   * –ü–†–û–í–ï–†–ö–ê –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  private needsUnits(name: string): boolean {
    const nameLower = name.toLowerCase();
    const needsUnitsKeywords = [
      '–≤—Ä–µ–º—è', '–µ–º–∫–æ—Å—Ç—å', '–∏–º–ø–µ–¥–∞–Ω—Å', '—á–∞—Å—Ç–æ—Ç–∞', '—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç',
      '–º–æ—â–Ω–æ—Å—Ç—å', '–Ω–∞–ø—Ä—è–∂–µ–Ω', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Å—Ä–æ–∫', '–¥–∏–∞–º–µ—Ç—Ä', '—Ä–∞–∑–º–µ—Ä'
    ];
    
    return needsUnitsKeywords.some(keyword => nameLower.includes(keyword));
  }

  /**
   * –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ø—Ä–∞–≤–∏–ª —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
   */
  demonstrateTypingRules(): void {
    console.log('\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ –¢–ò–ü–ò–ó–ê–¶–ò–ò:');
    
    const rules = this.getTypingRules();
    
    for (const [key, rule] of rules) {
      console.log(`\nüìã ${key.toUpperCase()}:`);
      console.log(`   üîç –ü–∞—Ç—Ç–µ—Ä–Ω: ${rule.pattern}`);
      console.log(`   üìù –ü—Ä–∏–º–µ—Ä—ã: ${rule.examples.join(', ')}`);
      
      // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∞–≤–∏–ª–∞
      const testValues = [1, 2, 8, 32, 400, 20000];
      console.log(`   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:`);
      testValues.forEach(val => {
        try {
          const result = rule.stringFormat(val);
          console.log(`      ${val} ‚Üí "${result}"`);
        } catch (e) {
          console.log(`      ${val} ‚Üí –æ—à–∏–±–∫–∞`);
        }
      });
    }
  }

  /**
   * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è WB API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
   */
  formatForWB(characteristics: CharacteristicWithType[]): Array<{ id: number; value: any }> {
    console.log('\nüì¶ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è WB API...');
    
    return characteristics.map(char => {
      let wbValue: any;
      
      if (char.type === 'number') {
        wbValue = char.value; // –ß–∏—Å–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
        console.log(`   üî¢ ${char.name}: ${wbValue}`);
      } else {
        wbValue = [char.value]; // –°—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ
        console.log(`   üìù ${char.name}: ${JSON.stringify(wbValue)}`);
      }
      
      return {
        id: char.id,
        value: wbValue
      };
    });
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ü–ï–†–ï–î —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
   */
  fixCommonIssues(value: any, name: string): any {
    const nameLower = name.toLowerCase();
    
    // –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º "2 –º–∏–Ω—É—Ç—ã" –Ω–∞ "2 —á–∞—Å–∞"
    if (nameLower.includes('–≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏')) {
      if (value === '2 –º–∏–Ω—É—Ç—ã' || value === '2 –º–∏–Ω—É—Ç') {
        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: "${value}" ‚Üí "2 —á–∞—Å–∞"`);
        return '2 —á–∞—Å–∞';
      }
    }
    
    // –ï–º–∫–æ—Å—Ç—å: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (nameLower.includes('–µ–º–∫–æ—Å—Ç—å')) {
      const num = this.extractNumber(String(value));
      if (num !== null && num < 10) {
        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û –µ–º–∫–æ—Å—Ç—å: "${value}" ‚Üí "${num * 1000} –º–ê—á"`);
        return `${num * 1000} –º–ê—á`;
      }
    }
    
    // –ß–∞—Å—Ç–æ—Ç–∞: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ì—Ü –≤ –ì—Ü
    if (nameLower.includes('—á–∞—Å—Ç–æ—Ç–∞') && String(value).toLowerCase().includes('–∫–≥—Ü')) {
      const num = this.extractNumber(String(value));
      if (num !== null) {
        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û —á–∞—Å—Ç–æ—Ç–∞: "${value}" ‚Üí "${num * 1000} –ì—Ü"`);
        return `${num * 1000} –ì—Ü`;
      }
    }
    
    return value;
  }
}

export const unifiedCharacteristicsService = new UnifiedCharacteristicsService();