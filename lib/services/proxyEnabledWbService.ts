// lib/services/proxyEnabledWbService.ts - –°–ï–†–í–ò–° –° –ü–û–î–î–ï–†–ñ–ö–û–ô –°–ï–†–í–ï–†–ù–û–ì–û –ü–†–û–ö–°–ò

import { WB_API_CONFIG, VALIDATION_RULES, DEFAULT_VALUES } from '../config/wbApiConfig';
import { 
  WBCardCreateRequestLegacy, 
  WBApiResponse, 
  WBCategory,
  normalizeCategory,
  getCategoryId,
  WBCardCreateRequest
} from '../types/wbTypes';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type { WBCardCreateRequest, WBApiResponse } from '../types/wbTypes';

export class ProxyEnabledWbService {
  private readonly useProxy: boolean;
  private readonly proxyEndpoint: string;

  constructor(useProxy: boolean = true) {
    this.useProxy = useProxy;
    this.proxyEndpoint = '/api/wb-proxy';
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
   */
  private async makeProxyRequest<T>(
    endpoint: string,
    apiToken: string,
    method: string = 'GET',
    data?: any,
    useCache: boolean = true
  ): Promise<T> {
    
    if (this.useProxy) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏
      const response = await fetch(this.proxyEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          endpoint,
          method,
          data,
          apiToken,
          useCache
        })
      });

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞');
      }
      
      return result.data;
    } else {
      // –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ WB API (—Ç–æ–ª—å–∫–æ –¥–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è)
      const url = `${WB_API_CONFIG.BASE_URLS.CONTENT}${endpoint}`;
      
      const headers = {
        'Authorization': `Bearer ${apiToken}`,
        'Content-Type': 'application/json'
      };

      const fetchOptions: RequestInit = {
        method,
        headers
      };

      if ((method === 'POST' || method === 'PUT') && data) {
        fetchOptions.body = JSON.stringify(data);
      }

      const response = await fetch(url, fetchOptions);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`WB API Error ${response.status}: ${errorText}`);
      }
      
      return await response.json();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
   */
  async getAllCategories(apiToken: string, locale: string = 'ru'): Promise<WBCategory[]> {
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      
      const response = await this.makeProxyRequest<{ data: any[] }>(
        `${WB_API_CONFIG.ENDPOINTS.GET_CATEGORIES}?locale=${locale}`,
        apiToken,
        'GET',
        null,
        true // –ö–µ—à–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      );
      
      const categories = (response.data || []).map(normalizeCategory);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return categories;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
   */
  async getCategoryCharacteristics(categoryId: number, apiToken: string, locale: string = 'ru'): Promise<any[]> {
    try {
      console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}...`);
      
      const response = await this.makeProxyRequest<{ data: any[] }>(
        `${WB_API_CONFIG.ENDPOINTS.GET_CATEGORY_CHARACTERISTICS}/${categoryId}?locale=${locale}`,
        apiToken,
        'GET',
        null,
        true // –ö–µ—à–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      );
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data?.length || 0} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
      return response.data || [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async findCategoryByName(categoryName: string, apiToken: string): Promise<WBCategory | null> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${categoryName}"`);
      
      const categories = await this.getAllCategories(apiToken);
      
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      let category = categories.find(cat => 
        cat.objectName?.toLowerCase() === categoryName.toLowerCase()
      );
      
      if (category) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.objectName} (ID: ${category.objectID})`);
        return category;
      }
      
      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      category = categories.find(cat => 
        cat.objectName?.toLowerCase().includes(categoryName.toLowerCase()) ||
        categoryName.toLowerCase().includes(cat.objectName?.toLowerCase())
      );
      
      if (category) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.objectName} (ID: ${category.objectID})`);
        return category;
      }
      
      console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–ª–µ–≥–∞—Å–∏ —Ñ–æ—Ä–º–∞—Ç)
   */
  async createProductCard(cardData: WBCardCreateRequestLegacy, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      this.validateCardData(cardData);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!cardData.variants[0].sizes[0].skus || cardData.variants[0].sizes[0].skus.length === 0) {
        console.log('üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤...');
        cardData.variants[0].sizes[0].skus = [this.generateLocalBarcode()];
      }

      const response = await this.makeProxyRequest<any>(
        WB_API_CONFIG.ENDPOINTS.CREATE_CARDS,
        apiToken,
        'POST',
        [cardData], // API –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤
        false // –ù–µ –∫–µ—à–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫–∏
      if (response.error || (Array.isArray(response) && response[0]?.error)) {
        const errorMessage = response.error || response[0]?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ WB API';
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
        return { 
          success: false, 
          error: errorMessage 
        };
      }

      console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      
      return { 
        success: true, 
        data: response,
        taskId: response.taskId || response[0]?.taskId,
        warnings: response.warnings || response[0]?.warnings
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
   */
  async getDirectories(apiToken: string): Promise<{
    colors: any[];
    countries: any[];
    seasons: any[];
  }> {
    try {
      console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...');
      
      const [colors, countries] = await Promise.allSettled([
        this.makeProxyRequest<{ data: any[] }>(
          `${WB_API_CONFIG.ENDPOINTS.GET_COLORS}?locale=ru`,
          apiToken,
          'GET',
          null,
          true
        ),
        this.makeProxyRequest<{ data: any[] }>(
          `${WB_API_CONFIG.ENDPOINTS.GET_COUNTRIES}?locale=ru`,
          apiToken,
          'GET',
          null,
          true
        )
      ]);

      return {
        colors: colors.status === 'fulfilled' ? colors.value.data || [] : [],
        countries: countries.status === 'fulfilled' ? countries.value.data || [] : [],
        seasons: [] // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      return {
        colors: [],
        countries: [],
        seasons: []
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
   */
  async checkCardCreationStatus(taskId: string, apiToken: string): Promise<WBApiResponse> {
    try {
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: ${taskId}`);
      
      const response = await this.makeProxyRequest<any>(
        `${WB_API_CONFIG.ENDPOINTS.GET_ERRORS}?taskId=${taskId}`,
        apiToken,
        'GET',
        null,
        false // –ù–µ –∫–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
      );
      
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞
   */
  async getSellerCards(apiToken: string, limit: number = 100): Promise<any[]> {
    try {
      console.log(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ª–∏–º–∏—Ç: ${limit})...`);
      
      const response = await this.makeProxyRequest<{ data: any[] }>(
        `${WB_API_CONFIG.ENDPOINTS.GET_CARDS_LIST}?limit=${limit}`,
        apiToken,
        'GET',
        null,
        false // –ù–µ –∫–µ—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
      );
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data?.length || 0} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      return response.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WB API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
   */
  async checkApiHealth(apiToken: string): Promise<{ healthy: boolean; message: string; responseTime?: number }> {
    const startTime = Date.now();
    
    try {
      await this.makeProxyRequest<any>(
        WB_API_CONFIG.ENDPOINTS.GET_PARENT_CATEGORIES + '?locale=ru',
        apiToken,
        'GET',
        null,
        true
      );
      
      const responseTime = Date.now() - startTime;
      
      return {
        healthy: true,
        message: 'WB API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        responseTime
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      return {
        healthy: false,
        message: `WB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        responseTime
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ê)
   */
  private validateCardData(cardData: WBCardCreateRequestLegacy): void {
    const variant = cardData.variants[0];
    
    if (!variant.vendorCode || variant.vendorCode.length > VALIDATION_RULES.VENDOR_CODE_MAX_LENGTH) {
      throw new Error(`–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.VENDOR_CODE_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    if (!variant.title || variant.title.length > VALIDATION_RULES.TITLE_MAX_LENGTH) {
      throw new Error(`–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.TITLE_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    if (!variant.description || variant.description.length > VALIDATION_RULES.DESCRIPTION_MAX_LENGTH) {
      throw new Error(`–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.DESCRIPTION_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    if (!variant.brand || variant.brand.length > VALIDATION_RULES.BRAND_MAX_LENGTH) {
      throw new Error(`–ë—Ä–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${VALIDATION_RULES.BRAND_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    if (!cardData.subjectID || cardData.subjectID <= 0) {
      throw new Error('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (subjectID) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω');
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    if (!variant.dimensions || 
        variant.dimensions.length <= 0 || 
        variant.dimensions.width <= 0 || 
        variant.dimensions.height <= 0 ||
        variant.dimensions.weightBrutto <= 0) {
      throw new Error('–†–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è');
    }
    
    if (!variant.sizes || variant.sizes.length === 0) {
      throw new Error('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞');
    }
    
    const size = variant.sizes[0];
    if (!size.price || size.price < VALIDATION_RULES.MIN_PRICE || size.price > VALIDATION_RULES.MAX_PRICE) {
      throw new Error(`–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${VALIDATION_RULES.MIN_PRICE} –¥–æ ${VALIDATION_RULES.MAX_PRICE} —Ä—É–±–ª–µ–π`);
    }
    
    if (!variant.characteristics || variant.characteristics.length === 0) {
      throw new Error('–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    }
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
   */
  private generateLocalBarcode(): string {
    const timestamp = Date.now().toString();
    const random = Math.random().toString(36).substring(2, 8);
    return `AI${timestamp.slice(-6)}${random.toUpperCase()}`;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç WB API (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  prepareCardDataForWB(productData: {
    vendorCode: string;
    title: string;
    description: string;
    brand: string;
    categoryId: number;
    price: number;
    dimensions: {
      length: number;
      width: number;
      height: number;
      weight: number;
    };
    characteristics: Array<{ id: number; value: string }>;
    packageContents: string;
  }): WBCardCreateRequestLegacy {
    
    console.log('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API...');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç WB (–∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–∞—Ö)
    const wbCharacteristics = productData.characteristics.map(char => ({
      id: char.id,
      value: [char.value] // WB API –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const requiredCharacteristics = [
      { id: 372, value: productData.packageContents || '–Ω–µ —É–∫–∞–∑–∞–Ω', name: '–°–æ—Å—Ç–∞–≤' },
      { id: 91, value: DEFAULT_VALUES.COUNTRY, name: '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' },
      { id: 85, value: productData.brand || DEFAULT_VALUES.BRAND, name: '–ë—Ä–µ–Ω–¥' }
    ];

    for (const required of requiredCharacteristics) {
      const exists = wbCharacteristics.some(c => c.id === required.id);
      if (!exists) {
        wbCharacteristics.push({
          id: required.id,
          value: [required.value]
        });
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${required.name} = ${required.value}`);
      }
    }

    const cardData: WBCardCreateRequestLegacy = {
      subjectID: productData.categoryId,
      variants: [{
        vendorCode: productData.vendorCode,
        title: productData.title.substring(0, VALIDATION_RULES.TITLE_MAX_LENGTH),
        description: productData.description.substring(0, VALIDATION_RULES.DESCRIPTION_MAX_LENGTH),
        brand: productData.brand.substring(0, VALIDATION_RULES.BRAND_MAX_LENGTH),
        dimensions: {
          length: productData.dimensions.length,
          width: productData.dimensions.width,
          height: productData.dimensions.height,
          weightBrutto: productData.dimensions.weight
        },
        characteristics: wbCharacteristics,
        sizes: [{
          techSize: "0", // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          wbSize: "0",
          price: Math.round(productData.price), // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É
          skus: [] // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        }]
      }]
    };

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WB');
    return cardData;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
   */
  async getRecentErrors(apiToken: string, hours: number = 24): Promise<any[]> {
    try {
      const dateFrom = new Date(Date.now() - hours * 60 * 60 * 1000).toISOString();
      
      const response = await this.makeProxyRequest<{ data: any[] }>(
        `${WB_API_CONFIG.ENDPOINTS.GET_ERRORS}?dateFrom=${dateFrom}`,
        apiToken,
        'GET',
        null,
        false
      );
      
      return response.data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫:', error);
      return [];
    }
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  async batchCheckStatuses(taskIds: string[], apiToken: string): Promise<{ [key: string]: any }> {
    const results: { [key: string]: any } = {};
    
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è ${taskIds.length} –∑–∞–¥–∞—á...`);
    
    for (const taskId of taskIds) {
      try {
        const status = await this.checkCardCreationStatus(taskId, apiToken);
        results[taskId] = status;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 200));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ${taskId}:`, error);
        results[taskId] = { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
   */
  async getApiStats(): Promise<any> {
    try {
      const response = await fetch('/api/wb-proxy', {
        method: 'PATCH'
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.stats;
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–æ–∫—Å–∏
   */
  async clearProxyCache(): Promise<boolean> {
    try {
      const response = await fetch('/api/wb-proxy?action=clear-cache', {
        method: 'DELETE'
      });
      
      return response.ok;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
      return false;
    }
  }
}

export const proxyEnabledWbService = new ProxyEnabledWbService();