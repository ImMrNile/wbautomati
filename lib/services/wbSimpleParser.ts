// lib/services/wbSimpleParser.ts - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ API

import { WB_API_ENDPOINTS, WB_DEFAULT_PARAMS, WB_HEADERS, WB_USER_AGENTS, validators } from '../config/wbApiConfig';

interface WBProductData {
  id: string;
  name: string;
  brand: string;
  price: number;
  rating: number;
  reviewsCount: number;
  description: string;
  characteristics: Array<{ name: string; value: string }>;
  images: string[];
  category: string;
  categoryId?: number;
  availability: boolean;
  vendorCode: string;
  supplierId?: string;
  tnved?: string;
}

interface ApiStrategy {
  name: string;
  execute: (nmId: string) => Promise<WBProductData | null>;
  priority: number;
}

export class WBSimpleParser {
  private strategies: ApiStrategy[] = [];
  private readonly requestHistory = new Map<string, number>();
  private readonly failureTracker = new Map<string, number>();

  constructor() {
    this.initializeStrategies();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
   */
  private initializeStrategies(): void {
    this.strategies = [
      {
        name: 'Card API v2',
        execute: (nmId) => this.getFromCardAPI(nmId, 'v2'),
        priority: 1
      },
      {
        name: 'Enrichment API',
        execute: (nmId) => this.getFromEnrichmentAPI(nmId),
        priority: 2
      },
      {
        name: 'Card API v1',
        execute: (nmId) => this.getFromCardAPI(nmId, 'v1'),
        priority: 3
      },
      {
        name: 'Search API v5',
        execute: (nmId) => this.getFromSearchAPI(nmId, 'v5'),
        priority: 4
      },
      {
        name: 'Basket API',
        execute: (nmId) => this.getFromBasketAPI(nmId),
        priority: 5
      },
      {
        name: 'Search API v4',
        execute: (nmId) => this.getFromSearchAPI(nmId, 'v4'),
        priority: 6
      }
    ];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    this.strategies.sort((a, b) => a.priority - b.priority);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
   */
  async getProductData(url: string): Promise<WBProductData> {
    const nmId = this.extractProductId(url);
    if (!nmId) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL');
    }

    if (!validators.isValidNmId(nmId)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞');
    }

    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ ${nmId}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ—É–¥–∞—á
    const availableStrategies = this.strategies.filter(strategy => 
      (this.failureTracker.get(strategy.name) || 0) < 3
    );

    let lastError: Error | null = null;

    for (const strategy of availableStrategies) {
      try {
        console.log(`üì° –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: ${strategy.name}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
        await this.applyRateLimit(strategy.name);
        
        const result = await strategy.execute(nmId);
        
        if (this.isValidProductData(result)) {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          this.failureTracker.delete(strategy.name);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ${strategy.name}`);
          return result;
        }
        
      } catch (error: any) {
        lastError = error;
        this.trackFailure(strategy.name);
        console.warn(`‚ö†Ô∏è ${strategy.name} failed:`, error.message);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if (this.isNetworkError(error)) {
          await this.delay(2000);
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    if (await this.checkProductExists(nmId)) {
      console.warn('‚ö†Ô∏è –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
      return this.createFallbackProduct(nmId);
    }

    throw new Error(`–¢–æ–≤–∞—Ä ${nmId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤`);
  }

  /**
   * –ú–µ—Ç–æ–¥ 1: Card API (v1/v2)
   */
  private async getFromCardAPI(nmId: string, version: 'v1' | 'v2'): Promise<WBProductData | null> {
    const params = new URLSearchParams({
      ...WB_DEFAULT_PARAMS,
      nm: nmId
    });
    
    const url = version === 'v2' 
      ? `${WB_API_ENDPOINTS.public.cardDetailV2}?${params}`
      : `${WB_API_ENDPOINTS.public.cardDetail}?${params}`;

    const response = await this.makeSecureRequest(url);
    const data = await response.json();

    if (data?.data?.products && data.data.products.length > 0) {
      return this.parseCardResponse(data.data.products[0], nmId);
    }

    return null;
  }

  /**
   * –ú–µ—Ç–æ–¥ 2: Enrichment API (–¥–ª—è batch –∑–∞–ø—Ä–æ—Å–æ–≤)
   */
  private async getFromEnrichmentAPI(nmId: string): Promise<WBProductData | null> {
    const params = new URLSearchParams({
      spp: '0',
      nm: nmId
    });

    const url = `${WB_API_ENDPOINTS.public.enrichment}?${params}`;
    const response = await this.makeSecureRequest(url);
    const data = await response.json();

    if (data?.data?.products && data.data.products.length > 0) {
      return this.parseEnrichmentResponse(data.data.products[0], nmId);
    }

    return null;
  }

  /**
   * –ú–µ—Ç–æ–¥ 3: Search API (v4/v5)
   */
  private async getFromSearchAPI(nmId: string, version: 'v4' | 'v5'): Promise<WBProductData | null> {
    const params = new URLSearchParams({
      ...WB_DEFAULT_PARAMS,
      query: nmId,
      resultset: 'catalog'
    });

    const url = version === 'v5'
      ? `${WB_API_ENDPOINTS.public.searchV5}?${params}`
      : `${WB_API_ENDPOINTS.public.searchV4}?${params}`;

    const response = await this.makeSecureRequest(url);
    const data = await response.json();

    if (data?.data?.products && data.data.products.length > 0) {
      const product = data.data.products.find((p: any) => 
        p.id?.toString() === nmId || p.root?.toString() === nmId
      );
      
      if (product) {
        return this.parseSearchResponse(product, nmId);
      }
    }

    return null;
  }

  /**
   * –ú–µ—Ç–æ–¥ 4: Basket API
   */
  private async getFromBasketAPI(nmId: string): Promise<WBProductData | null> {
    if (nmId.length < 6) return null;

    const vol = nmId.slice(0, -5);
    const part = nmId.slice(-5, -3);
    
    const baskets = ['basket-01', 'basket-02', 'basket-03'];
    
    for (const basket of baskets) {
      try {
        const url = `https://${basket}.wbbasket.ru/vol${vol}/part${part}/${nmId}/info/ru/card.json`;
        const response = await this.makeSecureRequest(url);
        
        if (response.status === 404) continue;
        
        const data = await response.json();
        
        if (data && (data.imt_name || data.nm_id)) {
          return this.parseBasketResponse(data, nmId);
        }
      } catch (error) {
        console.warn(`Basket ${basket} failed:`, error);
        continue;
      }
    }

    return null;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –º–µ—Ä–∞–º–∏
   */
  private async makeSecureRequest(url: string, retries = 2): Promise<Response> {
    for (let attempt = 0; attempt < retries; attempt++) {
      try {
        const headers = this.getRandomHeaders();
        
        const response = await fetch(url, {
          headers,
          method: 'GET',
          signal: AbortSignal.timeout(15000) // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        if (response.ok) {
          return response;
        }

        if (response.status === 404) {
          throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404)');
        }

        if (response.status === 403) {
          throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–Ω—Ç–∏–±–æ—Ç–æ–º (403)');
        }

        if (response.status === 429) {
          const retryAfter = response.headers.get('retry-after');
          const delay = retryAfter ? parseInt(retryAfter) * 1000 : 3000;
          await this.delay(delay);
          continue;
        }

        if (response.status >= 500) {
          await this.delay(1000 * Math.pow(2, attempt));
          continue;
        }

        throw new Error(`HTTP ${response.status}: ${response.statusText}`);

      } catch (error: any) {
        if (error.name === 'AbortError') {
          throw new Error('–ó–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
        }

        if (attempt === retries - 1) {
          throw error;
        }
        
        await this.delay(1000 * (attempt + 1));
      }
    }

    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞');
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Card API
   */
  private parseCardResponse(product: any, nmId: string): WBProductData {
    return {
      id: nmId,
      name: product.name || `–¢–æ–≤–∞—Ä ${nmId}`,
      brand: product.brand || 'NoName',
      price: this.parsePrice(product.salePriceU || product.priceU),
      rating: product.rating || 0,
      reviewsCount: product.feedbacks || 0,
      description: this.buildDescription(product),
      characteristics: this.extractCharacteristics(product),
      images: this.generateImageUrls(nmId),
      category: product.subjectName || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      categoryId: product.subjectId,
      availability: (product.totalQty || 0) > 0,
      vendorCode: product.vendorCode || nmId,
      supplierId: product.supplierId?.toString(),
      tnved: product.tnved || '8544429009'
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Enrichment API
   */
  private parseEnrichmentResponse(product: any, nmId: string): WBProductData {
    return {
      id: nmId,
      name: product.name || `–¢–æ–≤–∞—Ä ${nmId}`,
      brand: product.brand || 'NoName',
      price: this.parsePrice(product.priceU),
      rating: product.rating || 0,
      reviewsCount: product.feedbacks || 0,
      description: this.buildDescription(product),
      characteristics: this.extractCharacteristics(product),
      images: this.generateImageUrls(nmId),
      category: product.subjectName || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      categoryId: product.subjectId,
      availability: true,
      vendorCode: nmId,
      supplierId: product.supplierId?.toString(),
      tnved: '8544429009'
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Search API
   */
  private parseSearchResponse(product: any, nmId: string): WBProductData {
    return {
      id: nmId,
      name: product.name || `–¢–æ–≤–∞—Ä ${nmId}`,
      brand: product.brand || 'NoName',
      price: this.parsePrice(product.priceU),
      rating: product.rating || 0,
      reviewsCount: product.feedbacks || 0,
      description: this.generateDefaultDescription(product.name || `–¢–æ–≤–∞—Ä ${nmId}`),
      characteristics: [],
      images: this.generateImageUrls(nmId),
      category: product.subjectName || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      categoryId: product.subjectId,
      availability: true,
      vendorCode: nmId,
      supplierId: product.supplierId?.toString(),
      tnved: '8544429009'
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Basket API
   */
  private parseBasketResponse(data: any, nmId: string): WBProductData {
    return {
      id: nmId,
      name: data.imt_name || `–¢–æ–≤–∞—Ä ${nmId}`,
      brand: data.selling?.brand_name || 'NoName',
      price: 0,
      rating: 0,
      reviewsCount: 0,
      description: data.description || this.generateDefaultDescription(data.imt_name || `–¢–æ–≤–∞—Ä ${nmId}`),
      characteristics: this.parseBasketCharacteristics(data),
      images: this.generateImageUrls(nmId),
      category: data.subj_name || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      categoryId: data.subj_root_id,
      availability: true,
      vendorCode: nmId,
      supplierId: data.supplier_id?.toString(),
      tnved: data.tnved || '8544429009'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  private isValidProductData(data: WBProductData | null): data is WBProductData {
    return !!(
      data && 
      data.id && 
      data.name && 
      data.name.length > 3 && 
      data.name !== `–¢–æ–≤–∞—Ä ${data.id}`
    );
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  private createFallbackProduct(nmId: string): WBProductData {
    return {
      id: nmId,
      name: `–¢–æ–≤–∞—Ä ${nmId}`,
      brand: 'NoName',
      price: 0,
      rating: 0,
      reviewsCount: 0,
      description: '–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
      characteristics: [
        { name: '–ê—Ä—Ç–∏–∫—É–ª', value: nmId },
        { name: '–°—Ç–∞—Ç—É—Å', value: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è' }
      ],
      images: this.generateImageUrls(nmId),
      category: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      categoryId: 14727,
      availability: true,
      vendorCode: nmId,
      supplierId: undefined,
      tnved: '8544429009'
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
   */
  private extractCharacteristics(product: any): Array<{ name: string; value: string }> {
    const characteristics: Array<{ name: string; value: string }> = [];

    // –û–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
    if (product.options && Array.isArray(product.options)) {
      product.options.forEach((option: any) => {
        if (option.name && option.value) {
          characteristics.push({
            name: option.name,
            value: String(option.value)
          });
        }
      });
    }

    // –¶–≤–µ—Ç–∞
    if (product.colors && Array.isArray(product.colors) && product.colors.length > 0) {
      characteristics.push({
        name: '–¶–≤–µ—Ç',
        value: product.colors[0].name || '–ù–µ —É–∫–∞–∑–∞–Ω'
      });
    }

    // –†–∞–∑–º–µ—Ä—ã
    if (product.sizes && Array.isArray(product.sizes) && product.sizes.length > 0) {
      const sizes = product.sizes
        .map((s: any) => s.name)
        .filter(Boolean)
        .join(', ');
      if (sizes) {
        characteristics.push({
          name: '–†–∞–∑–º–µ—Ä—ã',
          value: sizes
        });
      }
    }

    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if (characteristics.length === 0) {
      if (product.brand && product.brand !== 'NoName') {
        characteristics.push({ name: '–ë—Ä–µ–Ω–¥', value: product.brand });
      }
      if (product.vendorCode) {
        characteristics.push({ name: '–ê—Ä—Ç–∏–∫—É–ª', value: product.vendorCode });
      }
    }

    return characteristics;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ Basket API
   */
  private parseBasketCharacteristics(data: any): Array<{ name: string; value: string }> {
    const characteristics: Array<{ name: string; value: string }> = [];

    if (data.options && Array.isArray(data.options)) {
      data.options.forEach((option: any) => {
        if (option.name && option.value) {
          characteristics.push({
            name: option.name,
            value: String(option.value)
          });
        }
      });
    }

    if (data.selling?.brand_name) {
      characteristics.push({ 
        name: '–ë—Ä–µ–Ω–¥', 
        value: data.selling.brand_name 
      });
    }

    return characteristics;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  private buildDescription(product: any): string {
    const parts = [];

    if (product.brand && product.brand !== 'NoName') {
      parts.push(`‚úÖ –ë—Ä–µ–Ω–¥: ${product.brand}`);
    }

    if (product.rating > 0) {
      parts.push(`‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${product.rating}`);
    }

    if (product.feedbacks > 0) {
      parts.push(`üí¨ –û—Ç–∑—ã–≤–æ–≤: ${product.feedbacks}`);
    }

    parts.push('‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä');
    parts.push('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞');
    parts.push('‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞');

    if (product.description) {
      parts.push('');
      parts.push(product.description);
    }

    return parts.join('\n');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  private generateDefaultDescription(name: string): string {
    return `${name}

‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚úÖ –í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private generateImageUrls(nmId: string): string[] {
    if (nmId.length < 6) return [];
    
    const vol = nmId.slice(0, -5);
    const part = nmId.slice(-5, -3);
    
    const images: string[] = [];
    const hosts = ['images.wbstatic.net', 'basket-01.wbbasket.ru'];
    
    for (let i = 1; i <= 5; i++) {
      const host = hosts[i % hosts.length];
      images.push(`https://${host}/vol${vol}/part${part}/${nmId}/images/c516x688/${i}.webp`);
    }
    
    return images;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ –∫–æ–ø–µ–µ–∫
   */
  private parsePrice(priceU: number | undefined): number {
    if (!priceU || priceU <= 0) return 0;
    return Math.round(priceU / 100);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
   */
  extractProductId(url: string): string | null {
    const patterns = [
      /\/catalog\/(\d+)\/detail\.aspx/,
      /\/catalog\/(\d+)/,
      /product\/(\d+)/,
      /detail\/(\d+)/,
      /nm(\d+)/,
      /(\d{8,})/
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) return match[1];
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  async checkProductExists(nmId: string): Promise<boolean> {
    try {
      // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (nmId.length >= 6) {
        const vol = nmId.slice(0, -5);
        const part = nmId.slice(-5, -3);
        const imageUrl = `https://images.wbstatic.net/vol${vol}/part${part}/${nmId}/images/c246x328/1.webp`;
        
        const response = await fetch(imageUrl, { 
          method: 'HEAD',
          headers: { 'User-Agent': this.getRandomUserAgent() },
          signal: AbortSignal.timeout(5000)
        });
        
        if (response.ok) {
          return true;
        }
      }

      // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Card API
      const params = new URLSearchParams({
        ...WB_DEFAULT_PARAMS,
        nm: nmId
      });
      
      const url = `${WB_API_ENDPOINTS.public.cardDetail}?${params}`;
      const response = await this.makeSecureRequest(url);
      
      if (response.ok) {
        const data = await response.json();
        return !!(data?.data?.products && data.data.products.length > 0);
      }

      return false;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB
   */
  async getWBCategories(apiToken: string): Promise<any[]> {
    try {
      if (!apiToken || !validators.isValidApiToken(apiToken)) {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return this.getStaticCategories();
      }

      const response = await fetch(WB_API_ENDPOINTS.content.getAllCategories, {
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(10000)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const categories = Array.isArray(data) ? data : (data.data || []);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ WB API`);
      return categories;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB:', error.message);
      console.log('üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ fallback');
      return this.getStaticCategories();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(categoryId: number, apiToken: string): Promise<any[]> {
    try {
      if (!validators.isValidApiToken(apiToken)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API —Ç–æ–∫–µ–Ω');
      }

      const response = await fetch(WB_API_ENDPOINTS.content.getCategoryCharacteristics(categoryId), {
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(10000)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const characteristics = Array.isArray(data) ? data : (data.data || []);
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
      return characteristics;
      
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error.message);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
   */
  async createProductCard(cardData: any, apiToken: string): Promise<any> {
    try {
      if (!validators.isValidApiToken(apiToken)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API —Ç–æ–∫–µ–Ω');
      }

      console.log('üöÄ –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –≤ WB...');

      const response = await fetch(WB_API_ENDPOINTS.content.uploadCard, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify([cardData]),
        signal: AbortSignal.timeout(30000)
      });

      const responseText = await response.text();
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç WB API:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${responseText}`);
      }

      let result;
      try {
        result = JSON.parse(responseText);
      } catch {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: ${responseText}`);
      }

      if (Array.isArray(result) && result.length > 0) {
        const cardResult = result[0];
        
        if (cardResult.error) {
          return { 
            success: false, 
            error: cardResult.error,
            details: cardResult
          };
        }
        
        const nmId = cardResult.nmId || cardResult.nmID;
        if (nmId) {
          return { 
            success: true, 
            nmId: nmId,
            data: cardResult
          };
        }
      }

      return { 
        success: false, 
        error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API',
        rawResponse: result
      };
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è fallback
   */
  private getStaticCategories(): any[] {
    return [
      { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 5392, objectName: '–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
      { objectID: 9836, objectName: '–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
      { objectID: 340, objectName: '–ù–∞—É—à–Ω–∏–∫–∏', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
      { objectID: 4695, objectName: '–í–Ω–µ—à–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
      { objectID: 8126, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 8127, objectName: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 1347, objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 1408, objectName: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 6119, objectName: '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
      { objectID: 543, objectName: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true }
    ];
  }

  /**
   * Rate limiting –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async applyRateLimit(strategyName: string): Promise<void> {
    const lastRequest = this.requestHistory.get(strategyName);
    const now = Date.now();
    
    if (lastRequest) {
      const timeDiff = now - lastRequest;
      const minInterval = this.getMinInterval(strategyName);
      
      if (timeDiff < minInterval) {
        const waitTime = minInterval - timeDiff;
        await this.delay(waitTime);
      }
    }
    
    this.requestHistory.set(strategyName, now);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private getMinInterval(strategyName: string): number {
    const intervals: Record<string, number> = {
      'Card API v1': 1000,
      'Card API v2': 1000,
      'Enrichment API': 2000,
      'Search API v4': 500,
      'Search API v5': 500,
      'Basket API': 800
    };
    
    return intervals[strategyName] || 1000;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
   */
  private trackFailure(strategyName: string): void {
    const currentFailures = this.failureTracker.get(strategyName) || 0;
    this.failureTracker.set(strategyName, currentFailures + 1);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
   */
  private isNetworkError(error: any): boolean {
    const networkErrors = [
      'ENOTFOUND',
      'ECONNREFUSED', 
      'ECONNRESET',
      'ETIMEDOUT',
      'UND_ERR_CONNECT_TIMEOUT',
      'fetch failed',
      'network error'
    ];

    const errorString = error.toString().toLowerCase();
    return networkErrors.some(netError => 
      errorString.includes(netError.toLowerCase()) ||
      error.code === netError
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  private getRandomHeaders(): Record<string, string> {
    return {
      ...WB_HEADERS,
      'User-Agent': this.getRandomUserAgent()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
   */
  private getRandomUserAgent(): string {
    return WB_USER_AGENTS[Math.floor(Math.random() * WB_USER_AGENTS.length)];
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
   */
  getParserStats(): {
    strategies: Array<{ name: string; failures: number; priority: number }>;
    totalRequests: number;
    successRate: number;
  } {
    const strategies = this.strategies.map(strategy => ({
      name: strategy.name,
      failures: this.failureTracker.get(strategy.name) || 0,
      priority: strategy.priority
    }));

    const totalRequests = this.requestHistory.size;
    const totalFailures = Array.from(this.failureTracker.values()).reduce((sum, count) => sum + count, 0);
    const successRate = totalRequests > 0 ? ((totalRequests - totalFailures) / totalRequests) * 100 : 0;

    return {
      strategies,
      totalRequests,
      successRate: Math.round(successRate * 100) / 100
    };
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—É–¥–∞—á
   */
  resetFailureStats(): void {
    this.failureTracker.clear();
    console.log('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup(): Promise<void> {
    this.requestHistory.clear();
    this.failureTracker.clear();
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ WB –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const wbSimpleParser = new WBSimpleParser();
export default WBSimpleParser;