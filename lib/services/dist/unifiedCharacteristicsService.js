"use strict";
// lib/services/enhancedTypingProcessor.ts - –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –¢–ò–ü–ò–ó–ê–¶–ò–ò
exports.__esModule = true;
exports.unifiedCharacteristicsService = exports.UnifiedCharacteristicsService = void 0;
var UnifiedCharacteristicsService = /** @class */ (function () {
    function UnifiedCharacteristicsService() {
    }
    /**
     * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
     */
    UnifiedCharacteristicsService.prototype.processCharacteristicsWithEnhancedTyping = function (aiCharacteristics, categoryCharacteristics) {
        console.log('üîß ENHANCED TYPING: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π');
        var processed = [];
        var typingRules = this.getTypingRules();
        var _loop_1 = function (aiChar) {
            var dbChar = categoryCharacteristics.find(function (c) { return c.id === aiChar.id; });
            if (!dbChar)
                return "continue";
            console.log("\n\uD83D\uDD0D PROCESSING: " + dbChar.name + " (ID: " + aiChar.id + ")");
            console.log("   \uD83D\uDCCA DB Type: " + dbChar.type);
            console.log("   \uD83C\uDFAF AI Value: \"" + aiChar.value + "\"");
            var processedChar = this_1.applyEnhancedTyping(aiChar, dbChar, typingRules);
            if (processedChar) {
                processed.push(processedChar);
                console.log("   \u2705 RESULT: " + JSON.stringify(processedChar.value) + " (" + dbChar.type + ")");
            }
        };
        var this_1 = this;
        for (var _i = 0, aiCharacteristics_1 = aiCharacteristics; _i < aiCharacteristics_1.length; _i++) {
            var aiChar = aiCharacteristics_1[_i];
            _loop_1(aiChar);
        }
        return processed;
    };
    /**
     * –ü–†–ê–í–ò–õ–ê –¢–ò–ü–ò–ó–ê–¶–ò–ò –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    UnifiedCharacteristicsService.prototype.getTypingRules = function () {
        var rules = new Map();
        // –í–†–ï–ú–Ø –ó–ê–†–Ø–î–ö–ò
        rules.set('–≤—Ä–µ–º—è_–∑–∞—Ä—è–¥–∫–∏', {
            pattern: /–≤—Ä–µ–º—è.*–∑–∞—Ä—è–¥–∫/i,
            stringFormat: function (value) {
                if (value === 1)
                    return '1 —á–∞—Å';
                if (value === 2)
                    return '2 —á–∞—Å–∞';
                if (value <= 4)
                    return value + " \u0447\u0430\u0441\u0430";
                if (value <= 10)
                    return value + " \u0447\u0430\u0441\u043E\u0432";
                if (value <= 120)
                    return value + " \u043C\u0438\u043D\u0443\u0442";
                return Math.round(value / 60) + " \u0447\u0430\u0441\u043E\u0432";
            },
            examples: ['1 —á–∞—Å', '2 —á–∞—Å–∞', '3 —á–∞—Å–∞', '120 –º–∏–Ω—É—Ç']
        });
        // –í–†–ï–ú–Ø –†–ê–ë–û–¢–´
        rules.set('–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã', {
            pattern: /–≤—Ä–µ–º—è.*—Ä–∞–±–æ—Ç|–∞–≤—Ç–æ–Ω–æ–º–Ω/i,
            stringFormat: function (value) {
                if (value === 1)
                    return '1 —á–∞—Å';
                if (value <= 4)
                    return value + " \u0447\u0430\u0441\u0430";
                if (value <= 100)
                    return value + " \u0447\u0430\u0441\u043E\u0432";
                return Math.round(value / 60) + " \u0447\u0430\u0441\u043E\u0432";
            },
            examples: ['8 —á–∞—Å–æ–≤', '60 —á–∞—Å–æ–≤', '24 —á–∞—Å–∞']
        });
        // –ï–ú–ö–û–°–¢–¨ –ê–ö–ö–£–ú–£–õ–Ø–¢–û–†–ê
        rules.set('–µ–º–∫–æ—Å—Ç—å', {
            pattern: /–µ–º–∫–æ—Å—Ç—å/i,
            stringFormat: function (value) {
                if (value >= 100)
                    return value + " \u043C\u0410\u0447";
                return value * 1000 + " \u043C\u0410\u0447";
            },
            examples: ['400 –º–ê—á', '3000 –º–ê—á', '5000 –º–ê—á']
        });
        // –ò–ú–ü–ï–î–ê–ù–°
        rules.set('–∏–º–ø–µ–¥–∞–Ω—Å', {
            pattern: /–∏–º–ø–µ–¥–∞–Ω—Å/i,
            stringFormat: function (value) { return value + " \u041E\u043C"; },
            examples: ['16 –û–º', '32 –û–º', '64 –û–º']
        });
        // –ß–ê–°–¢–û–¢–ê
        rules.set('—á–∞—Å—Ç–æ—Ç–∞', {
            pattern: /—á–∞—Å—Ç–æ—Ç–∞/i,
            stringFormat: function (value) {
                if (value >= 1000)
                    return value / 1000 + " \u043A\u0413\u0446";
                return value + " \u0413\u0446";
            },
            examples: ['20 –ì—Ü', '1 –∫–ì—Ü', '20 –∫–ì—Ü']
        });
        // –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨
        rules.set('—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', {
            pattern: /—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç/i,
            stringFormat: function (value) { return value + " \u0434\u0411"; },
            examples: ['100 –¥–ë', '104 –¥–ë', '110 –¥–ë']
        });
        // –ú–û–©–ù–û–°–¢–¨
        rules.set('–º–æ—â–Ω–æ—Å—Ç—å', {
            pattern: /–º–æ—â–Ω–æ—Å—Ç—å/i,
            stringFormat: function (value) { return value + " \u0412\u0442"; },
            examples: ['5 –í—Ç', '10 –í—Ç', '20 –í—Ç']
        });
        // –ù–ê–ü–†–Ø–ñ–ï–ù–ò–ï
        rules.set('–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', {
            pattern: /–Ω–∞–ø—Ä—è–∂–µ–Ω/i,
            stringFormat: function (value) { return value + " \u0412"; },
            examples: ['3.7 –í', '5 –í', '12 –í']
        });
        // –ì–ê–†–ê–ù–¢–ò–ô–ù–´–ô –°–†–û–ö
        rules.set('–≥–∞—Ä–∞–Ω—Ç–∏—è', {
            pattern: /–≥–∞—Ä–∞–Ω—Ç–∏—è|—Å—Ä–æ–∫/i,
            stringFormat: function (value) {
                if (value >= 12) {
                    var years = Math.round(value / 12);
                    if (years === 1)
                        return '1 –≥–æ–¥';
                    if (years <= 4)
                        return years + " \u0433\u043E\u0434\u0430";
                    return years + " \u043B\u0435\u0442";
                }
                if (value === 1)
                    return '1 –º–µ—Å—è—Ü';
                if (value <= 4)
                    return value + " \u043C\u0435\u0441\u044F\u0446\u0430";
                return value + " \u043C\u0435\u0441\u044F\u0446\u0435\u0432";
            },
            examples: ['6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥', '2 –≥–æ–¥–∞']
        });
        return rules;
    };
    /**
     * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ò
     */
    UnifiedCharacteristicsService.prototype.applyEnhancedTyping = function (aiChar, dbChar, typingRules) {
        var name = dbChar.name;
        var type = dbChar.type;
        var value = aiChar.value;
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
        var applicableRule = this.findApplicableRule(name, typingRules);
        if (type === 'string') {
            // –î–õ–Ø –°–¢–†–û–ö–û–í–´–• –ü–û–õ–ï–ô - –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
            var processedValue = this.processStringValue(value, applicableRule, name);
            return {
                id: aiChar.id,
                name: name,
                type: 'string',
                value: processedValue,
                confidence: aiChar.confidence || 0.8,
                source: aiChar.source || 'Enhanced Typing',
                reasoning: "STRING \u0442\u0438\u043F: " + (applicableRule ? '–ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏' : '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞')
            };
        }
        else if (type === 'number') {
            // –î–õ–Ø –ß–ò–°–õ–û–í–´–• –ü–û–õ–ï–ô - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
            var processedValue = this.processNumberValue(value, name);
            if (processedValue !== null) {
                return {
                    id: aiChar.id,
                    name: name,
                    type: 'number',
                    value: processedValue,
                    confidence: aiChar.confidence || 0.8,
                    source: aiChar.source || 'Enhanced Typing',
                    reasoning: "NUMBER \u0442\u0438\u043F: \u0438\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u043E \u0447\u0438\u0441\u0442\u043E\u0435 \u0447\u0438\u0441\u043B\u043E"
                };
            }
        }
        return null;
    };
    /**
     * –ü–û–ò–°–ö –ü–†–ò–ú–ï–ù–ò–ú–û–ì–û –ü–†–ê–í–ò–õ–ê
     */
    UnifiedCharacteristicsService.prototype.findApplicableRule = function (name, rules) {
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var _a = rules_1[_i], key = _a[0], rule = _a[1];
            if (rule.pattern.test(name)) {
                console.log("   \uD83C\uDFAF \u041D\u0430\u0439\u0434\u0435\u043D\u043E \u043F\u0440\u0430\u0432\u0438\u043B\u043E: " + key);
                return rule;
            }
        }
        return null;
    };
    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
     */
    UnifiedCharacteristicsService.prototype.processStringValue = function (value, rule, name) {
        var stringValue = String(value).trim();
        // –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (this.hasUnits(stringValue)) {
            console.log("   \u2705 \u0415\u0434\u0438\u043D\u0438\u0446\u044B \u0443\u0436\u0435 \u0435\u0441\u0442\u044C: \"" + stringValue + "\"");
            return stringValue;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ - –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if (rule) {
            var numValue = this.extractNumber(stringValue);
            if (numValue !== null) {
                var formatted = rule.stringFormat(numValue);
                console.log("   \uD83D\uDD27 \u041F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u043E \u043F\u0440\u0430\u0432\u0438\u043B\u043E: \"" + stringValue + "\" \u2192 \"" + formatted + "\"");
                return formatted;
            }
        }
        // –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        return this.applyGeneralStringRules(stringValue, name);
    };
    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –ß–ò–°–õ–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô
     */
    UnifiedCharacteristicsService.prototype.processNumberValue = function (value, name) {
        if (typeof value === 'number') {
            console.log("   \uD83D\uDD22 \u0423\u0436\u0435 \u0447\u0438\u0441\u043B\u043E: " + value);
            return value;
        }
        var extracted = this.extractNumber(String(value));
        if (extracted !== null) {
            console.log("   \uD83D\uDD22 \u0418\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u043E \u0447\u0438\u0441\u043B\u043E: \"" + value + "\" \u2192 " + extracted);
            return extracted;
        }
        console.warn("   \u26A0\uFE0F \u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0438\u0437\u0432\u043B\u0435\u0447\u044C \u0447\u0438\u0441\u043B\u043E \u0438\u0437: \"" + value + "\"");
        return null;
    };
    /**
     * –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ß–ò–°–õ–ê –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    UnifiedCharacteristicsService.prototype.extractNumber = function (value) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
        var cleaned = value.replace(/[^\d.,]/g, '').replace(/,/g, '.');
        // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
        var match = cleaned.match(/(\d+(?:\.\d+)?)/);
        if (match) {
            var num = parseFloat(match[1]);
            if (!isNaN(num)) {
                return num;
            }
        }
        return null;
    };
    /**
     * –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø
     */
    UnifiedCharacteristicsService.prototype.hasUnits = function (value) {
        var unitsPatterns = [
            // –í—Ä–µ–º—è
            /\d+\s*(—á–∞—Å|—á–∞—Å–æ–≤|—á–∞—Å–∞|–º–∏–Ω|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—Å–µ–∫|—Å–µ–∫—É–Ω–¥|—á|–º|—Å)(\s|$)/i,
            /\d+\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü–∞)(\s|$)/i,
            // –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            /\d+\s*(–º–∞—á|mah|–ºa¬∑—á|–∞—á|ah)(\s|$)/i,
            /\d+\s*(–≤—Ç|–≤–∞—Ç—Ç|w)(\s|$)/i,
            /\d+\s*(–≤|–≤–æ–ª—å—Ç|v)(\s|$)/i,
            /\d+\s*(–æ–º|ohm|Œ©)(\s|$)/i,
            // –ß–∞—Å—Ç–æ—Ç–∞ –∏ –∑–≤—É–∫
            /\d+\s*(–≥—Ü|hz|–∫–≥—Ü|khz|–º–≥—Ü|mhz)(\s|$)/i,
            /\d+\s*(–¥–±|db)(\s|$)/i,
            // –†–∞–∑–º–µ—Ä—ã
            /\d+\s*(—Å–º|–º–º|–º|–¥–º|–∫–º|–¥—é–π–º)(\s|$)/i
        ];
        return unitsPatterns.some(function (pattern) { return pattern.test(value); });
    };
    /**
     * –û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –¥–ª—è —Å—Ç—Ä–æ–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
     */
    UnifiedCharacteristicsService.prototype.applyGeneralStringRules = function (value, name) {
        var nameLower = name.toLowerCase();
        var numValue = this.extractNumber(value);
        if (numValue === null) {
            console.log("   \uD83D\uDCDD \u041D\u0435\u0442 \u0447\u0438\u0441\u043B\u0430, \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C \u043A\u0430\u043A \u0441\u0442\u0440\u043E\u043A\u0443: \"" + value + "\"");
            return value;
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ–æ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if (nameLower.includes('–¥–∏–∞–º–µ—Ç—Ä') || nameLower.includes('—Ä–∞–∑–º–µ—Ä')) {
            if (numValue <= 10)
                return numValue + " \u0441\u043C";
            return numValue + " \u043C\u043C";
        }
        if (nameLower.includes('–≤–µ—Å') && !nameLower.includes('—É–ø–∞–∫–æ–≤–∫')) {
            if (numValue < 1)
                return numValue * 1000 + " \u0433";
            return numValue + " \u043A\u0433";
        }
        if (nameLower.includes('–¥–ª–∏–Ω–∞') || nameLower.includes('–≤—ã—Å–æ—Ç–∞') || nameLower.includes('—à–∏—Ä–∏–Ω–∞')) {
            if (numValue <= 100)
                return numValue + " \u0441\u043C";
            return numValue + " \u043C\u043C";
        }
        console.log("   \uD83D\uDCDD \u041D\u0435\u043E\u043F\u043E\u0437\u043D\u0430\u043D\u043D\u0430\u044F \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0430, \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C: \"" + value + "\"");
        return value;
    };
    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
     */
    UnifiedCharacteristicsService.prototype.validateTypedCharacteristics = function (characteristics) {
        console.log('\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
        var valid = [];
        var invalid = [];
        for (var _i = 0, characteristics_1 = characteristics; _i < characteristics_1.length; _i++) {
            var char = characteristics_1[_i];
            var errors = [];
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            if (char.type === 'string' && typeof char.value !== 'string') {
                errors.push("\u041E\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044F string, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E " + typeof char.value);
            }
            if (char.type === 'number' && typeof char.value !== 'number') {
                errors.push("\u041E\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044F number, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E " + typeof char.value);
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if (char.type === 'string' && typeof char.value === 'string') {
                var hasNumber = this.extractNumber(char.value) !== null;
                var hasUnits = this.hasUnits(char.value);
                if (hasNumber && !hasUnits && this.needsUnits(char.name)) {
                    errors.push("\u0427\u0438\u0441\u043B\u043E\u0432\u0430\u044F \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0430 \u0431\u0435\u0437 \u0435\u0434\u0438\u043D\u0438\u0446 \u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F");
                }
            }
            if (errors.length === 0) {
                valid.push(char);
                console.log("   \u2705 \u0412\u0410\u041B\u0418\u0414\u041D\u0410\u042F: " + char.name + " = " + JSON.stringify(char.value));
            }
            else {
                invalid.push({ char: char, errors: errors });
                console.log("   \u274C \u041D\u0415\u0412\u0410\u041B\u0418\u0414\u041D\u0410\u042F: " + char.name + " - " + errors.join(', '));
            }
        }
        var summary = {
            totalProcessed: characteristics.length,
            validCount: valid.length,
            invalidCount: invalid.length,
            stringCount: valid.filter(function (c) { return c.type === 'string'; }).length,
            numberCount: valid.filter(function (c) { return c.type === 'number'; }).length
        };
        console.log("\n\uD83D\uDCCA \u0412\u0410\u041B\u0418\u0414\u0410\u0426\u0418\u042F \u0417\u0410\u0412\u0415\u0420\u0428\u0415\u041D\u0410:");
        console.log("   \u2705 \u0412\u0430\u043B\u0438\u0434\u043D\u044B\u0445: " + summary.validCount);
        console.log("   \u274C \u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u044B\u0445: " + summary.invalidCount);
        console.log("   \uD83D\uDCDD \u0421\u0442\u0440\u043E\u043A\u043E\u0432\u044B\u0445: " + summary.stringCount);
        console.log("   \uD83D\uDD22 \u0427\u0438\u0441\u043B\u043E\u0432\u044B\u0445: " + summary.numberCount);
        return { valid: valid, invalid: invalid, summary: summary };
    };
    /**
     * –ü–†–û–í–ï–†–ö–ê –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
     */
    UnifiedCharacteristicsService.prototype.needsUnits = function (name) {
        var nameLower = name.toLowerCase();
        var needsUnitsKeywords = [
            '–≤—Ä–µ–º—è', '–µ–º–∫–æ—Å—Ç—å', '–∏–º–ø–µ–¥–∞–Ω—Å', '—á–∞—Å—Ç–æ—Ç–∞', '—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç',
            '–º–æ—â–Ω–æ—Å—Ç—å', '–Ω–∞–ø—Ä—è–∂–µ–Ω', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Å—Ä–æ–∫', '–¥–∏–∞–º–µ—Ç—Ä', '—Ä–∞–∑–º–µ—Ä'
        ];
        return needsUnitsKeywords.some(function (keyword) { return nameLower.includes(keyword); });
    };
    /**
     * –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ø—Ä–∞–≤–∏–ª —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
     */
    UnifiedCharacteristicsService.prototype.demonstrateTypingRules = function () {
        console.log('\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ –¢–ò–ü–ò–ó–ê–¶–ò–ò:');
        var rules = this.getTypingRules();
        var _loop_2 = function (key, rule) {
            console.log("\n\uD83D\uDCCB " + key.toUpperCase() + ":");
            console.log("   \uD83D\uDD0D \u041F\u0430\u0442\u0442\u0435\u0440\u043D: " + rule.pattern);
            console.log("   \uD83D\uDCDD \u041F\u0440\u0438\u043C\u0435\u0440\u044B: " + rule.examples.join(', '));
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∞–≤–∏–ª–∞
            var testValues = [1, 2, 8, 32, 400, 20000];
            console.log("   \uD83E\uDDEA \u0422\u0435\u0441\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435:");
            testValues.forEach(function (val) {
                try {
                    var result = rule.stringFormat(val);
                    console.log("      " + val + " \u2192 \"" + result + "\"");
                }
                catch (e) {
                    console.log("      " + val + " \u2192 \u043E\u0448\u0438\u0431\u043A\u0430");
                }
            });
        };
        for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
            var _a = rules_2[_i], key = _a[0], rule = _a[1];
            _loop_2(key, rule);
        }
    };
    /**
     * –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è WB API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
     */
    UnifiedCharacteristicsService.prototype.formatForWB = function (characteristics) {
        console.log('\nüì¶ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¥–ª—è WB API...');
        return characteristics.map(function (char) {
            var wbValue;
            if (char.type === 'number') {
                wbValue = char.value; // –ß–∏—Å–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
                console.log("   \uD83D\uDD22 " + char.name + ": " + wbValue);
            }
            else {
                wbValue = [char.value]; // –°—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ
                console.log("   \uD83D\uDCDD " + char.name + ": " + JSON.stringify(wbValue));
            }
            return {
                id: char.id,
                value: wbValue
            };
        });
    };
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ü–ï–†–ï–î —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
     */
    UnifiedCharacteristicsService.prototype.fixCommonIssues = function (value, name) {
        var nameLower = name.toLowerCase();
        // –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º "2 –º–∏–Ω—É—Ç—ã" –Ω–∞ "2 —á–∞—Å–∞"
        if (nameLower.includes('–≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏')) {
            if (value === '2 –º–∏–Ω—É—Ç—ã' || value === '2 –º–∏–Ω—É—Ç') {
                console.log("\uD83D\uDD27 \u0418\u0421\u041F\u0420\u0410\u0412\u041B\u0415\u041D\u041E: \"" + value + "\" \u2192 \"2 \u0447\u0430\u0441\u0430\"");
                return '2 —á–∞—Å–∞';
            }
        }
        // –ï–º–∫–æ—Å—Ç—å: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (nameLower.includes('–µ–º–∫–æ—Å—Ç—å')) {
            var num = this.extractNumber(String(value));
            if (num !== null && num < 10) {
                console.log("\uD83D\uDD27 \u0418\u0421\u041F\u0420\u0410\u0412\u041B\u0415\u041D\u041E \u0435\u043C\u043A\u043E\u0441\u0442\u044C: \"" + value + "\" \u2192 \"" + num * 1000 + " \u043C\u0410\u0447\"");
                return num * 1000 + " \u043C\u0410\u0447";
            }
        }
        // –ß–∞—Å—Ç–æ—Ç–∞: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ì—Ü –≤ –ì—Ü
        if (nameLower.includes('—á–∞—Å—Ç–æ—Ç–∞') && String(value).toLowerCase().includes('–∫–≥—Ü')) {
            var num = this.extractNumber(String(value));
            if (num !== null) {
                console.log("\uD83D\uDD27 \u0418\u0421\u041F\u0420\u0410\u0412\u041B\u0415\u041D\u041E \u0447\u0430\u0441\u0442\u043E\u0442\u0430: \"" + value + "\" \u2192 \"" + num * 1000 + " \u0413\u0446\"");
                return num * 1000 + " \u0413\u0446";
            }
        }
        return value;
    };
    return UnifiedCharacteristicsService;
}());
exports.UnifiedCharacteristicsService = UnifiedCharacteristicsService;
exports.unifiedCharacteristicsService = new UnifiedCharacteristicsService();
