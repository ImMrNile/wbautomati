"use strict";
// lib/services/simplifiedCharacteristicsSystem.ts
// –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ò–ü–ò–ó–ê–¶–ò–ò - –ë–ï–ó –ê–ì–†–ï–°–°–ò–í–ù–û–ô –û–ß–ò–°–¢–ö–ò
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.integratedProcessor = exports.simplifiedCharacteristicsSystem = exports.IntegratedCharacteristicsProcessor = exports.SimplifiedCharacteristicsSystem = void 0;
var SimplifiedCharacteristicsSystem = /** @class */ (function () {
    function SimplifiedCharacteristicsSystem() {
    }
    /**
     * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
     */
    SimplifiedCharacteristicsSystem.prototype.processCharacteristicsWithAI = function (productData, categoryCharacteristics) {
        return __awaiter(this, void 0, Promise, function () {
            var typedCharacteristics, aiResult, processedCharacteristics, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        typedCharacteristics = this.determineSimpleTypes(categoryCharacteristics);
                        return [4 /*yield*/, this.sendToAIWithTypes(productData, typedCharacteristics)];
                    case 2:
                        aiResult = _a.sent();
                        processedCharacteristics = this.lightProcessing(aiResult.characteristics, typedCharacteristics);
                        // 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        return [2 /*return*/, {
                                characteristics: processedCharacteristics,
                                seoTitle: aiResult.seoTitle || productData.productName,
                                seoDescription: aiResult.seoDescription || productData.productName + " - \u0432\u044B\u0441\u043E\u043A\u043E\u0435 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u043E, \u0431\u044B\u0441\u0442\u0440\u0430\u044F \u0434\u043E\u0441\u0442\u0430\u0432\u043A\u0430",
                                totalProcessed: processedCharacteristics.length,
                                confidence: aiResult.confidence || 0.8
                            }];
                    case 3:
                        error_1 = _a.sent();
                        console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error_1);
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * –ü–†–û–°–¢–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ë–ï–ó –ò–ò
     */
    SimplifiedCharacteristicsSystem.prototype.determineSimpleTypes = function (characteristics) {
        return characteristics.map(function (char) {
            var nameLower = char.name.toLowerCase();
            var detectedType = 'string_only';
            var reasoning = '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç—Ä–æ–∫–∞';
            // –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ù–ù–´–ï –ü–†–ê–í–ò–õ–ê - –ë–ï–ó –°–õ–û–ñ–ù–û–ô –õ–û–ì–ò–ö–ò
            // –ß–∏—Å—Ç—ã–µ —á–∏—Å–ª–∞ (–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö)
            if (nameLower.includes('(–≥)') || nameLower.includes('(–∫–≥)') ||
                nameLower.includes('(–≤—Ç)') || nameLower.includes('(–≤)') ||
                nameLower.includes('(–æ–º)') || nameLower.includes('(–≥—Ü)') ||
                nameLower.includes('(—à—Ç)') || nameLower.includes('–≥—Ä–∞–º–º–∞—Ö')) {
                detectedType = 'pure_number';
                reasoning = '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - —á–∏—Å–ª–æ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü';
            }
            // –°—Ç—Ä–æ–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (—Ä–∞–∑–º–µ—Ä—ã, –≤—Ä–µ–º—è, –µ–º–∫–æ—Å—Ç—å)
            else if (nameLower.includes('–≤—Ä–µ–º—è') ||
                nameLower.includes('–≤—ã—Å–æ—Ç–∞') || nameLower.includes('—à–∏—Ä–∏–Ω–∞') ||
                nameLower.includes('–¥–ª–∏–Ω–∞') || nameLower.includes('–≥–ª—É–±–∏–Ω–∞') ||
                nameLower.includes('–¥–∏–∞–º–µ—Ç—Ä') || nameLower.includes('—Ç–æ–ª—â–∏–Ω–∞') ||
                nameLower.includes('–µ–º–∫–æ—Å—Ç—å') || nameLower.includes('–≥–∞—Ä–∞–Ω—Ç')) {
                detectedType = 'string_with_units';
                reasoning = '–†–∞–∑–º–µ—Ä/–≤—Ä–µ–º—è/–µ–º–∫–æ—Å—Ç—å - —Å—Ç—Ä–æ–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏';
            }
            // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            else if (nameLower.includes('—Ü–≤–µ—Ç') || nameLower.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') ||
                nameLower.includes('–±—Ä–µ–Ω–¥') || nameLower.includes('—Å—Ç—Ä–∞–Ω–∞') ||
                nameLower.includes('—Ç–∏–ø') || nameLower.includes('–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ')) {
                detectedType = 'string_only';
                reasoning = '–¢–µ–∫—Å—Ç–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞';
            }
            return {
                id: char.id,
                name: char.name,
                detectedType: detectedType,
                confidence: 0.9,
                reasoning: reasoning
            };
        });
    };
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ò–ò —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
     */
    SimplifiedCharacteristicsSystem.prototype.sendToAIWithTypes = function (productData, typedCharacteristics) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var prompt, response, data, result, cleanResult;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        prompt = this.createSimplePrompt(productData, typedCharacteristics);
                        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏...');
                        return [4 /*yield*/, fetch('https://api.anthropic.com/v1/messages', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    model: 'claude-sonnet-4-20250514',
                                    max_tokens: 4000,
                                    messages: [
                                        { role: 'user', content: prompt }
                                    ]
                                })
                            })];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        data = _b.sent();
                        result = (_a = data.content[0]) === null || _a === void 0 ? void 0 : _a.text;
                        if (!result) {
                            throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò');
                        }
                        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                        try {
                            cleanResult = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
                            return [2 /*return*/, JSON.parse(cleanResult)];
                        }
                        catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò:', error);
                            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç –ò–ò');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * –ü–†–û–°–¢–û–ô –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
     */
    SimplifiedCharacteristicsSystem.prototype.createSimplePrompt = function (productData, typedCharacteristics) {
        return "\u041F\u0440\u043E\u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0442\u043E\u0432\u0430\u0440 \u0438 \u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u0435 \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0438 \u0422\u041E\u0427\u041D\u041E \u0432 \u0443\u043A\u0430\u0437\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0430\u0445.\n\n\u0422\u041E\u0412\u0410\u0420: " + productData.productName + "\n\u0426\u0415\u041D\u0410: " + productData.price + "\u20BD\n" + (productData.referenceUrl ? "\u0421\u0421\u042B\u041B\u041A\u0410: " + productData.referenceUrl : '') + "\n" + (productData.userComments ? "\u041A\u041E\u041C\u041C\u0415\u041D\u0422\u0410\u0420\u0418\u0418: " + productData.userComments : '') + "\n\n\u0425\u0410\u0420\u0410\u041A\u0422\u0415\u0420\u0418\u0421\u0422\u0418\u041A\u0418 \u0414\u041B\u042F \u0417\u0410\u041F\u041E\u041B\u041D\u0415\u041D\u0418\u042F:\n\n" + typedCharacteristics.map(function (char, i) {
            var typeExample = char.detectedType === 'pure_number' ? '—á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 350)' :
                char.detectedType === 'string_with_units' ? '—Å—Ç—Ä–æ–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 —á–∞—Å–∞")' :
                    '—Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß–µ—Ä–Ω—ã–π")';
            return i + 1 + ". " + char.name + " (ID: " + char.id + ")\n   \u0422\u0418\u041F: " + char.detectedType.toUpperCase() + "\n   \u0424\u041E\u0420\u041C\u0410\u0422: " + typeExample;
        }).join('\n\n') + "\n\n\u041F\u0420\u0410\u0412\u0418\u041B\u0410:\n1. pure_number - \u0422\u041E\u041B\u042C\u041A\u041E \u0447\u0438\u0441\u043B\u043E \u0431\u0435\u0437 \u0435\u0434\u0438\u043D\u0438\u0446: 350 (\u041D\u0415 \"350 \u0433\")\n2. string_with_units - \u0441\u0442\u0440\u043E\u043A\u0430 \u0441 \u0435\u0434\u0438\u043D\u0438\u0446\u0430\u043C\u0438: \"2 \u0447\u0430\u0441\u0430\" (\u041D\u0415 \u0447\u0438\u0441\u043B\u043E 2)\n3. string_only - \u043E\u0431\u044B\u0447\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \"\u0427\u0435\u0440\u043D\u044B\u0439\"\n\n\u041E\u0422\u0412\u0415\u0422 \u0412 \u0424\u041E\u0420\u041C\u0410\u0422\u0415 JSON:\n{\n  \"characteristics\": [\n    {\n      \"id\": 85,\n      \"name\": \"\u0411\u0440\u0435\u043D\u0434\",\n      \"value\": \"\u043D\u0430\u0439\u0434\u0435\u043D\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\",\n      \"confidence\": 0.9,\n      \"source\": \"\u043E\u0442\u043A\u0443\u0434\u0430 \u0432\u0437\u044F\u0442\u043E\"\n    }\n  ],\n  \"seoTitle\": \"SEO \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\",\n  \"seoDescription\": \"SEO \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\",\n  \"confidence\": 0.8\n}\n\n\u041D\u0415 \u041C\u0415\u041D\u042F\u0419\u0422\u0415 \u0422\u0418\u041F\u042B! \u041E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0439\u0442\u0435 \u0422\u041E\u0427\u041D\u041E \u043A\u0430\u043A \u0443\u043A\u0430\u0437\u0430\u043D\u043E \u0432\u044B\u0448\u0435.";
    };
    /**
     * –õ–ï–ì–ö–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    SimplifiedCharacteristicsSystem.prototype.lightProcessing = function (aiCharacteristics, typedCharacteristics) {
        console.log('üîß –õ–ï–ì–ö–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ò–ò');
        return aiCharacteristics.map(function (aiChar) {
            var typeInfo = typedCharacteristics.find(function (tc) { return tc.id === aiChar.id; });
            if (!typeInfo) {
                console.warn("\u26A0\uFE0F \u0422\u0438\u043F \u0434\u043B\u044F \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0438 " + aiChar.id + " \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D");
                return __assign(__assign({}, aiChar), { type: 'string_only' });
            }
            // –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
            var finalValue = aiChar.value;
            // –¢–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å—Ç—ã—Ö —á–∏—Å–µ–ª - —É–±–∏—Ä–∞–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (typeInfo.detectedType === 'pure_number' && typeof finalValue === 'string') {
                var numMatch = finalValue.match(/(\d+(?:\.\d+)?)/);
                if (numMatch) {
                    finalValue = parseFloat(numMatch[1]);
                    console.log("\uD83D\uDD22 \u0418\u0437\u0432\u043B\u0435\u043A\u043B\u0438 \u0447\u0438\u0441\u043B\u043E \u0434\u043B\u044F " + aiChar.name + ": \"" + aiChar.value + "\" \u2192 " + finalValue);
                }
            }
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ö–ê–ö –ï–°–¢–¨
            console.log("\u2705 \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438 \u0434\u043B\u044F " + aiChar.name + ": \"" + finalValue + "\" (\u0442\u0438\u043F: " + typeInfo.detectedType + ")");
            return {
                id: aiChar.id,
                name: aiChar.name,
                value: finalValue,
                type: typeInfo.detectedType,
                confidence: aiChar.confidence || 0.8,
                source: aiChar.source || '–ò–ò –∞–Ω–∞–ª–∏–∑'
            };
        });
    };
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ ID
     */
    SimplifiedCharacteristicsSystem.prototype.getCharacteristicType = function (characteristicId) {
        // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö ID
        var knownTypes = {
            // –ß–∏—Å—Ç—ã–µ —á–∏—Å–ª–∞
            89008: 'pure_number',
            5478: 'pure_number',
            5479: 'pure_number',
            63292: 'pure_number',
            65666: 'pure_number',
            65667: 'pure_number',
            // –°—Ç—Ä–æ–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            13491: 'string_with_units',
            90746: 'string_with_units',
            90878: 'string_with_units',
            90630: 'string_with_units',
            90607: 'string_with_units',
            90608: 'string_with_units',
            // –°—Ç—Ä–æ–∫–∏
            85: 'string_only',
            91: 'string_only',
            14: 'string_only',
            372: 'string_only' // –ú–∞—Ç–µ—Ä–∏–∞–ª
        };
        return knownTypes[characteristicId] || 'string_only';
    };
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è WB API
     */
    SimplifiedCharacteristicsSystem.prototype.formatForWBAPI = function (characteristics) {
        console.log('üì¶ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è WB API - –ë–ï–ó –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏');
        return characteristics.map(function (char) {
            var wbValue = char.value;
            // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if (char.type === 'pure_number') {
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                if (typeof wbValue === 'string') {
                    var num = parseFloat(wbValue.replace(/[^\d.,]/g, '').replace(',', '.'));
                    wbValue = isNaN(num) ? 1 : num;
                }
                console.log("\uD83D\uDD22 WB \u0447\u0438\u0441\u043B\u043E " + char.name + ": " + wbValue);
            }
            else {
                // –î–ª—è —Å—Ç—Ä–æ–∫ - —Ç–æ–ª—å–∫–æ trim
                wbValue = String(wbValue).trim();
                console.log("\uD83D\uDCDD WB \u0441\u0442\u0440\u043E\u043A\u0430 " + char.name + ": \"" + wbValue + "\"");
            }
            return {
                id: char.id,
                name: char.name,
                value: wbValue
            };
        });
    };
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
     */
    SimplifiedCharacteristicsSystem.prototype.validateCharacteristics = function (characteristics, allCharacteristics) {
        var filled = characteristics.length;
        var total = allCharacteristics.length;
        var fillRate = Math.round((filled / total) * 100);
        var requiredChars = allCharacteristics.filter(function (c) { return c.isRequired; });
        var filledRequiredIds = characteristics.map(function (c) { return c.id; });
        var missingRequired = requiredChars.filter(function (rc) { return !filledRequiredIds.includes(rc.id); });
        var warnings = [];
        if (fillRate < 50) {
            warnings.push("\u041D\u0438\u0437\u043A\u0430\u044F \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0441\u0442\u044C: " + fillRate + "%");
        }
        if (missingRequired.length > 0) {
            warnings.push("\u041D\u0435 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043E " + missingRequired.length + " \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A");
        }
        return { fillRate: fillRate, missingRequired: missingRequired, warnings: warnings };
    };
    return SimplifiedCharacteristicsSystem;
}());
exports.SimplifiedCharacteristicsSystem = SimplifiedCharacteristicsSystem;
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
var IntegratedCharacteristicsProcessor = /** @class */ (function () {
    function IntegratedCharacteristicsProcessor() {
        this.simplifiedSystem = new SimplifiedCharacteristicsSystem();
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ë–ï–ó –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    IntegratedCharacteristicsProcessor.prototype.processAgentResults = function (agentResult, categoryCharacteristics) {
        return __awaiter(this, void 0, Promise, function () {
            var typedCharacteristics_1, processedChars;
            return __generator(this, function (_a) {
                console.log('üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
                try {
                    typedCharacteristics_1 = this.simplifiedSystem['determineSimpleTypes'](categoryCharacteristics);
                    processedChars = agentResult.finalResult.characteristics.map(function (agentChar) {
                        var typeInfo = typedCharacteristics_1.find(function (tc) { return tc.id === agentChar.id; });
                        var categoryChar = categoryCharacteristics.find(function (cc) { return cc.id === agentChar.id; });
                        if (!typeInfo || !categoryChar) {
                            console.warn("\u26A0\uFE0F \u0425\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0430 " + agentChar.id + " \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430 \u0432 \u0442\u0438\u043F\u0430\u0445 \u0438\u043B\u0438 \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438");
                            return null;
                        }
                        // –°–û–•–†–ê–ù–Ø–ï–ú –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞ –ö–ê–ö –ï–°–¢–¨
                        var finalValue = agentChar.value;
                        // –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —á–∏—Å–µ–ª
                        if (typeInfo.detectedType === 'pure_number' && typeof finalValue === 'string') {
                            var numMatch = String(finalValue).match(/(\d+(?:\.\d+)?)/);
                            if (numMatch) {
                                finalValue = parseFloat(numMatch[1]);
                                console.log("\uD83D\uDD22 \u041A\u043E\u0440\u0440\u0435\u043A\u0446\u0438\u044F \u0447\u0438\u0441\u043B\u0430 " + agentChar.name + ": \"" + agentChar.value + "\" \u2192 " + finalValue);
                            }
                        }
                        console.log("\u2705 \u0421\u041E\u0425\u0420\u0410\u041D\u0418\u041B\u0418 \u043E\u0442 \u0430\u0433\u0435\u043D\u0442\u0430 " + agentChar.name + ": \"" + finalValue + "\" (" + typeInfo.detectedType + ")");
                        return {
                            id: agentChar.id,
                            name: categoryChar.name,
                            value: finalValue,
                            type: typeInfo.detectedType,
                            confidence: agentChar.confidence || 0.8,
                            source: agentChar.source || '–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
                        };
                    }).filter(Boolean);
                    return [2 /*return*/, {
                            characteristics: processedChars,
                            seoTitle: agentResult.finalResult.seoTitle || '–¢–æ–≤–∞—Ä',
                            seoDescription: agentResult.finalResult.seoDescription || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                            totalProcessed: processedChars.length,
                            confidence: agentResult.confidence || 0.8
                        }];
                }
                catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    return IntegratedCharacteristicsProcessor;
}());
exports.IntegratedCharacteristicsProcessor = IntegratedCharacteristicsProcessor;
exports.simplifiedCharacteristicsSystem = new SimplifiedCharacteristicsSystem();
exports.integratedProcessor = new IntegratedCharacteristicsProcessor();
