// lib/services/geminiService.ts - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

import OpenAI from 'openai';

interface ContentPart {
  text?: string;
  inlineData?: {
    mimeType: string;
    data: string;
  };
}

interface ProductAnalysisInput {
  productName: string;
  images: string[];
  packageContents?: string; 
  referenceData?: any;
  dimensions: {
    length?: string;
    width?: string;
    height?: string;
    weight?: string;
  };
  price: number;
}

interface ProductAnalysisResult {
  visualAnalysis: {
    productType: string;
    tnvedCode?: string;
    primaryColor: string;
    material: string;
    style: string;
    keyFeatures: string[];
    targetAudience: string;
    confidence: number;
    detailedDescription?: string;
    categoryKeywords?: string[];
  };
  categoryAnalysis?: {
    primaryCategory: string;
    secondaryCategories: string[];
    categoryConfidence: number;
    reasonForCategory: string;
  };
  seoTitle: string;
  seoDescription: string;
  characteristics: { id: number; value: string; }[];
  suggestedKeywords: string[];
  competitiveAdvantages: string[];
  tnvedCode?: string;
  wbCategory: string;
  marketingInsights: {
    pricePosition: string;
    uniqueSellingPoints: string[];
    targetAgeGroup: string;
    seasonality: string;
  };
}

export class GeminiService {
  private openai: OpenAI;
  private model: string;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    this.openai = new OpenAI({ apiKey });
    this.model = process.env.OPENAI_MODEL || 'gpt-4o';
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
   async analyzeProductForWB(input: ProductAnalysisInput): Promise<ProductAnalysisResult> {
    try {
      console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¢–ù –í–≠–î...');
      const prompt = this.createEnhancedAnalysisPrompt(input);
      const parts = await this.prepareParts(prompt, input.images);
      const text = await this.sendToOpenAI(parts);
      const analysisResult = this.parseGeminiResponse(text);
      const enhancedResult = this.enhanceAnalysisResult(analysisResult, input);
      return enhancedResult;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private createEnhancedAnalysisPrompt(input: ProductAnalysisInput): string {
    return `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Wildberries. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é WB –∏ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î.

–î–ê–ù–ù–´–ï –¢–û–í–ê–†–ê:
- **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${input.productName}
- **–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:** ${input.packageContents || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
- **–¶–µ–Ω–∞:** ${input.price} ‚ÇΩ
${input.referenceData ? `- **–î–ê–ù–ù–´–ï –ê–ù–ê–õ–û–ì–ê:**\n  * –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${input.referenceData.category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` : ''}

–û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò WILDBERRIES:
1. **–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞** - –∑–∞—Ä—è–¥–∫–∏, –∫–∞–±–µ–ª–∏, –≥–∞–¥–∂–µ—Ç—ã
2. **–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å**
3. **–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞**
4. **–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã**

–ó–ê–î–ê–ß–ê:
1. **–ò–∑—É—á–∏ —Ç–æ–≤–∞—Ä:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
2. **–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–¥ –¢–ù –í–≠–î:** –ù–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —É–∫–∞–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –î–ª—è USB-–∫–∞–±–µ–ª—è —ç—Ç–æ –æ–±—ã—á–Ω–æ 8544429009.
3. **–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é WB:** –í—ã–±–µ—Ä–∏ —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.
4. **–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è** –≤ JSON-–æ—Ç–≤–µ—Ç–µ.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Å—Ç—Ä–æ–≥–æ JSON:
{
  "visualAnalysis": {
    "productType": "—Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞",
    "primaryColor": "–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç",
    "material": "–º–∞—Ç–µ—Ä–∏–∞–ª",
    "style": "—Å—Ç–∏–ª—å",
    "keyFeatures": ["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2"],
    "targetAudience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", 
    "confidence": 95
  },
  "wbCategory": "–¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB",
  "tnvedCode": "10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î",
  "seoTitle": "SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤)",
  "seoDescription": "SEO –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)",
  "characteristics": [],
  "suggestedKeywords": ["–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 1", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 2"],
  "competitiveAdvantages": ["–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2"],
  "marketingInsights": {
    "pricePosition": "–±—é–¥–∂–µ—Ç–Ω—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–ø—Ä–µ–º–∏—É–º",
    "uniqueSellingPoints": ["–£–¢–ü 1"],
    "targetAgeGroup": "–≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
    "seasonality": "—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å"
  }
}

–í–ê–ñ–ù–û: –ü–æ–ª–µ "tnvedCode" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é.`;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Å—Ç–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private async prepareParts(prompt: string, imageUrls: string[]): Promise<ContentPart[]> {
    const parts: ContentPart[] = [{ text: prompt }];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const validImageUrls = imageUrls
      .filter(url => url && typeof url === 'string')
      .filter(url => this.isValidImageUrl(url))
      .slice(0, 4); // –ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    console.log(`üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${validImageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ${imageUrls.length}`);

    for (const imageUrl of validImageUrls) {
      try {
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl.substring(0, 100)}...`);
        
        const imageData = await this.fetchImageAsBase64(imageUrl);
        parts.push({
          inlineData: {
            mimeType: this.getMimeTypeFromUrl(imageUrl),
            data: imageData
          }
        });
        
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageUrl}:`, error);
        continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      }
    }

    console.log(`üì∏ –ò—Ç–æ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${parts.length - 1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    return parts;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ base64
   */
  private async fetchImageAsBase64(imageUrl: string): Promise<string> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ data URL
      if (imageUrl.startsWith('data:')) {
        const base64Data = imageUrl.split(',')[1];
        if (base64Data) {
          return base64Data;
        }
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π data URL');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ placeholder URL
      if (imageUrl.includes('placeholder.example.com')) {
        throw new Error('Placeholder URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      const response = await fetch(imageUrl, {
        signal: AbortSignal.timeout(10000), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; WB-Image-Loader/1.0)'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const arrayBuffer = await response.arrayBuffer();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (arrayBuffer.byteLength > 10 * 1024 * 1024) {
        throw new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>10MB)');
      }
      
      const buffer = Buffer.from(arrayBuffer);
      return buffer.toString('base64');
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error}`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ URL
   */
  private getMimeTypeFromUrl(url: string): string {
    // –î–ª—è data URLs –∏–∑–≤–ª–µ–∫–∞–µ–º MIME —Ç–∏–ø
    if (url.startsWith('data:')) {
      const mimeMatch = url.match(/^data:([^;]+)/);
      return mimeMatch ? mimeMatch[1] : 'image/jpeg';
    }

    const extension = url.split('.').pop()?.toLowerCase();
    switch (extension) {
      case 'jpg':
      case 'jpeg':
        return 'image/jpeg';
      case 'png':
        return 'image/png';
      case 'webp':
        return 'image/webp';
      case 'gif':
        return 'image/gif';
      default:
        return 'image/jpeg';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private isValidImageUrl(url: string): boolean {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º data URLs
      if (url.startsWith('data:image/')) {
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ URLs
      const urlObj = new URL(url);
      
      // –ò—Å–∫–ª—é—á–∞–µ–º placeholder URLs
      if (urlObj.hostname.includes('placeholder') || urlObj.hostname.includes('example.com')) {
        return false;
      }

      const validExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];
      return validExtensions.some(ext =>
        urlObj.pathname.toLowerCase().includes(ext)
      );
    } catch {
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
   */
  private async sendToOpenAI(parts: ContentPart[]): Promise<string> {
    const content = parts.map(part => {
      if (part.text) {
        return { type: 'text' as const, text: part.text };
      }
      if (part.inlineData) {
        return {
          type: 'image_url' as const,
          image_url: {
            url: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`
          }
        };
      }
      return { type: 'text' as const, text: '' };
    });

    const response = await this.openai.chat.completions.create({
      model: this.model,
      messages: [
        {
          role: 'user',
          content
        }
      ],
      temperature: 0.3, // –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      max_tokens: 2000
    });

    return response.choices[0]?.message?.content || '';
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
   */
  private parseGeminiResponse(text: string): ProductAnalysisResult {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏
      const cleanText = text
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .replace(/^[^{]*/, '')
        .replace(/[^}]*$/, '');

      const parsed = JSON.parse(cleanText);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!parsed.visualAnalysis || !parsed.seoTitle || !parsed.seoDescription || 
          !parsed.wbCategory || !Array.isArray(parsed.characteristics)) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò');
      }

      return parsed as ProductAnalysisResult;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', error);
      console.error('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:', text.substring(0, 500));
      
      return this.createFallbackResult();
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
   */
  private enhanceAnalysisResult(result: ProductAnalysisResult, input: ProductAnalysisInput): ProductAnalysisResult {
    console.log('üîß –£–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞...');

    // –ï—Å–ª–∏ categoryAnalysis –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!result.categoryAnalysis) {
      result.categoryAnalysis = {
        primaryCategory: result.wbCategory,
        secondaryCategories: [],
        categoryConfidence: 75,
        reasonForCategory: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const correctedCategory = this.validateAndCorrectCategory(
      result.wbCategory,
      input.productName,
      result.visualAnalysis?.categoryKeywords || [],
      input.referenceData
    );

    if (correctedCategory !== result.wbCategory) {
      console.log(`üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${result.wbCategory} ‚Üí ${correctedCategory}`);
      result.wbCategory = correctedCategory;
      result.categoryAnalysis.primaryCategory = correctedCategory;
      result.categoryAnalysis.reasonForCategory += ' (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º)';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    result.characteristics = this.enhanceCharacteristics(result.characteristics, input);

    // –£–ª—É—á—à–∞–µ–º SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result.seoTitle = this.enhanceSeoTitle(result.seoTitle, correctedCategory, input.productName);

    return result;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private validateAndCorrectCategory(
    aiCategory: string,
    productName: string,
    categoryKeywords: string[],
    referenceData?: any
  ): string {
    const name = productName.toLowerCase();
    const keywords = categoryKeywords.map(k => k.toLowerCase());
    
    // –ö–∞—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏)
    const categoryMappings = {
      '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': [
        '–∫–∞–±–µ–ª—å', 'cable', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'usb', 'type-c', 'lightning', 'micro',
        '–∑–∞—Ä—è–¥–Ω–æ–µ', '–∑–∞—Ä—è–¥–∫–∞', 'charger', '–∞–¥–∞–ø—Ç–µ—Ä', 'adapter', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫',
        '–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones', 'bluetooth', '–∫–æ–ª–æ–Ω–∫–∞', 'speaker',
        '—Ç–µ–ª–µ—Ñ–æ–Ω', 'phone', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–ø–ª–∞–Ω—à–µ—Ç', 'tablet',
        '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π', 'electric', 'electronic',
        '–≥–∞–¥–∂–µ—Ç', '–¥–µ–≤–∞–π—Å', 'device', '—Ç–µ—Ö–Ω–∏–∫–∞', 'technology'
      ],
      '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã': [
        '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–¥–ª—è –∞–≤—Ç–æ',
        '–≤ –º–∞—à–∏–Ω—É', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏'
      ],
      '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': [
        '—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–ø–ª–∞—Ç—å–µ', '–¥–∂–∏–Ω—Å—ã', '–±—Ä—é–∫–∏', '–∫—É—Ä—Ç–∫–∞',
        '—Å–≤–∏—Ç–µ—Ä', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–±–æ—Ç–∏–Ω–∫–∏', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏', '–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å'
      ]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ)
    for (const [category, keywordsList] of Object.entries(categoryMappings)) {
      const matches = keywordsList.filter(keyword => 
        name.includes(keyword) || keywords.some(k => k.includes(keyword))
      );

      if (matches.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}": ${matches.join(', ')}`);
        return category;
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ò–ò, –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
    return aiCategory;
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  private enhanceCharacteristics(
    characteristics: Array<{ id: number; value: string }>,
    input: ProductAnalysisInput
  ): Array<{ id: number; value: string }> {
    const charMap = new Map<number, string>();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    characteristics.forEach(char => {
      charMap.set(char.id, char.value);
    });

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const requiredDefaults = {
      8229: input.referenceData?.brand || 'NoName', // –ë—Ä–µ–Ω–¥
      7919: '–†–æ—Å—Å–∏—è', // –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
      14863: '–Ω–µ —É–∫–∞–∑–∞–Ω' // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Object.entries(requiredDefaults).forEach(([id, value]) => {
      const numId = Number(id);
      if (!charMap.has(numId)) {
        charMap.set(numId, value);
      }
    });

    // –†–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (input.dimensions.length) charMap.set(16999, input.dimensions.length);
    if (input.dimensions.width) charMap.set(17001, input.dimensions.width);
    if (input.dimensions.height) charMap.set(17003, input.dimensions.height);
    if (input.dimensions.weight) {
      charMap.set(17005, String(Math.round(Number(input.dimensions.weight) * 1000)));
    }

    return Array.from(charMap, ([id, value]) => ({ id, value }));
  }

  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ SEO –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  private enhanceSeoTitle(currentTitle: string, category: string, productName: string): string {
    let title = currentTitle;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const categoryFirstWord = category.split(' ')[0].toLowerCase();
    if (!title.toLowerCase().includes(categoryFirstWord)) {
      title = `${categoryFirstWord} ${title}`;
    }

    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤
    return title.substring(0, 60).trim();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  private createFallbackResult(): ProductAnalysisResult {
    return {
      visualAnalysis: {
        productType: '–¢–æ–≤–∞—Ä',
        primaryColor: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        material: '–ù–µ —É–∫–∞–∑–∞–Ω',
        style: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
        keyFeatures: ['–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞'],
        targetAudience: '–®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        confidence: 50,
        detailedDescription: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        categoryKeywords: []
      },
      categoryAnalysis: {
        primaryCategory: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
        secondaryCategories: [],
        categoryConfidence: 50,
        reasonForCategory: '–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞'
      },
      seoTitle: '–¢–æ–≤–∞—Ä –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ',
      seoDescription: `‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π

–ò–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.

–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É!`,
      characteristics: [
        { id: 14863, value: "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" },
        { id: 7174, value: "–Ω–µ —É–∫–∞–∑–∞–Ω" },
        { id: 8229, value: "NoName" },
        { id: 7919, value: "–†–æ—Å—Å–∏—è" },
        { id: 16999, value: "30" },
        { id: 17001, value: "20" },
        { id: 17003, value: "10" },
        { id: 17005, value: "500" }
      ],
      suggestedKeywords: ['—Ç–æ–≤–∞—Ä', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Ü–µ–Ω–∞'],
      competitiveAdvantages: ['–î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞', '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', '–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞'],
      wbCategory: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      marketingInsights: {
        pricePosition: '–°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç',
        uniqueSellingPoints: ['–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
        targetAgeGroup: '18-65 –ª–µ—Ç',
        seasonality: '–ö—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω—ã–π'
      }
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   */
  async analyzeCompetitors(competitorData: any[]): Promise<any> {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ Wildberries –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:

–î–ê–ù–ù–´–ï –ö–û–ù–ö–£–†–ï–ù–¢–û–í:
${JSON.stringify(competitorData, null, 2)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:
1. –¶–µ–Ω–æ–≤–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
2. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
3. –°—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø–∏—Å–∞–Ω–∏–π
4. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "priceAnalysis": {
    "averagePrice": "—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
    "priceRange": "–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω",
    "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ"
  },
  "keywordAnalysis": {
    "popularKeywords": ["–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"],
    "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
  },
  "contentAnalysis": {
    "commonPatterns": ["–æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö"],
    "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
  },
  "overallRecommendations": ["–æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
}`;

      const text = await this.sendToOpenAI([{ text: prompt }]);
      return JSON.parse(text);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      return { 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
        fallbackRecommendations: [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏',
          '–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
        ]
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  async generateTitleVariations(productInfo: string, count: number = 5): Promise<string[]> {
    try {
      const prompt = `–°–æ–∑–¥–∞–π ${count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ SEO-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries:

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï: ${productInfo}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤
- –†–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
- –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –í–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞

–û—Ç–≤–µ—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: ["–∑–∞–≥–æ–ª–æ–≤–æ–∫1", "–∑–∞–≥–æ–ª–æ–≤–æ–∫2", ...]`;

      const text = await this.sendToOpenAI([{ text: prompt }]);
      const cleanText = text.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      return JSON.parse(cleanText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error);
      return [
        '–¢–æ–≤–∞—Ä –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ',
        '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π',
        '–ù–∞–¥–µ–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        '–í—ã–≥–æ–¥–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞'
      ];
    }
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async analyzeProductCategory(
    productName: string,
    images: string[],
    referenceData?: any
  ): Promise<{
    category: string;
    confidence: number;
    alternatives: string[];
    reasoning: string;
  }> {
    try {
      const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ –¢–û–ß–ù–£–Æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Wildberries –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.

–¢–û–í–ê–†: ${productName}
${referenceData ? `–ê–ù–ê–õ–û–ì: ${referenceData.name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${referenceData.category})` : ''}

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò WB:
- –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
- –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å  
- –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
- –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
- –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö
- –ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã
- –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
- –Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å "–∫–∞–±–µ–ª—å", "USB", "–∑–∞—Ä—è–¥–∫–∞", "–ø—Ä–æ–≤–æ–¥" - —ç—Ç–æ –≠–õ–ï–ö–¢–†–û–ù–ò–ö–ê!

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –û—Ç–≤–µ—Ç—å –≤ JSON:
{
  "category": "—Ç–æ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
  "confidence": 95,
  "alternatives": ["–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞1", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞2"],
  "reasoning": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
}`;

      const parts = await this.prepareParts(prompt, images);
      const text = await this.sendToOpenAI(parts);
      
      const cleanText = text.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      return JSON.parse(cleanText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return {
        category: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
        confidence: 50,
        alternatives: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'],
        reasoning: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
      };
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  async optimizeDescription(
    currentDescription: string, 
    competitorData?: any[], 
    targetKeywords?: string[]
  ): Promise<string> {
    try {
      const prompt = `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è Wildberries:

–¢–ï–ö–£–©–ï–ï –û–ü–ò–°–ê–ù–ò–ï:
${currentDescription}

${competitorData ? `–î–ê–ù–ù–´–ï –ö–û–ù–ö–£–†–ï–ù–¢–û–í:
${JSON.stringify(competitorData, null, 2)}` : ''}

${targetKeywords ? `–¶–ï–õ–ï–í–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:
${targetKeywords.join(', ')}` : ''}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤
- SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—É–Ω–∫—Ç–∞–º–∏
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.`;

      const text = await this.sendToOpenAI([{ text: prompt }]);
      return text.trim();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
      return currentDescription;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
   */
  async analyzeSeasonality(productType: string, category: string): Promise<any> {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞:

–¢–ò–ü –¢–û–í–ê–†–ê: ${productType}
–ö–ê–¢–ï–ì–û–†–ò–Ø: ${category}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∑–æ–Ω—ã –ø—Ä–æ–¥–∞–∂
2. –ü–∏–∫–∏ —Å–ø—Ä–æ—Å–∞
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
4. –°–µ–∑–æ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "seasonality": "–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω—ã–π|—Å–µ–∑–æ–Ω–Ω—ã–π|–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π",
  "peakSeasons": ["–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∑–æ–Ω—ã"],
  "bestPublishTime": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
  "seasonalKeywords": ["—Å–µ–∑–æ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"],
  "demandForecast": "–ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞"
}`;

      const text = await this.sendToOpenAI([{ text: prompt }]);
      return JSON.parse(text);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏:', error);
      return {
        seasonality: '–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω—ã–π',
        peakSeasons: ['–≤–µ—Å—å –≥–æ–¥'],
        bestPublishTime: '–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è',
        seasonalKeywords: [],
        demandForecast: '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å'
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const geminiService = new GeminiService();