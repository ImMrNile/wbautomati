// lib/services/wbCategoryService.ts
import { hybridWBParser } from './hybridWBParser';

interface WBCategory {
  objectID: number;
  objectName: string;
  parentID: number;
  parentName: string;
  isLeaf: boolean;
  path?: string[];
  keywords?: string[];
}

interface CategorySearchResult {
  category: WBCategory;
  score: number;
  reason: string;
  path: string;
}

export class WBCategoryService {
  private categoriesCache: WBCategory[] = [];
  private lastCacheUpdate: number = 0;
  private readonly CACHE_TTL = 3600000; // 1 —á–∞—Å

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getAllCategories(apiToken?: string): Promise<WBCategory[]> {
    const now = Date.now();
    
    if (this.categoriesCache.length > 0 && (now - this.lastCacheUpdate) < this.CACHE_TTL) {
      return this.categoriesCache;
    }

    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB...');
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
      if (apiToken) {
        const response = await fetch('https://content-api.wildberries.ru/content/v2/object/all', {
          headers: {
            'Authorization': apiToken,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          this.categoriesCache = this.processCategories(data.data || []);
          this.lastCacheUpdate = now;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.categoriesCache.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
          return this.categoriesCache;
        }
      }

      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      return this.getEnhancedStaticCategories();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return this.getEnhancedStaticCategories();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–µ–π
   */
  private processCategories(rawCategories: any[]): WBCategory[] {
    const categoriesMap = new Map<number, WBCategory>();
    
    // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    rawCategories.forEach(cat => {
      categoriesMap.set(cat.objectID, {
        objectID: cat.objectID,
        objectName: cat.objectName,
        parentID: cat.parentID || 0,
        parentName: cat.parentName || '',
        isLeaf: cat.isLeaf || false,
        keywords: this.extractKeywords(cat.objectName)
      });
    });

    // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - —Å—Ç—Ä–æ–∏–º –ø—É—Ç–∏
    categoriesMap.forEach(category => {
      category.path = this.buildCategoryPath(category, categoriesMap);
    });

    return Array.from(categoriesMap.values());
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private buildCategoryPath(category: WBCategory, categoriesMap: Map<number, WBCategory>): string[] {
    const path: string[] = [category.objectName];
    let current = category;
    
    while (current.parentID && current.parentID !== 0) {
      const parent = categoriesMap.get(current.parentID);
      if (parent) {
        path.unshift(parent.objectName);
        current = parent;
      } else {
        break;
      }
    }
    
    return path;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private extractKeywords(categoryName: string): string[] {
    const name = categoryName.toLowerCase();
    const keywords: string[] = [name];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = name.split(/[\s,–∏-]+/).filter(w => w.length > 2);
    keywords.push(...words);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    const synonyms: Record<string, string[]> = {
      '–∫–∞–±–µ–ª–∏': ['–∫–∞–±–µ–ª—å', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä'],
      '–∑–∞—Ä—è–¥–Ω—ã–µ': ['–∑–∞—Ä—è–¥–∫–∞', '–∑–∞—Ä—è–¥–Ω–æ–µ', 'charger'],
      '–∞–¥–∞–ø—Ç–µ—Ä—ã': ['–∞–¥–∞–ø—Ç–µ—Ä', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫', 'adapter'],
      '–Ω–∞—É—à–Ω–∏–∫–∏': ['–Ω–∞—É—à–Ω–∏–∫', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', 'headphones'],
      '—á–µ—Ö–ª—ã': ['—á–µ—Ö–æ–ª', '–∫–µ–π—Å', 'case'],
      '–∑–∞—â–∏—Ç–Ω—ã–µ': ['–∑–∞—â–∏—Ç–∞', '–∑–∞—â–∏—Ç–Ω—ã–π', '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä']
    };

    Object.entries(synonyms).forEach(([key, values]) => {
      if (name.includes(key)) {
        keywords.push(...values);
      }
    });

    return [...new Set(keywords)];
  }

  /**
   * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
   */
  async findBestCategory(
    productName: string,
    productType: string,
    aiSuggestedCategory?: string,
    referenceCategory?: string,
    apiToken?: string
  ): Promise<CategorySearchResult> {
    console.log('\nüéØ === –ü–û–ò–°–ö –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò ===');
    console.log(`üì¶ –¢–æ–≤–∞—Ä: "${productName}"`);
    console.log(`üè∑Ô∏è –¢–∏–ø: "${productType}"`);
    if (aiSuggestedCategory) console.log(`ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: "${aiSuggestedCategory}"`);
    if (referenceCategory) console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceCategory}"`);

    const categories = await this.getAllCategories(apiToken);
    const searchResults: CategorySearchResult[] = [];

    // 1. –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å –ò–ò
    if (aiSuggestedCategory) {
      const aiResults = this.searchByExactMatch(aiSuggestedCategory, categories);
      searchResults.push(...aiResults);
    }

    // 2. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Ç–æ–≤–∞—Ä–∞
    const keywordResults = this.searchByProductKeywords(productName, productType, categories);
    searchResults.push(...keywordResults);

    // 3. –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–æ–≥–∞ (—Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
    if (referenceCategory && !this.isGenericCategory(referenceCategory)) {
      const refResults = this.searchByExactMatch(referenceCategory, categories);
      refResults.forEach(r => r.score *= 0.6); // –ü–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      searchResults.push(...refResults);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    searchResults.sort((a, b) => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–∏—Å—Ç–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (a.category.isLeaf !== b.category.isLeaf) {
        return a.category.isLeaf ? -1 : 1;
      }
      return b.score - a.score;
    });

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (searchResults.length > 0) {
      const best = searchResults[0];
      console.log(`\nüèÜ –í–´–ë–†–ê–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø:`);
      console.log(`üìÇ ${best.path}`);
      console.log(`üÜî ID: ${best.category.objectID}`);
      console.log(`üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${best.score}%`);
      console.log(`üí° –ü—Ä–∏—á–∏–Ω–∞: ${best.reason}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
      if (searchResults.length > 1) {
        console.log(`\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:`);
        searchResults.slice(1, 4).forEach((r, i) => {
          console.log(`   ${i + 2}. ${r.path} (${r.score}%)`);
        });
      }
      
      return best;
    }

    // Fallback
    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    return this.getFallbackCategory(productName, productType);
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
   */
  private searchByExactMatch(searchTerm: string, categories: WBCategory[]): CategorySearchResult[] {
    const results: CategorySearchResult[] = [];
    const searchLower = searchTerm.toLowerCase().trim();

    categories.forEach(category => {
      const nameLower = category.objectName.toLowerCase();
      let score = 0;
      let reason = '';

      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (nameLower === searchLower) {
        score = 100;
        reason = '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è';
      }
      // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
      else if (nameLower.includes(searchLower)) {
        score = 80;
        reason = '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è';
      }
      // –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      else if (searchLower.includes(nameLower) && nameLower.length > 4) {
        score = 70;
        reason = '–û–±—Ä–∞—Ç–Ω–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ';
      }

      if (score > 0) {
        results.push({
          category,
          score,
          reason,
          path: category.path?.join(' > ') || category.objectName
        });
      }
    });

    return results;
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Ç–æ–≤–∞—Ä–∞
   */
  private searchByProductKeywords(productName: string, productType: string, categories: WBCategory[]): CategorySearchResult[] {
    const results: CategorySearchResult[] = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const productKeywords = this.extractProductKeywords(productName, productType);
    
    categories.forEach(category => {
      if (!category.keywords) return;

      let matchCount = 0;
      const matchedKeywords: string[] = [];

      // –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      productKeywords.forEach(productKeyword => {
        if (category.keywords!.some(catKeyword => 
          catKeyword.includes(productKeyword) || productKeyword.includes(catKeyword)
        )) {
          matchCount++;
          matchedKeywords.push(productKeyword);
        }
      });

      if (matchCount > 0) {
        const score = Math.min(95, 50 + (matchCount * 15));
        results.push({
          category,
          score,
          reason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${matchedKeywords.join(', ')}`,
          path: category.path?.join(' > ') || category.objectName
        });
      }
    });

    return results;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  private extractProductKeywords(productName: string, productType: string): string[] {
    const text = `${productName} ${productType}`.toLowerCase();
    const keywords: string[] = [];

    // –ö–∞—Ä—Ç–∞ –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const keywordPatterns: Record<string, string[]> = {
      '–∫–∞–±–µ–ª—å': ['–∫–∞–±–µ–ª—å', 'cable', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'wire'],
      '–∑–∞—Ä—è–¥–∫–∞': ['–∑–∞—Ä—è–¥–∫–∞', '–∑–∞—Ä—è–¥–Ω–æ–µ', 'charger', 'charging'],
      'usb': ['usb', '—é—Å–±', 'usb-a', 'usb-c', 'type-c', 'lightning', 'micro'],
      '–∞–¥–∞–ø—Ç–µ—Ä': ['–∞–¥–∞–ø—Ç–µ—Ä', 'adapter', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫', '–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä'],
      '–Ω–∞—É—à–Ω–∏–∫–∏': ['–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', 'earphones'],
      '—á–µ—Ö–æ–ª': ['—á–µ—Ö–æ–ª', 'case', '–∫–µ–π—Å', 'cover'],
      '–ø–ª–µ–Ω–∫–∞': ['–ø–ª–µ–Ω–∫–∞', '—Å—Ç–µ–∫–ª–æ', '–∑–∞—â–∏—Ç–∞', '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä'],
      '–¥–µ—Ä–∂–∞—Ç–µ–ª—å': ['–¥–µ—Ä–∂–∞—Ç–µ–ª—å', 'holder', '–∫—Ä–µ–ø–ª–µ–Ω–∏–µ', 'mount'],
      'power': ['power', 'bank', '–ø–æ–≤–µ—Ä–±–∞–Ω–∫', '–±–∞—Ç–∞—Ä–µ—è', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä']
    };

    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
    Object.entries(keywordPatterns).forEach(([key, patterns]) => {
      if (patterns.some(pattern => text.includes(pattern))) {
        keywords.push(key);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns.forEach(pattern => {
          if (text.includes(pattern)) {
            keywords.push(pattern);
          }
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const words = text.split(/[\s,-]+/).filter(w => w.length > 2);
    keywords.push(...words);

    return [...new Set(keywords)];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   */
  private isGenericCategory(categoryName: string): boolean {
    const genericCategories = [
      '—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
      '—Ä–∞–∑–Ω–æ–µ',
      '–ø—Ä–æ—á–µ–µ',
      '–¥—Ä—É–≥–æ–µ',
      '–æ–±—â–µ–µ'
    ];
    
    const nameLower = categoryName.toLowerCase();
    return genericCategories.some(generic => nameLower.includes(generic));
  }

  /**
   * Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  private getFallbackCategory(productName: string, productType: string): CategorySearchResult {
    const nameLower = `${productName} ${productType}`.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (nameLower.match(/–∫–∞–±–µ–ª—å|–∑–∞—Ä—è–¥–∫|usb|type-c|–ø—Ä–æ–≤–æ–¥|–∞–¥–∞–ø—Ç–µ—Ä/)) {
      return {
        category: {
          objectID: 9835,
          objectName: '–ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
          parentID: 4830,
          parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
          isLeaf: true,
          path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤']
        },
        score: 50,
        reason: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–±–µ–ª–µ–π',
        path: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ > –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ > –ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤'
      };
    }

    // –û–±—â–∏–π fallback
    return {
      category: {
        objectID: 4830,
        objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        parentID: 429,
        parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        isLeaf: false,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤']
      },
      score: 25,
      reason: '–û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      path: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ > –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤'
    };
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
   */
  private getEnhancedStaticCategories(): WBCategory[] {
    return [
      // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      {
        objectID: 429,
        objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        parentID: 0,
        parentName: '',
        isLeaf: false,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'],
        keywords: ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–≥–∞–¥–∂–µ—Ç—ã', '—Ç–µ—Ö–Ω–∏–∫–∞']
      },
      
      // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      {
        objectID: 4830,
        objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        parentID: 429,
        parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        isLeaf: false,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤'],
        keywords: ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π']
      },
      
      // –ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–ª–∏—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
      {
        objectID: 9835,
        objectName: '–ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ö–∞–±–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤'],
        keywords: ['–∫–∞–±–µ–ª—å', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'usb', 'type-c', 'lightning', 'micro', '–∑–∞—Ä—è–¥–∫–∞']
      },
      
      // –ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      {
        objectID: 9836,
        objectName: '–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],
        keywords: ['–∑–∞—Ä—è–¥–∫–∞', '–∑–∞—Ä—è–¥–Ω–æ–µ', 'charger', '–∞–¥–∞–ø—Ç–µ—Ä', '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è']
      },
      
      // –ß–µ—Ö–ª—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      {
        objectID: 165695,
        objectName: '–ß–µ—Ö–ª—ã',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ß–µ—Ö–ª—ã'],
        keywords: ['—á–µ—Ö–æ–ª', 'case', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞']
      },
      
      // –ó–∞—â–∏—Ç–Ω—ã–µ —Å—Ç–µ–∫–ª–∞ –∏ –ø–ª–µ–Ω–∫–∏
      {
        objectID: 62795,
        objectName: '–ó–∞—â–∏—Ç–Ω—ã–µ —Å—Ç–µ–∫–ª–∞ –∏ –ø–ª–µ–Ω–∫–∏',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ó–∞—â–∏—Ç–Ω—ã–µ —Å—Ç–µ–∫–ª–∞ –∏ –ø–ª–µ–Ω–∫–∏'],
        keywords: ['—Å—Ç–µ–∫–ª–æ', '–ø–ª–µ–Ω–∫–∞', '–∑–∞—â–∏—Ç–∞', '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä', '—ç–∫—Ä–∞–Ω']
      },
      
      // –ù–∞—É—à–Ω–∏–∫–∏
      {
        objectID: 340,
        objectName: '–ù–∞—É—à–Ω–∏–∫–∏',
        parentID: 429,
        parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ù–∞—É—à–Ω–∏–∫–∏'],
        keywords: ['–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', 'headphones', 'earphones', 'airpods']
      },
      
      // Power Bank
      {
        objectID: 4695,
        objectName: '–í–Ω–µ—à–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–í–Ω–µ—à–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã'],
        keywords: ['powerbank', '–ø–æ–≤–µ—Ä–±–∞–Ω–∫', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä', '–±–∞—Ç–∞—Ä–µ—è', '–≤–Ω–µ—à–Ω–∏–π']
      },
      
      // –î–µ—Ä–∂–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      {
        objectID: 4831,
        objectName: '–î–µ—Ä–∂–∞—Ç–µ–ª–∏',
        parentID: 4830,
        parentName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤',
        isLeaf: true,
        path: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–î–µ—Ä–∂–∞—Ç–µ–ª–∏'],
        keywords: ['–¥–µ—Ä–∂–∞—Ç–µ–ª—å', 'holder', '–∫—Ä–µ–ø–ª–µ–Ω–∏–µ', 'mount', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞']
      },
      
      // –ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã
      {
        objectID: 9524,
        objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
        parentID: 0,
        parentName: '',
        isLeaf: false,
        path: ['–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã'],
        keywords: ['–∞–≤—Ç–æ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', 'car']
      },
      
      // –ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
      {
        objectID: 4857,
        objectName: '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        parentID: 9524,
        parentName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã',
        isLeaf: true,
        path: ['–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'],
        keywords: ['–∞–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ø—Ä–∏–∫—É—Ä–∏–≤–∞—Ç–µ–ª—å', 'fm-—Ç—Ä–∞–Ω—Å–º–∏—Ç—Ç–µ—Ä', '–≤–∏–¥–µ–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä']
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(categoryId: number, apiToken: string): Promise<any[]> {
    try {
      if (!apiToken) {
        return this.getDefaultCharacteristics(categoryId);
      }

      const response = await fetch(`https://content-api.wildberries.ru/content/v2/object/charcs/${categoryId}`, {
        headers: {
          'Authorization': apiToken,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        return data.data || this.getDefaultCharacteristics(categoryId);
      }

      return this.getDefaultCharacteristics(categoryId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
      return this.getDefaultCharacteristics(categoryId);
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  private getDefaultCharacteristics(categoryId: number): any[] {
    const baseChars = [
      { charcID: 85936, charcName: '–ë—Ä–µ–Ω–¥', required: true },
      { charcID: 85941, charcName: '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', required: true },
      { charcID: 125160, charcName: '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', required: true },
      { charcID: 125163, charcName: '–í–µ—Å —Ç–æ–≤–∞—Ä–∞ —Å —É–ø–∞–∫–æ–≤–∫–æ–π (–≥)', required: true }
    ];

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–±–µ–ª–µ–π
    if (categoryId === 9835) {
      return [
        ...baseChars,
        { charcID: 85896, charcName: '–¢–∏–ø', required: true },
        { charcID: 125257, charcName: '–î–ª–∏–Ω–∞, –º', required: true },
        { charcID: 85809, charcName: '–†–∞–∑—ä–µ–º', required: true },
        { charcID: 125159, charcName: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è/–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞', required: true }
      ];
    }

    // –î–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (categoryId === 9836) {
      return [
        ...baseChars,
        { charcID: 125256, charcName: '–í—ã—Ö–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –í—Ç', required: true },
        { charcID: 125255, charcName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤', required: true }
      ];
    }

    return baseChars;
  }
}

export const wbCategoryService = new WBCategoryService();