// lib/services/categoryService.ts - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ WB

export interface WBCategory {
  objectID: number;
  objectName: string;
  parentID?: number;
  isVisible: boolean;
  children?: WBCategory[];
  level?: number;
  path?: string[];
}

export interface CategoryTree {
  id: number;
  name: string;
  parentId?: number;
  children: CategoryTree[];
  level: number;
  isLeaf: boolean;
  fullPath: string[];
}

export class CategoryService {
  private categoriesCache: WBCategory[] = [];
  private categoryTree: CategoryTree[] = [];

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
   */
  async loadCategoriesWithHierarchy(apiToken: string): Promise<CategoryTree[]> {
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const parentCategories = await this.fetchParentCategories(apiToken);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const allCategories = await this.fetchAllCategories(apiToken);

      // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      this.categoryTree = this.buildCategoryTree(parentCategories, allCategories);
      
      console.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ –¥–µ—Ä–µ–≤–æ –∏–∑ ${this.categoryTree.length} —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return this.categoryTree;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ API
   */
  private async fetchParentCategories(apiToken: string): Promise<WBCategory[]> {
    const response = await fetch('/api/wb-proxy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        endpoint: '/content/v2/object/parent/all?locale=ru',
        method: 'GET',
        apiToken,
        useCache: true
      })
    });

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    return result.data?.data || [];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ API
   */
  private async fetchAllCategories(apiToken: string): Promise<WBCategory[]> {
    const response = await fetch('/api/wb-proxy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        endpoint: '/content/v2/object/all?locale=ru',
        method: 'GET',
        apiToken,
        useCache: true
      })
    });

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    this.categoriesCache = result.data?.data || [];
    return this.categoriesCache;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  private buildCategoryTree(parentCategories: WBCategory[], allCategories: WBCategory[]): CategoryTree[] {
    const categoryMap = new Map<number, WBCategory>();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    allCategories.forEach(cat => {
      categoryMap.set(cat.objectID, cat);
    });

    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const tree: CategoryTree[] = [];

    parentCategories.forEach(parent => {
      const categoryNode = this.buildCategoryNode(parent, categoryMap, 0, [parent.objectName]);
      if (categoryNode) {
        tree.push(categoryNode);
      }
    });

    return tree;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  private buildCategoryNode(
    category: WBCategory, 
    categoryMap: Map<number, WBCategory>, 
    level: number,
    path: string[]
  ): CategoryTree | null {
    if (!category) return null;

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const children: CategoryTree[] = [];
    
    for (const [id, cat] of categoryMap) {
      if (cat.parentID === category.objectID) {
        const childPath = [...path, cat.objectName];
        const childNode = this.buildCategoryNode(cat, categoryMap, level + 1, childPath);
        if (childNode) {
          children.push(childNode);
        }
      }
    }

    return {
      id: category.objectID,
      name: category.objectName,
      parentId: category.parentID,
      children: children.sort((a, b) => a.name.localeCompare(b.name)),
      level,
      isLeaf: children.length === 0,
      fullPath: path
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  searchCategories(query: string, maxResults: number = 20): CategoryTree[] {
    const results: CategoryTree[] = [];
    const searchTerm = query.toLowerCase().trim();

    if (!searchTerm) return results;

    const searchInTree = (nodes: CategoryTree[]) => {
      for (const node of nodes) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (node.name.toLowerCase().includes(searchTerm)) {
          results.push(node);
          if (results.length >= maxResults) return;
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        if (node.children.length > 0) {
          searchInTree(node.children);
          if (results.length >= maxResults) return;
        }
      }
    };

    searchInTree(this.categoryTree);
    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategoryPath(categoryId: number): string[] {
    const findPath = (nodes: CategoryTree[], targetId: number, currentPath: string[] = []): string[] | null => {
      for (const node of nodes) {
        const newPath = [...currentPath, node.name];
        
        if (node.id === targetId) {
          return newPath;
        }
        
        if (node.children.length > 0) {
          const childPath = findPath(node.children, targetId, newPath);
          if (childPath) return childPath;
        }
      }
      return null;
    };

    return findPath(this.categoryTree, categoryId) || [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
   */
  getCategoryById(categoryId: number): CategoryTree | null {
    const findById = (nodes: CategoryTree[]): CategoryTree | null => {
      for (const node of nodes) {
        if (node.id === categoryId) {
          return node;
        }
        
        if (node.children.length > 0) {
          const found = findById(node.children);
          if (found) return found;
        }
      }
      return null;
    };

    return findById(this.categoryTree);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  getPopularCategories(): CategoryTree[] {
    // ID –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB
    const popularIds = [
      963,   // –ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã
      964,   // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
      965,   // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      2674,  // –ö—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å
      629,   // –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
      8126,  // –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
      566,   // –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
      2808,  // –û–±—É–≤—å
      14727, // –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
      1234,  // –ö–æ—Å–º–µ—Ç–∏–∫–∞
    ];

    const popular: CategoryTree[] = [];
    
    for (const id of popularIds) {
      const category = this.getCategoryById(id);
      if (category) {
        popular.push(category);
      }
    }

    return popular;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ò–ò
   */
  getCategoryRecommendationsForAI(productType: string): CategoryTree[] {
    const recommendations = this.searchCategories(productType, 10);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if (recommendations.length === 0) {
      const keywords = this.extractKeywords(productType);
      for (const keyword of keywords) {
        const keywordResults = this.searchCategories(keyword, 5);
        recommendations.push(...keywordResults);
        
        if (recommendations.length >= 10) break;
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const unique = recommendations.filter((category, index, self) => 
      index === self.findIndex(c => c.id === category.id)
    );

    return unique.slice(0, 10);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  private extractKeywords(text: string): string[] {
    const commonWords = ['–¥–ª—è', '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–∏–∑', '–∫', '–æ—Ç', '–¥–æ', '–∏–ª–∏', '–Ω–æ', '–∞', '–ø—Ä–∏'];
    
    return text
      .toLowerCase()
      .split(/[\s,.-]+/)
      .filter(word => word.length > 2 && !commonWords.includes(word))
      .slice(0, 5);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async validateCategory(categoryId: number, apiToken: string): Promise<{ valid: boolean; category?: CategoryTree; error?: string }> {
    try {
      const category = this.getCategoryById(categoryId);
      
      if (!category) {
        return { 
          valid: false, 
          error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–µ—Ä–µ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π` 
        };
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
      const characteristics = await this.getCategoryCharacteristics(categoryId, apiToken);
      
      return { 
        valid: true, 
        category 
      };
    } catch (error) {
      return { 
        valid: false, 
        error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(categoryId: number, apiToken: string): Promise<any[]> {
    try {
      const response = await fetch('/api/wb-proxy', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          endpoint: `/content/v2/object/charcs/${categoryId}?locale=ru`,
          method: 'GET',
          apiToken,
          useCache: true
        })
      });

      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
      }

      return result.data?.data || [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
      return [];
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  exportCategoryTree(): CategoryTree[] {
    return this.categoryTree;
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–µ—à–∞
   */
  importCategoryTree(tree: CategoryTree[]): void {
    this.categoryTree = tree;
  }
}

export const categoryService = new CategoryService();