// lib/services/localCategoriesService.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface LocalCategory {
  id: number;
  name: string;
  slug: string;
  parentId: number;
  parentName: string;
  displayName: string;
  wbSubjectId?: number | null;
  description?: string | null;
  isActive?: boolean | null;
  commissions: {
    fbw: number;
    fbs: number;
    dbs: number;
    cc: number;
    edbs: number;
    booking: number;
  };
}

export interface SmartCategoryResult extends LocalCategory {
  relevanceScore?: number;
  matchReason?: string;
}

export class LocalCategoriesService {
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
   */
  async getCharacteristicsForCategory(categoryId: number): Promise<any[]> {
    try {
      console.log(`üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: ${categoryId} –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...`);

      const characteristics = await prisma.wbCategoryCharacteristic.findMany({
        where: {
          subcategoryId: categoryId,
        },
        include: {
          values: {
            where: { isActive: true },
            orderBy: { sortOrder: 'asc' }
          }
        },
        orderBy: [
          { isRequired: 'desc' },
          { sortOrder: 'asc' },
          { name: 'asc' },
        ],
      });

      if (characteristics.length === 0) {
        console.warn(`‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.`);
        return [];
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.`);
      
      return characteristics.map(char => ({
        id: char.wbCharacteristicId || char.id,
        name: char.name,
        type: char.type,
        isRequired: char.isRequired,
        description: char.description,
        maxLength: char.maxLength,
        minValue: char.minValue,
        maxValue: char.maxValue,
        values: char.values.map(v => ({
          id: v.wbValueId || v.id,
          value: v.value,
          displayName: v.displayName || v.value
        }))
      }));

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –∏–∑ –ë–î:`, error);
      return [];
    }
  }

  /**
   * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
   */
  async smartSearchCategories(query: string, limit: number = 20): Promise<SmartCategoryResult[]> {
    try {
      console.log(`üéØ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
      
      const queryLower = query.toLowerCase();
      
      // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –≤–µ—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const categoryKeywords = {
        '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': {
          keywords: ['–∫–∞–±–µ–ª—å', '–∑–∞—Ä—è–¥–∫–∞', '–∞–¥–∞–ø—Ç–µ—Ä', 'usb', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'type-c', 'lightning', 'micro'],
          weight: 10,
          parentNames: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞']
        },
        '—á–∞–π–Ω–∏–∫–∏': {
          keywords: ['—á–∞–π–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ—á–∞–π–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '–∫–æ—Ñ–µ–π–Ω–∏–∫', '–∑–∞–≤–∞—Ä–æ—á–Ω—ã–π'],
          weight: 10,
          parentNames: ['–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ö—É—Ö–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ß–∞–π–Ω–∏–∫–∏', '–≠–ª–µ–∫—Ç—Ä–æ—á–∞–π–Ω–∏–∫–∏']
        },
        '–ø–ª–∏—Ç—ã': {
          keywords: ['–ø–ª–∏—Ç–∞', '–ø–ª–∏—Ç–∫–∞', '–≤–∞—Ä–æ—á–Ω–∞—è', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è', '–Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è', '–∏–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω–∞—è'],
          weight: 10,
          parentNames: ['–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ö—É—Ö–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–í–∞—Ä–æ—á–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏']
        },
        '–Ω–∞—É—à–Ω–∏–∫–∏': {
          keywords: ['–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', 'airpods', 'bluetooth', '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ'],
          weight: 9,
          parentNames: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê—É–¥–∏–æ']
        },
        '—á–µ—Ö–ª—ã': {
          keywords: ['—á–µ—Ö–æ–ª', '–±–∞–º–ø–µ—Ä', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–ø–ª–µ–Ω–∫–∞'],
          weight: 8,
          parentNames: ['–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ó–∞—â–∏—Ç–∞']
        }
      };

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const matchedCategories = [];
      
      for (const [categoryType, config] of Object.entries(categoryKeywords)) {
        let matchScore = 0;
        const matchedKeywords = [];
        
        for (const keyword of config.keywords) {
          if (queryLower.includes(keyword)) {
            matchScore += config.weight;
            matchedKeywords.push(keyword);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (queryLower === keyword) {
              matchScore += 5;
            }
          }
        }
        
        if (matchScore > 0) {
          matchedCategories.push({ 
            categoryType, 
            matchScore, 
            config,
            matchedKeywords
          });
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      matchedCategories.sort((a, b) => b.matchScore - a.matchScore);
      
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
      const searchResults: SmartCategoryResult[] = [];
      
      // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
      const directCategories = await prisma.wbSubcategory.findMany({
        where: {
          OR: [
            {
              name: {
                contains: query
              }
            },
            {
              parentCategory: {
                name: {
                  contains: query
                }
              }
            }
          ]
        },
        include: {
          parentCategory: true
        },
        take: limit,
        orderBy: { name: 'asc' }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const cat of directCategories) {
        searchResults.push({
          id: cat.id,
          name: cat.name,
          slug: cat.slug,
          parentId: cat.parentCategoryId,
          parentName: cat.parentCategory.name,
          displayName: `${cat.parentCategory.name} / ${cat.name}`,
          wbSubjectId: cat.wbSubjectId,
          description: cat.description,
          isActive: cat.isActive,
          relevanceScore: 10,
          matchReason: '–ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏',
          commissions: {
            fbw: cat.commissionFbw,
            fbs: cat.commissionFbs,
            dbs: cat.commissionDbs,
            cc: cat.commissionCc,
            edbs: cat.commissionEdbs,
            booking: cat.commissionBooking
          }
        });
      }
      
      console.log(`‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return searchResults.slice(0, limit);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  async searchCategories(query: string, limit: number = 20): Promise<LocalCategory[]> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
      
      const categories = await prisma.wbSubcategory.findMany({
        where: {
          OR: [
            {
              name: {
                contains: query
              }
            },
            {
              parentCategory: {
                name: {
                  contains: query
                }
              }
            }
          ]
        },
        include: {
          parentCategory: true
        },
        take: limit,
        orderBy: { name: 'asc' }
      });

      const result: LocalCategory[] = categories.map(cat => ({
        id: cat.id,
        name: cat.name,
        slug: cat.slug,
        parentId: cat.parentCategoryId,
        parentName: cat.parentCategory.name,
        displayName: `${cat.parentCategory.name} / ${cat.name}`,
        wbSubjectId: cat.wbSubjectId,
        description: cat.description,
        isActive: cat.isActive,
        commissions: {
          fbw: cat.commissionFbw,
          fbs: cat.commissionFbs,
          dbs: cat.commissionDbs,
          cc: cat.commissionCc,
          edbs: cat.commissionEdbs,
          booking: cat.commissionBooking
        }
      }));

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
   */
  async getCategoryById(id: number): Promise<LocalCategory | null> {
    try {
      console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID: ${id}`);
      
      const category = await prisma.wbSubcategory.findUnique({
        where: { id },
        include: {
          parentCategory: true
        }
      });

      if (category) {
        const result: LocalCategory = {
          id: category.id,
          name: category.name,
          slug: category.slug,
          parentId: category.parentCategoryId,
          parentName: category.parentCategory.name,
          displayName: `${category.parentCategory.name} / ${category.name}`,
          wbSubjectId: category.wbSubjectId,
          description: category.description,
          isActive: category.isActive,
          commissions: {
            fbw: category.commissionFbw,
            fbs: category.commissionFbs,
            dbs: category.commissionDbs,
            cc: category.commissionCc,
            edbs: category.commissionEdbs,
            booking: category.commissionBooking
          }
        };

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.displayName}`);
        return result;
      }

      console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID:', error);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
   */
  async findBestCategoryForProduct(productName: string): Promise<LocalCategory | null> {
    try {
      console.log(`üéØ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: "${productName}"`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
      const smartResults = await this.smartSearchCategories(productName, 5);
      
      if (smartResults.length > 0) {
        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const bestMatch = smartResults[0];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${bestMatch.displayName} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${bestMatch.relevanceScore})`);
        return bestMatch;
      }

      // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
      const normalResults = await this.searchCategories(productName, 5);
      if (normalResults.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: ${normalResults[0].displayName}`);
        return normalResults[0];
      }

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const defaultCategory = await prisma.wbSubcategory.findFirst({
        include: { parentCategory: true }
      });

      if (defaultCategory) {
        const result: LocalCategory = {
          id: defaultCategory.id,
          name: defaultCategory.name,
          slug: defaultCategory.slug,
          parentId: defaultCategory.parentCategoryId,
          parentName: defaultCategory.parentCategory.name,
          displayName: `${defaultCategory.parentCategory.name} / ${defaultCategory.name}`,
          wbSubjectId: defaultCategory.wbSubjectId,
          description: defaultCategory.description,
          isActive: defaultCategory.isActive,
          commissions: {
            fbw: defaultCategory.commissionFbw,
            fbs: defaultCategory.commissionFbs,
            dbs: defaultCategory.commissionDbs,
            cc: defaultCategory.commissionCc,
            edbs: defaultCategory.commissionEdbs,
            booking: defaultCategory.commissionBooking
          }
        };

        console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${result.displayName}`);
        return result;
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
   */
  async getAllCategoriesWithCommissions(limit: number = 7300, offset: number = 0): Promise<LocalCategory[]> {
    try {
      console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ª–∏–º–∏—Ç: ${limit}, —Å–º–µ—â–µ–Ω–∏–µ: ${offset})...`);
      
      const categories = await prisma.wbSubcategory.findMany({
        include: {
          parentCategory: true
        },
        take: limit,
        skip: offset,
        orderBy: { name: 'asc' }
      });

      const result: LocalCategory[] = categories.map(cat => ({
        id: cat.id,
        name: cat.name,
        slug: cat.slug,
        parentId: cat.parentCategoryId,
        parentName: cat.parentCategory.name,
        displayName: `${cat.parentCategory.name} / ${cat.name}`,
        wbSubjectId: cat.wbSubjectId,
        description: cat.description,
        isActive: cat.isActive,
        commissions: {
          fbw: cat.commissionFbw,
          fbs: cat.commissionFbs,
          dbs: cat.commissionDbs,
          cc: cat.commissionCc,
          edbs: cat.commissionEdbs,
          booking: cat.commissionBooking
        }
      }));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getParentCategories(): Promise<Array<{ id: number; name: string; slug: string; count: number }>> {
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      
      const parents = await prisma.wbParentCategory.findMany({
        include: {
          _count: { select: { subcategories: true } }
        },
        orderBy: { name: 'asc' }
      });

      const result = parents.map(parent => ({
        id: parent.id,
        name: parent.name,
        slug: parent.slug,
        count: parent._count.subcategories
      }));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getSubcategoriesByParent(parentId: number): Promise<LocalCategory[]> {
    try {
      console.log(`üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ${parentId}...`);
      
      const subcategories = await prisma.wbSubcategory.findMany({
        where: {
          parentCategoryId: parentId
        },
        include: {
          parentCategory: true
        },
        orderBy: { name: 'asc' }
      });

      const result: LocalCategory[] = subcategories.map(cat => ({
        id: cat.id,
        name: cat.name,
        slug: cat.slug,
        parentId: cat.parentCategoryId,
        parentName: cat.parentCategory.name,
        displayName: `${cat.parentCategory.name} / ${cat.name}`,
        wbSubjectId: cat.wbSubjectId,
        description: cat.description,
        isActive: cat.isActive,
        commissions: {
          fbw: cat.commissionFbw,
          fbs: cat.commissionFbs,
          dbs: cat.commissionDbs,
          cc: cat.commissionCc,
          edbs: cat.commissionEdbs,
          booking: cat.commissionBooking
        }
      }));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
   */
  async cleanup(): Promise<void> {
    try {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }
}

export const localCategoriesService = new LocalCategoriesService();