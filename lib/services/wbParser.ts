// lib/services/wbParser.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–ï–†–¢–ö–ê –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò

import { wbSimpleParser } from './wbSimpleParser';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
interface LegacyWBProductData {
  id: string;
  name: string;
  brand: string;
  price: number;
  rating?: number;
  reviewsCount?: number;
  description?: string;
  characteristics?: Record<string, string>;
  images?: string[];
  category?: string;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
class WBParserCompatibilityWrapper {
  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º API)
   */
  async getProductData(productId: string): Promise<LegacyWBProductData> {
    try {
      console.log(`üîç WB Parser: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ${productId}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ URL
      let url: string;
      if (productId.startsWith('http')) {
        url = productId;
      } else {
        url = `https://www.wildberries.ru/catalog/${productId}/detail.aspx`;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä
      const productData = await wbSimpleParser.getProductData(url);

      if (!productData) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞');
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      const legacyData: LegacyWBProductData = {
        id: productData.id,
        name: productData.name,
        brand: productData.brand,
        price: productData.price,
        rating: productData.rating,
        reviewsCount: productData.reviewsCount,
        description: productData.description,
        category: productData.category,
        images: productData.images
      };

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (productData.characteristics?.length > 0) {
        legacyData.characteristics = {};
        productData.characteristics.forEach((char: any) => {
          if (legacyData.characteristics) {
            legacyData.characteristics[char.name] = char.value;
          }
        });
      }

      console.log(`‚úÖ WB Parser: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã - ${legacyData.name}`);
      return legacyData;

    } catch (error) {
      console.error('‚ùå WB Parser error:', error);
      throw error;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
   */
  extractProductId(url: string): string | null {
    return wbSimpleParser.extractProductId(url);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB
   */
  async getWBCategories(apiToken: string): Promise<any[]> {
    return wbSimpleParser.getWBCategories(apiToken);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getCategoryCharacteristics(categoryId: number, apiToken: string): Promise<any[]> {
    return wbSimpleParser.getCategoryCharacteristics(categoryId, apiToken);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
   */
  async createProductCard(cardData: any, apiToken: string): Promise<any> {
    return wbSimpleParser.createProductCard(cardData, apiToken);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   */
  async checkProductExists(nmId: string): Promise<boolean> {
    return wbSimpleParser.checkProductExists(nmId);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup(): Promise<void> {
    return wbSimpleParser.cleanup();
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const wbParser = new WBParserCompatibilityWrapper();

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default wbParser;
export { wbParser };

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { wbSimpleParser };

// –¢–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type { LegacyWBProductData };

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const TestUtils = {
  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
   */
  async quickTest(nmId: string): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      const startTime = Date.now();
      const data = await wbParser.getProductData(nmId);
      const endTime = Date.now();
      
      return {
        success: true,
        data: {
          ...data,
          parseTime: endTime - startTime
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
   */
  async checkAvailability(nmId: string): Promise<boolean> {
    try {
      return await wbSimpleParser.checkProductExists(nmId);
    } catch {
      return false;
    }
  },

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
   */
  async batchCheck(nmIds: string[]): Promise<Array<{ nmId: string; available: boolean }>> {
    const results = [];
    
    for (const nmId of nmIds) {
      try {
        const available = await this.checkAvailability(nmId);
        results.push({ nmId, available });
      } catch {
        results.push({ nmId, available: false });
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    return results;
  }
};