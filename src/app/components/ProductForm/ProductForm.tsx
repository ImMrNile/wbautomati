import React, { useState, useEffect, useRef } from 'react';
import { 
  Package, 
  Camera, 
  CheckCircle, 
  ArrowRight, 
  ArrowLeft,
  Sparkles,
  Loader,
  AlertCircle,
  Settings,
  Eye,
  Upload,
  Zap,
  RefreshCw,
  Image,
  Trash2,
  X,
  Plus,
  FileText
} from 'lucide-react';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–≥–æ–≤
import Step1BasicInfo from './Step1BasicInfo';
import Step4Results from './Step4Results';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface Cabinet {
  id: string;
  name: string;
  apiToken: string;
  isActive: boolean;
  description?: string;
}

interface WBSubcategory {
  id: number;
  name: string;
  slug: string;
  parentId: number;
  parentName: string;
  displayName: string;
  wbSubjectId?: number;
  commissions: {
    fbw: number;
    fbs: number;
    dbs: number;
    cc: number;
    edbs: number;
    booking: number;
  };
}

interface ProductFormData {
  name: string;
  originalPrice: string;
  discountPrice: string;
  costPrice?: string;
  packageContents: string;
  length: string;
  width: string;
  height: string;
  weight: string;
  referenceUrl: string;
  cabinetId: string;
  vendorCode: string;
  autoGenerateVendorCode: boolean;
  barcode: string;
  hasVariantSizes: boolean;
  variantSizes: string[];
  description?: string;
  mainImage: File | null;
  additionalImages: File[];
  imageComments: string;
}

interface ProcessingStatus {
  stage: 'uploading' | 'processing' | 'ai-analysis' | 'wb-creation' | 'completed' | 'error';
  message: string;
  progress: number;
  details?: string;
  currentStep?: string;
  totalSteps?: number;
  timeElapsed?: number;
}

interface ProductFormProps {
  onSuccess?: () => void;
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
const initialFormData: ProductFormData = {
  name: '',
  originalPrice: '',
  discountPrice: '',
  costPrice: '',
  packageContents: '–¢–æ–≤–∞—Ä - 1 —à—Ç., —É–ø–∞–∫–æ–≤–∫–∞ - 1 —à—Ç.',
  length: '',
  width: '',
  height: '',
  weight: '',
  referenceUrl: '',
  cabinetId: '',
  vendorCode: '',
  autoGenerateVendorCode: true,
  barcode: '',
  hasVariantSizes: false,
  variantSizes: [],
  description: '',
  mainImage: null,
  additionalImages: [],
  imageComments: ''
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EAN-13 —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function generateEAN13Barcode(): string {
  let code = '22';
  for (let i = 0; i < 10; i++) {
    code += Math.floor(Math.random() * 10);
  }
  let sum = 0;
  for (let i = 0; i < 12; i++) {
    const digit = parseInt(code[i]);
    sum += i % 2 === 0 ? digit : digit * 3;
  }
  const checkDigit = (10 - (sum % 10)) % 10;
  return code + checkDigit;
}

export default function ProductForm({ onSuccess }: ProductFormProps): JSX.Element {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<ProductFormData>(initialFormData);
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string>('');
  const [additionalImages, setAdditionalImages] = useState<File[]>([]);
  const [additionalImagePreviews, setAdditionalImagePreviews] = useState<string[]>([]);
  const [cabinets, setCabinets] = useState<Cabinet[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<WBSubcategory | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [processingStatus, setProcessingStatus] = useState<ProcessingStatus | null>(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoadingCabinets, setIsLoadingCabinets] = useState(false);
  const [aiAnalysisStatus, setAiAnalysisStatus] = useState<'pending' | 'processing' | 'completed' | 'failed'>('pending');
  const [aiAnalysisData, setAiAnalysisData] = useState<any>(null);
  const [createdProductId, setCreatedProductId] = useState<string>('');
  
  // useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ polling
  const aiAnalysisPollingIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProductForm');
    loadCabinets();
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (aiAnalysisPollingIntervalRef.current) {
        clearInterval(aiAnalysisPollingIntervalRef.current);
        aiAnalysisPollingIntervalRef.current = null;
      }
    };
  }, []);

  // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤
  useEffect(() => {
    if (formData.autoGenerateVendorCode && formData.name.trim()) {
      generateVendorCode();
      generateBarcode();
    }
  }, [formData.autoGenerateVendorCode, formData.name]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (createdProductId && aiAnalysisStatus === 'pending') {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', createdProductId);
      checkAiAnalysisStatus(createdProductId);
    }
  }, [createdProductId]); // –£–±–∏—Ä–∞–µ–º aiAnalysisStatus –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ aiAnalysisStatus
  useEffect(() => {
    if (aiAnalysisStatus === 'completed' && processingStatus && processingStatus.stage !== 'completed') {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º processingStatus –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞');
      setProcessingStatus({
        stage: 'completed',
        message: 'AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
        progress: 100,
        details: `–¢–æ–≤–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID: ${createdProductId}`,
        currentStep: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        totalSteps: 4
      });
    }
  }, [aiAnalysisStatus, processingStatus, createdProductId]);

  const loadCabinets = async () => {
    console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤...');
    setIsLoadingCabinets(true);
    
    try {
      const response = await fetch('/api/cabinets', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        },
        credentials: 'include'
      });
      
      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API –∫–∞–±–∏–Ω–µ—Ç–æ–≤:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
        
        if (data.success && Array.isArray(data.cabinets)) {
          const activeCabinets = data.cabinets.filter((c: Cabinet) => c.isActive);
          setCabinets(activeCabinets);
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤:', activeCabinets.length);
          
          // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
          if (activeCabinets.length > 0 && !formData.cabinetId) {
            setFormData(prev => ({ ...prev, cabinetId: activeCabinets[0].id }));
            console.log('üéØ –ê–≤—Ç–æ–≤—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç:', activeCabinets[0].name);
          }
          
          setError('');
          return;
        } else {
          console.log('‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–±–∏–Ω–µ—Ç—ã –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
          setCabinets([]);
          setError('');
        }
      } else {
        console.log('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status);
        setCabinets([]);
        setError('');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤:', error);
      setCabinets([]);
      setError('');
    } finally {
      setIsLoadingCabinets(false);
    }
  };

  const generateVendorCode = () => {
    const productPrefix = formData.name ? formData.name.substring(0, 3).toUpperCase().replace(/[^A-Z]/g, '') || 'PRD' : 'PRD';
    const timestamp = Date.now().toString(36).toUpperCase();
    const random = Math.random().toString(36).substring(2, 5).toUpperCase();
    const newVendorCode = `${productPrefix}${timestamp}${random}`.substring(0, 13);
    setFormData(prev => ({ ...prev, vendorCode: newVendorCode }));
    return newVendorCode;
  };

  const generateBarcode = () => {
    const newBarcode = generateEAN13Barcode();
    setFormData(prev => ({ ...prev, barcode: newBarcode }));
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    setError('');
    setSuccess('');
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      if (!ALLOWED_TYPES.includes(file.type)) {
        setError('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, WebP');
        return;
      }
      
      const MAX_FILE_SIZE = 5 * 1024 * 1024;
      if (file.size > MAX_FILE_SIZE) {
        setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      setSelectedImage(file);
      setFormData(prev => ({ ...prev, mainImage: file }));
      setError('');
      
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleAdditionalImagesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length > 0) {
      const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      const MAX_FILE_SIZE = 5 * 1024 * 1024;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
      for (const file of files) {
        if (!ALLOWED_TYPES.includes(file.type)) {
          setError(`–§–∞–π–ª ${file.name} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: JPEG, PNG, WebP`);
          return;
        }
        
        if (file.size > MAX_FILE_SIZE) {
          setError(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB`);
          return;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      setFormData(prev => ({ 
        ...prev, 
        additionalImages: [...prev.additionalImages, ...files] 
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const newPreviews = files.map(file => {
        return new Promise<string>((resolve) => {
          const reader = new FileReader();
          reader.onload = (e) => resolve(e.target?.result as string);
          reader.readAsDataURL(file);
        });
      });

      Promise.all(newPreviews).then(previews => {
        setAdditionalImagePreviews(prev => [...prev, ...previews]);
      });

      setError('');
    }
  };

  const removeAdditionalImage = (index: number) => {
    setFormData(prev => ({
      ...prev,
      additionalImages: prev.additionalImages.filter((_, i) => i !== index)
    }));
    setAdditionalImagePreviews(prev => prev.filter((_, i) => i !== index));
  };

  const checkAiAnalysisStatus = async (productId: string) => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞:', productId);
      const response = await fetch(`/api/products/${productId}`);
      if (response.ok) {
        const data = await response.json();
        const product = data?.product || data; // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        console.log('üìä –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞:', product.status);
        console.log('ü§ñ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–º–∞—Å—Å–∏–≤):', Array.isArray(product.characteristics) ? product.characteristics.length : 0);
        console.log('üìù –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:', product);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–ª–∏—á–∏–µ AI-—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        if (product.status === 'READY' || (Array.isArray(product.characteristics) && product.characteristics.length > 0)) {
          console.log('‚úÖ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∏–ª–∏ –∏–º–µ–µ—Ç AI-—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
          setAiAnalysisStatus('completed');
          // –û–±–Ω–æ–≤–ª—è–µ–º processingStatus –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
          setProcessingStatus({
            stage: 'completed',
            message: 'AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
            progress: 100,
            details: `–¢–æ–≤–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ID: ${productId}`,
            currentStep: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            totalSteps: 4
          });
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º AI-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (Array.isArray(product.characteristics) && product.characteristics.length > 0) {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ API:', product.characteristics.length);
            setAiAnalysisData({
              generatedName: product.generatedName || formData.name,
              seoDescription: product.seoDescription || '',
              characteristics: product.characteristics,
              qualityScore: product.aiAnalysis?.qualityScore || 85
            });
          } else if (product.generatedName || product.seoDescription) {
            // –ï—Å–ª–∏ –Ω–µ—Ç aiCharacteristics, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ AI-–¥–∞–Ω–Ω—ã–µ
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ AI-–¥–∞–Ω–Ω—ã–µ');
            setAiAnalysisData({
              generatedName: product.generatedName,
              seoDescription: product.seoDescription,
              characteristics: product.characteristics || [],
              qualityScore: product.aiAnalysis?.qualityScore || 85
            });
          }
          return true;
        } else if (product.status === 'DRAFT') {
          console.log('üìù –¢–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ DRAFT');
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞
          if (product.errorMessage && product.errorMessage.includes('AI')) {
            console.log('‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞:', product.errorMessage);
            setAiAnalysisStatus('failed');
            return false;
          } else {
            console.log('‚è≥ AI-–∞–Ω–∞–ª–∏–∑ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
            // –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ AI-–∞–Ω–∞–ª–∏–∑ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            setAiAnalysisStatus('processing');
            return false;
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI-–∞–Ω–∞–ª–∏–∑–∞:', error);
      setAiAnalysisStatus('failed');
    }
    return false;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI-–∞–Ω–∞–ª–∏–∑–∞
  const startAiAnalysisPolling = (productId: string) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ polling –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (aiAnalysisPollingIntervalRef.current) {
      clearInterval(aiAnalysisPollingIntervalRef.current);
    }
    
    const interval = setInterval(async () => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
      const isCompleted = await checkAiAnalysisStatus(productId);
      if (isCompleted) {
        console.log('‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
        clearInterval(interval);
        aiAnalysisPollingIntervalRef.current = null;
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AI-–∞–Ω–∞–ª–∏–∑–∞
        setAiAnalysisStatus('completed');
        // processingStatus —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ checkAiAnalysisStatus
      } else {
        console.log('‚è≥ AI-–∞–Ω–∞–ª–∏–∑ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        if (aiAnalysisStatus !== 'completed') {
          setProcessingStatus({
            stage: 'ai-analysis',
            message: 'AI-–∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...',
            progress: 80,
            details: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...',
            currentStep: 'AI-–∞–Ω–∞–ª–∏–∑',
            totalSteps: 4
          });
        }
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    aiAnalysisPollingIntervalRef.current = interval;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç polling –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
      if (aiAnalysisPollingIntervalRef.current === interval) {
        clearInterval(interval);
        aiAnalysisPollingIntervalRef.current = null;
        if (aiAnalysisStatus === 'processing') {
          setAiAnalysisStatus('failed');
        }
      }
    }, 300000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries
  const publishToWildberries = async (productId: string) => {
    try {
      setProcessingStatus({
        stage: 'wb-creation',
        message: '–ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ Wildberries...',
        progress: 90,
        details: '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ Wildberries...',
        currentStep: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ WB',
        totalSteps: 4
      });

      const response = await fetch(`/api/products/${productId}/publish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        setProcessingStatus({
          stage: 'completed',
          message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries!',
          progress: 100,
          details: `ID —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB: ${result.wbProductId || 'N/A'}`,
          currentStep: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
          totalSteps: 4
        });
        
        setSuccess(`–¢–æ–≤–∞—Ä "${formData.name}" —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries!`);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries:', error);
      
      setProcessingStatus({
        stage: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries',
        progress: 0,
        details: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        currentStep: '–û—à–∏–±–∫–∞',
        totalSteps: 4
      });

      setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries');
    }
  };

  const validateStep = (step: number): boolean => {
    setError('');
    
    switch (step) {
      case 1:
        if (!formData.name.trim()) {
          setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
          return false;
        }
        if (!selectedCategory) {
          setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞');
          return false;
        }
        if (!formData.originalPrice || parseFloat(formData.originalPrice) <= 0) {
          setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞');
          return false;
        }
        break;
        
      case 2:
        if (!selectedImage) {
          setError('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
          return false;
        }
        break;
        
      case 3:
        if (!formData.length || !formData.width || !formData.height || !formData.weight) {
          setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –≥–∞–±–∞—Ä–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞');
          return false;
        }
        if (!formData.cabinetId) {
          setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
          return false;
        }
        break;
    }
    
    return true;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 4));
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
      setError('');
      setSuccess('');
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    setError('');
    setSuccess('');
  };

  const handleSubmit = async () => {
    if (!validateStep(3)) return;
    
    setIsSubmitting(true);
    setError('');
    
    try {
      // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
      setProcessingStatus({
        stage: 'uploading',
        message: '–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä...',
        progress: 10,
        details: '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...',
        currentStep: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
        totalSteps: 4
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formDataToSend = new FormData();
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      formDataToSend.append('name', formData.name);
      formDataToSend.append('originalPrice', formData.originalPrice);
      formDataToSend.append('discountPrice', formData.discountPrice);
      formDataToSend.append('costPrice', formData.costPrice || '');
      formDataToSend.append('packageContents', formData.packageContents);
      
      // –†–∞–∑–º–µ—Ä—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ dimensions (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç API)
      const dimensions = {
        length: parseFloat(formData.length),
        width: parseFloat(formData.width),
        height: parseFloat(formData.height),
        weight: parseFloat(formData.weight)
      };
      formDataToSend.append('dimensions', JSON.stringify(dimensions));
      
      formDataToSend.append('referenceUrl', formData.referenceUrl);
      formDataToSend.append('cabinetId', formData.cabinetId);
      formDataToSend.append('vendorCode', formData.vendorCode);
      formDataToSend.append('autoGenerateVendorCode', formData.autoGenerateVendorCode.toString());
      formDataToSend.append('barcode', formData.barcode);
      formDataToSend.append('hasVariantSizes', formData.hasVariantSizes.toString());
      formDataToSend.append('variantSizes', JSON.stringify(formData.variantSizes));
      formDataToSend.append('description', formData.description || '');
      formDataToSend.append('imageComments', formData.imageComments || '');

      // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
      if (selectedCategory) {
        formDataToSend.append('categoryId', selectedCategory.id.toString());
        formDataToSend.append('categoryName', selectedCategory.name);
        formDataToSend.append('parentCategoryName', selectedCategory.parentName);
      }

      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (selectedImage) {
        formDataToSend.append('image', selectedImage);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (formData.additionalImages.length > 0) {
        formDataToSend.append('additionalImagesCount', formData.additionalImages.length.toString());
        formData.additionalImages.forEach((image, index) => {
          formDataToSend.append(`additionalImage${index}`, image);
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      setProcessingStatus({
        stage: 'processing',
        message: '–°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...',
        progress: 30,
        details: '–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...',
        currentStep: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        totalSteps: 4
      });

      const response = await fetch('/api/products', {
        method: 'POST',
        body: formDataToSend
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

              if (result.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          setCreatedProductId(result.productId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ AI-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã–º
          if (result.data?.aiAnalysisStatus === 'completed' || result.data?.status === 'READY') {
            // AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
            setProcessingStatus({
              stage: 'completed',
              message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!',
              progress: 100,
              details: `ID —Ç–æ–≤–∞—Ä–∞: ${result.productId}. AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.`,
              currentStep: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
              totalSteps: 4
            });
            
            setAiAnalysisStatus('completed');
            setSuccess(`–¢–æ–≤–∞—Ä "${formData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ò–ò! ID: ${result.productId}`);
            setCurrentStep(4);
            setIsSubmitting(false);
            
            if (onSuccess) {
              onSuccess();
            }
          } else {
            // AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ —É–ø–∞–ª
            setProcessingStatus({
              stage: 'ai-analysis',
              message: 'AI-–∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...',
              progress: 80,
              details: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...',
              currentStep: 'AI-–∞–Ω–∞–ª–∏–∑',
              totalSteps: 4
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ AI-–∞–Ω–∞–ª–∏–∑–∞
            startAiAnalysisPolling(result.productId);
            
            setSuccess(`–¢–æ–≤–∞—Ä "${formData.name}" —Å–æ–∑–¥–∞–Ω! ID: ${result.productId}. AI-–∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...`);
            setCurrentStep(4);
            setIsSubmitting(false);
            
            if (onSuccess) {
              onSuccess();
            }
          }
        } else {
          throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      setProcessingStatus({
        stage: 'error',
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
        progress: 0,
        details: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        currentStep: '–û—à–∏–±–∫–∞',
        totalSteps: 4
      });

      setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
      setIsSubmitting(false);
    }
  };

  const clearForm = () => {
    setFormData(initialFormData);
    setSelectedImage(null);
    setImagePreview('');
    setAdditionalImages([]);
    setAdditionalImagePreviews([]);
    setSelectedCategory(null);
    setError('');
    setSuccess('');
    setProcessingStatus(null);
    setAiAnalysisStatus('pending');
    setAiAnalysisData(null);
    setCreatedProductId('');
    setCurrentStep(1);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã polling
    if (aiAnalysisPollingIntervalRef.current) {
      clearInterval(aiAnalysisPollingIntervalRef.current);
      aiAnalysisPollingIntervalRef.current = null;
    }
    
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach((input: any) => {
      input.value = '';
    });
  };

  const handleCategorySelect = (category: WBSubcategory | null) => {
    console.log('üîç [Form] –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
      id: category?.id,
      name: category?.name,
      parentName: category?.parentName,
      wbSubjectId: category?.wbSubjectId,
      displayName: category?.displayName
    });
    
    setSelectedCategory(category);
  };

  const handleVariantSizeChange = (size: string, checked: boolean) => {
    setFormData(prev => ({
      ...prev,
      variantSizes: checked 
        ? [...prev.variantSizes, size]
        : prev.variantSizes.filter(s => s !== size)
    }));
  };

  const getSizeOptionsForCategory = (): string[] => {
    if (!selectedCategory) return [];
    
    const categoryName = selectedCategory.name.toLowerCase();
    const parentName = selectedCategory.parentName.toLowerCase();
    const fullText = `${categoryName} ${parentName}`;
    
    if (fullText.includes('–æ–±—É–≤—å') || fullText.includes('–∫—Ä–æ—Å—Å–æ–≤–∫–∏') || 
        fullText.includes('–±–æ—Ç–∏–Ω–∫–∏') || fullText.includes('—Ç—É—Ñ–ª–∏')) {
      return ['35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46'];
    }
    
    if (fullText.includes('–¥–µ—Ç—Å–∫–∞—è') || fullText.includes('–¥–µ—Ç—Å–∫–∏–π')) {
      return ['80-86', '86-92', '98-104', '110-116', '122-128', '134-140', '146-152', '158-164'];
    }
    
    if (fullText.includes('–º—É–∂—Å–∫–∞—è') || fullText.includes('–º—É–∂—Å–∫–æ–π')) {
      return ['S', 'M', 'L', 'XL', 'XXL', 'XXXL', '48', '50', '52', '54', '56', '58', '60'];
    }
    
    if (fullText.includes('–∂–µ–Ω—Å–∫–∞—è') || fullText.includes('–∂–µ–Ω—Å–∫–∏–π')) {
      return ['XS', 'S', 'M', 'L', 'XL', 'XXL', '40', '42', '44', '46', '48', '50', '52'];
    }
    
    return ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
  };

  const getStageColor = (stage: string) => {
    switch (stage) {
      case 'uploading': return 'bg-blue-600';
      case 'processing': return 'bg-purple-600';
      case 'ai-analysis': return 'bg-indigo-600';
      case 'wb-creation': return 'bg-orange-600';
      case 'completed': return 'bg-green-600';
      case 'error': return 'bg-red-600';
      default: return 'bg-gray-600';
    }
  };

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center mb-6">
      {[1, 2, 3, 4].map((step, index) => (
        <React.Fragment key={step}>
          <div className={`w-10 h-10 rounded-full flex items-center justify-center font-medium transition-all duration-500 ${
            step <= currentStep
              ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-lg transform scale-110'
              : 'bg-gray-700 text-gray-400'
          } ${step === currentStep ? 'animate-pulse shadow-xl' : ''}`}>
            {step === 1 && <Package className="w-5 h-5" />}
            {step === 2 && <Camera className="w-5 h-5" />}
            {step === 3 && <Settings className="w-5 h-5" />}
            {step === 4 && <Eye className="w-5 h-5" />}
          </div>
          {index < 3 && (
            <div className={`w-12 h-1 mx-2 transition-all duration-500 ${
              step < currentStep 
                ? 'bg-gradient-to-r from-blue-500 to-blue-600' 
                : 'bg-gray-700'
            } ${step === currentStep - 1 ? 'animate-pulse' : ''}`} />
          )}
        </React.Fragment>
      ))}
    </div>
  );

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏
  const discountPercent = formData.originalPrice && formData.discountPrice ? 
    Math.round((1 - parseFloat(formData.discountPrice) / parseFloat(formData.originalPrice)) * 100) : undefined;

  return (
    <div className="min-h-screen py-4 fade-in">
      <div className="max-w-3xl mx-auto px-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent mb-3">
            –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries
          </h1>
          <p className="text-base text-gray-300 max-w-xl mx-auto">
            –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
          </p>
        </div>

        {renderStepIndicator()}
        
        {/* –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
        {processingStatus && (
          <div className="mb-4 glass-container p-4 scale-in">
            <div className="flex items-center gap-3 mb-3">
              <div className={`p-1.5 rounded-full ${getStageColor(processingStatus.stage)}`}>
                {processingStatus.stage === 'completed' ? (
                  <CheckCircle className="w-4 h-4 text-white" />
                ) : processingStatus.stage === 'error' ? (
                  <AlertCircle className="w-4 h-4 text-white" />
                ) : (
                  <Loader className="w-4 h-4 text-white animate-spin" />
                )}
              </div>
              <div className="flex-1">
                <h3 className="text-base font-semibold text-white">{processingStatus.message}</h3>
                {processingStatus.details && (
                  <p className="text-sm text-gray-300 mt-1">{processingStatus.details}</p>
                )}
              </div>
            </div>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
            <div className="progress-bar mb-3">
              <div 
                className="progress-fill"
                style={{ width: `${processingStatus.progress}%` }}
              />
            </div>
            
            <div className="flex items-center justify-between text-xs text-gray-300">
              <span>{processingStatus.progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
              {processingStatus.currentStep && (
                <span className="flex items-center gap-2">
                  <div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse"></div>
                  {processingStatus.currentStep}
                </span>
              )}
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ */}
            {aiAnalysisStatus === 'completed' && processingStatus.stage !== 'completed' && (
              <div className="mt-3 p-2 bg-green-900/30 border border-green-600/50 rounded-lg">
                <p className="text-green-400 text-sm">
                  ‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...
                </p>
              </div>
            )}
          </div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
        <div className="glass-container p-6 transition-all duration-500">
          <div className="space-y-4">
            {currentStep === 1 && (
              <Step1BasicInfo
                formData={formData}
                selectedCategory={selectedCategory}
                cabinets={cabinets}
                onInputChange={handleInputChange}
                onCategorySelect={handleCategorySelect}
                onVariantSizeChange={handleVariantSizeChange}
                getSizeOptionsForCategory={getSizeOptionsForCategory}
                discountPercent={discountPercent}
                generateVendorCode={generateVendorCode}
                isLoadingCabinets={isLoadingCabinets}
              />
            )}
            
            {currentStep === 2 && (
              <div className="space-y-6">
                <div className="text-center mb-6">
                  <h2 className="text-2xl font-bold text-white mb-2">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</h2>
                  <p className="text-gray-300">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò</p>
                </div>
                
                {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div className="space-y-4">
                  <label className="block text-lg font-semibold text-white flex items-center gap-2">
                    <Upload className="w-5 h-5 text-blue-400" />
                    –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ *
                  </label>
                  
                  <div className="border-2 border-dashed border-gray-600 rounded-xl p-8 text-center hover:border-blue-400 transition-colors cursor-pointer">
                    <input
                      type="file"
                      onChange={handleImageChange}
                      accept="image/jpeg,image/jpg,image/png,image/webp"
                      className="hidden"
                      id="main-image"
                    />
                    <label htmlFor="main-image" className="cursor-pointer">
                      {imagePreview ? (
                        <div className="space-y-4">
                          <img 
                            src={imagePreview} 
                            alt="–ü—Ä–µ–≤—å—é" 
                            className="max-w-xs mx-auto rounded-lg shadow-lg"
                          />
                          <p className="text-green-400">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</p>
                          <p className="text-gray-400 text-sm">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–º–µ–Ω—ã</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <Upload className="w-12 h-12 mx-auto text-gray-400" />
                          <div>
                            <p className="text-gray-300">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                            <p className="text-gray-500 text-sm">JPEG, PNG, WebP –¥–æ 5MB</p>
                          </div>
                        </div>
                      )}
                    </label>
                  </div>
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <label className="block text-lg font-semibold text-white flex items-center gap-2">
                      <Image className="w-5 h-5 text-blue-400" />
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </label>
                    
                    {formData.additionalImages.length > 0 && (
                      <button
                        type="button"
                        onClick={() => {
                          setFormData(prev => ({ ...prev, additionalImages: [] }));
                          setAdditionalImagePreviews([]);
                        }}
                        className="px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-300 font-medium flex items-center gap-2 backdrop-blur-sm border border-red-500/50 text-sm"
                      >
                        <Trash2 className="w-4 h-4" />
                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                      </button>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                    {additionalImagePreviews.map((preview, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={preview}
                          alt={`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`}
                          className="w-full h-32 object-cover rounded-lg border border-blue-500/30 shadow-md"
                        />
                        <button
                          type="button"
                          onClick={() => removeAdditionalImage(index)}
                          className="absolute -top-2 -right-2 w-5 h-5 bg-red-600 text-white rounded-full hover:bg-red-700 transition-all duration-300 opacity-0 group-hover:opacity-100 shadow-lg hover:shadow-xl transform hover:scale-110 backdrop-blur-sm border border-red-500/50 flex items-center justify-center"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                    
                    {formData.additionalImages.length < 9 && (
                      <div className="w-full h-32 border-2 border-dashed border-blue-500/30 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-blue-400 hover:bg-blue-900/20 transition-all duration-300 bg-black/40 backdrop-blur-md">
                        <Plus className="w-6 h-6 text-gray-400 mb-2" />
                        <p className="text-xs text-gray-300 text-center">–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</p>
                        <input
                          type="file"
                          accept="image/*"
                          multiple
                          onChange={handleAdditionalImagesChange}
                          className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                        />
                      </div>
                    )}
                  </div>
                  
                  {formData.additionalImages.length === 9 && (
                    <div className="px-3 py-2 bg-blue-900/30 border border-blue-600/50 rounded-lg">
                      <p className="text-blue-400 text-xs text-center">
                        –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (9)
                      </p>
                    </div>
                  )}

                  <p className="text-gray-400 text-xs px-2">
                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –ò–ò –ª—É—á—à–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                  </p>
                </div>

                {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º */}
                <div className="space-y-3">
                  <label className="block text-lg font-semibold text-white flex items-center gap-2">
                    <FileText className="w-5 h-5 text-blue-400" />
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                  </label>
                  <textarea
                    name="imageComments"
                    value={formData.imageComments}
                    onChange={handleInputChange}
                    rows={3}
                    className="glass-input w-full text-base"
                    placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ò–ò –ª—É—á—à–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä..."
                  />
                  <p className="text-gray-400 text-xs px-2">
                    –ù–∞–ø—Ä–∏–º–µ—Ä: "–¢–æ–≤–∞—Ä –ø–æ–∫–∞–∑–∞–Ω —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤", "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º", "–ü–æ–∫–∞–∑–∞–Ω –≤ —É–ø–∞–∫–æ–≤–∫–µ"
                  </p>
                </div>
              </div>
            )}
            
            {currentStep === 3 && (
              <div className="space-y-6">
                <div className="text-center mb-6">
                  <h2 className="text-2xl font-bold text-white mb-2">–§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                  <p className="text-gray-300">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º</p>
                </div>
                
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-white">–°–≤–æ–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞:</h3>
                  <div className="glass-container p-4 space-y-2">
                    <p className="text-white"><span className="text-gray-400">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> {formData.name}</p>
                    <p className="text-white"><span className="text-gray-400">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span> {selectedCategory?.displayName}</p>
                    <p className="text-white"><span className="text-gray-400">–¶–µ–Ω–∞:</span> {formData.originalPrice} ‚ÇΩ</p>
                    <p className="text-white"><span className="text-gray-400">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</span> {formData.costPrice ? `${formData.costPrice} ‚ÇΩ` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                    <p className="text-white"><span className="text-gray-400">–ö–∞–±–∏–Ω–µ—Ç:</span> {cabinets.find(c => c.id === formData.cabinetId)?.name}</p>
                    <p className="text-white"><span className="text-gray-400">–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span> {selectedImage ? '–ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}</p>
                    <p className="text-white"><span className="text-gray-400">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ:</span> {formData.additionalImages.length}</p>
                    <p className="text-white"><span className="text-gray-400">–ì–∞–±–∞—Ä–∏—Ç—ã:</span> {formData.length}√ó{formData.width}√ó{formData.height} —Å–º, {formData.weight} –∫–≥</p>
                  </div>
                </div>
              </div>
            )}
            
            {currentStep === 4 && (
              <>
                {console.log('üîç [ProductForm] –†–µ–Ω–¥–µ—Ä–∏–º Step4Results:', {
                  createdProductId,
                  aiAnalysisData,
                  characteristicsCount: aiAnalysisData?.characteristics?.length || 0,
                  aiAnalysisStatus
                })}
                <Step4Results
                  createdProductId={createdProductId}
                aiResponse={{
                  generatedName: aiAnalysisData?.generatedName || formData.name,
                  category: selectedCategory,
                  seoDescription: aiAnalysisData?.seoDescription || '',
                  characteristics: aiAnalysisData?.characteristics || [],
                  qualityScore: aiAnalysisData?.qualityScore || 85
                }}
                aiCharacteristics={aiAnalysisData?.characteristics || []}
                allCategoryCharacteristics={[]}
                isLoadingCharacteristics={aiAnalysisStatus === 'processing'}
                editingCharacteristics={{}}
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                key={`step4-${createdProductId}-${aiAnalysisData?.characteristics?.length || 0}`}
                onUpdateProductField={(field, value) => {
                  if (field === 'name') {
                    setFormData(prev => ({ ...prev, name: value }));
                  } else if (field === 'description') {
                    setFormData(prev => ({ ...prev, description: value }));
                  }
                }}
                onUpdateCharacteristic={(characteristicId, newValue) => {
                  if (aiAnalysisData?.characteristics) {
                    const updatedCharacteristics = aiAnalysisData.characteristics.map((char: any) =>
                      char.id === characteristicId ? { ...char, value: newValue } : char
                    );
                    setAiAnalysisData({
                      ...aiAnalysisData,
                      characteristics: updatedCharacteristics
                    });
                  }
                }}
                onDeleteCharacteristic={(characteristicId) => {
                  if (aiAnalysisData?.characteristics) {
                    const updatedCharacteristics = aiAnalysisData.characteristics.filter((char: any) =>
                      char.id !== characteristicId
                    );
                    setAiAnalysisData({
                      ...aiAnalysisData,
                      characteristics: updatedCharacteristics
                    });
                  }
                }}
                onAddNewCharacteristic={(characteristicId, value) => {
                  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                }}
                onToggleEditCharacteristic={(characteristicId) => {
                  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                }}
                onPublish={() => {
                  if (createdProductId) {
                    publishToWildberries(createdProductId);
                  }
                }}
                onCreateInfographic={() => {
                  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏
                }}
                onClearForm={clearForm}
                onLoadProductCharacteristics={(productId) => {
                  checkAiAnalysisStatus(productId);
                }}
                />
              </>
            )}
          </div>
        </div>

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <div className="glass-container p-4 mt-6 border border-red-500/50 bg-red-500/10 scale-in">
            <div className="flex items-center gap-3">
              <AlertCircle className="w-5 h-5 text-red-400" />
              <span className="text-red-400 font-medium">{error}</span>
            </div>
          </div>
        )}

        {/* –£—Å–ø–µ—Ö */}
        {success && (
          <div className="glass-container p-4 mt-6 border border-green-500/10 scale-in">
            <div className="flex items-center gap-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <span className="text-green-400 font-medium">{success}</span>
            </div>
            
            {/* –°—Ç–∞—Ç—É—Å AI-–∞–Ω–∞–ª–∏–∑–∞ */}
            {aiAnalysisStatus === 'pending' && (
              <div className="mt-3 px-3 py-2 bg-blue-900/30 border border-blue-600/50 rounded-lg">
                <p className="text-blue-400 text-sm">
                  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ AI-–∞–Ω–∞–ª–∏–∑–∞...
                </p>
              </div>
            )}
            
            {aiAnalysisStatus === 'processing' && (
              <div className="mt-3 px-3 py-2 bg-yellow-900/30 border border-yellow-600/50 rounded-lg">
                <p className="text-yellow-400 text-sm">
                  üîÑ AI-–∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
                </p>
              </div>
            )}
            
            {aiAnalysisStatus === 'completed' && (
              <div className="mt-3 px-3 py-2 bg-green-900/30 border border-green-600/50 rounded-lg">
                <p className="text-green-400 text-sm">
                  ‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
                </p>
              </div>
            )}
            
            {aiAnalysisStatus === 'failed' && (
              <div className="mt-3 px-3 py-2 bg-red-900/30 border border-red-600/50 rounded-lg">
                <p className="text-red-400 text-sm">
                  ‚ùå AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
                </p>
              </div>
            )}
          </div>
        )}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        {currentStep < 4 && !isSubmitting && (
          <div className="flex justify-between mt-6">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`glass-button ${
                currentStep === 1 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              <ArrowLeft className="w-4 h-4" />
              –ù–∞–∑–∞–¥
            </button>
            
            {currentStep === 3 ? (
              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="glass-button-primary"
              >
                {isSubmitting ? (
                  <>
                    <div className="loading-spinner w-4 h-4"></div>
                    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4" />
                    –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
                  </>
                )}
              </button>
            ) : (
              <button
                onClick={nextStep}
                className="glass-button-primary"
              >
                –î–∞–ª–µ–µ
                <ArrowRight className="w-4 h-4" />
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
};