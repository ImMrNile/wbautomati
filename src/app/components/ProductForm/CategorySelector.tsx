'use client';

import React, { useEffect, useState, useCallback } from 'react';
import { Search, X, Check, Package } from 'lucide-react';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface WBSubcategory {
  id: number;
  name: string;
  slug: string;
  parentId: number;
  parentName: string;
  displayName: string;
  wbSubjectId?: number;
  score?: number;
  commissions: {
    fbw: number;
    fbs: number;
    dbs: number;
    cc: number;
    edbs: number;
    booking: number;
  };
}

interface CategorySelectorProps {
  onCategorySelect: (category: WBSubcategory | null) => void;
  selectedCategoryId?: number;
  productName: string;
}

// –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ø–∞–º—è—Ç–∏
let categoriesCache: WBSubcategory[] = [];
let cacheTimestamp = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

export default function CategorySelector({ 
  onCategorySelect, 
  selectedCategoryId, 
  productName 
}: CategorySelectorProps) {
  const [query, setQuery] = useState('');
  const [categories, setCategories] = useState<WBSubcategory[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);
  const [error, setError] = useState<string>('');
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  // Debounce hook
  const useDebounce = (value: string, delay: number) => {
    const [debouncedValue, setDebouncedValue] = useState(value);

    useEffect(() => {
      const handler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);

      return () => {
        clearTimeout(handler);
      };
    }, [value, delay]);

    return debouncedValue;
  };

  const debouncedQuery = useDebounce(query, 300);

  // –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  useEffect(() => {
    if (productName && productName.trim().length > 2 && !selectedCategoryId) {
      const trimmedName = productName.trim();
      console.log('üöÄ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', trimmedName);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫
      setQuery('');
      setCategories([]);
      setHasSearched(false);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫
      performSmartSearch(trimmedName, true);
      setHasSearched(true);
    } else if (productName && productName.trim().length <= 2) {
      // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
      setQuery('');
      setCategories([]);
      setHasSearched(false);
    }
  }, [productName, selectedCategoryId]);

  // –ü–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (—Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫)
  useEffect(() => {
    if (debouncedQuery && debouncedQuery.length > 2) {
      performSmartSearch(debouncedQuery, false);
      setHasSearched(true);
    } else if (debouncedQuery === '' && hasSearched && productName.trim().length > 2) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª –ø–æ–∏—Å–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–≤—Ç–æ–ø–æ–∏—Å–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
      performSmartSearch(productName.trim(), true);
    }
  }, [debouncedQuery, hasSearched, productName]);

  // –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const performSmartSearch = async (searchQuery: string, isAutoSearch = false) => {
    if (!searchQuery || searchQuery.length < 2) return;
    
    setIsLoading(true);
    setError('');
    setIsDropdownOpen(true);

    try {
      console.log(`üéØ ${isAutoSearch ? '–ê–≤—Ç–æ–ø–æ–∏—Å–∫' : '–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫'} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${searchQuery}"`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º API
      const apiResponse = await fetch(`/api/categories?action=search&search=${encodeURIComponent(searchQuery)}&limit=20`);
      
      if (apiResponse.ok) {
        const apiData = await apiResponse.json();
        
        if (apiData?.success && apiData.data?.length > 0) {
          console.log(`‚úÖ API –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${apiData.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
          setCategories(apiData.data);
          
          // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
          if (isAutoSearch && !selectedCategoryId && apiData.data.length > 0) {
            const bestMatch = findBestMatch(apiData.data, searchQuery);
            if (bestMatch) {
              console.log('üéØ –ê–≤—Ç–æ–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', bestMatch.name);
              setTimeout(() => {
                onCategorySelect(bestMatch);
                setIsDropdownOpen(false);
              }, 800);
            }
          }
          
          setError('');
          return;
        }
      }
      
      // Fallback: –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      console.log('üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
      const demoResults = await performDemoSearch(searchQuery);
      if (demoResults.length > 0) {
        setCategories(demoResults);
        
        // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –¥–ª—è –¥–µ–º–æ-–ø–æ–∏—Å–∫–∞
        if (isAutoSearch && !selectedCategoryId) {
          const bestMatch = findBestMatch(demoResults, searchQuery);
          if (bestMatch) {
            console.log('üéØ –ê–≤—Ç–æ–≤—ã–±–æ—Ä (–¥–µ–º–æ-–ø–æ–∏—Å–∫):', bestMatch.name);
            setTimeout(() => {
              onCategorySelect(bestMatch);
              setIsDropdownOpen(false);
            }, 1000);
          }
        }
      } else {
        setCategories([]);
        setError(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`);
      }
      
    } catch (e: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', e);
      setError('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∏—Å–∫–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setCategories([]);
      
      // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const demoResults = await performDemoSearch(searchQuery);
      if (demoResults.length > 0) {
        setCategories(demoResults);
        setError('');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –î–µ–º–æ-–ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const performDemoSearch = async (searchQuery: string): Promise<WBSubcategory[]> => {
    const mockCategories: WBSubcategory[] = [
      {
        id: 1,
        name: '–ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã',
        slug: 'naushniki-garnitury',
        parentId: 100,
        parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        displayName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Üí –ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã',
        wbSubjectId: 515,
        commissions: { fbw: 15, fbs: 12, dbs: 10, cc: 8, edbs: 14, booking: 5 }
      },
      {
        id: 2,
        name: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏',
        slug: 'besprovodnye-naushniki',
        parentId: 1,
        parentName: '–ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã',
        displayName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Üí –ù–∞—É—à–Ω–∏–∫–∏ ‚Üí –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏',
        wbSubjectId: 516,
        commissions: { fbw: 15, fbs: 12, dbs: 10, cc: 8, edbs: 14, booking: 5 }
      },
      {
        id: 3,
        name: '–ü—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏',
        slug: 'provodnye-naushniki',
        parentId: 1,
        parentName: '–ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã',
        displayName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Üí –ù–∞—É—à–Ω–∏–∫–∏ ‚Üí –ü—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏',
        wbSubjectId: 517,
        commissions: { fbw: 15, fbs: 12, dbs: 10, cc: 8, edbs: 14, booking: 5 }
      },
      {
        id: 4,
        name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
        slug: 'krossovki',
        parentId: 200,
        parentName: '–û–±—É–≤—å',
        displayName: '–û–±—É–≤—å ‚Üí –ö—Ä–æ—Å—Å–æ–≤–∫–∏',
        wbSubjectId: 1025,
        commissions: { fbw: 18, fbs: 15, dbs: 12, cc: 10, edbs: 16, booking: 6 }
      },
      {
        id: 5,
        name: '–§—É—Ç–±–æ–ª–∫–∏',
        slug: 'futbolki',
        parentId: 300,
        parentName: '–û–¥–µ–∂–¥–∞',
        displayName: '–û–¥–µ–∂–¥–∞ ‚Üí –§—É—Ç–±–æ–ª–∫–∏',
        wbSubjectId: 629,
        commissions: { fbw: 16, fbs: 13, dbs: 11, cc: 9, edbs: 15, booking: 5 }
      },
      {
        id: 6,
        name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã',
        slug: 'telefony',
        parentId: 100,
        parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        displayName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Üí –¢–µ–ª–µ—Ñ–æ–Ω—ã',
        wbSubjectId: 1234,
        commissions: { fbw: 12, fbs: 10, dbs: 8, cc: 6, edbs: 11, booking: 4 }
      }
    ];

    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const queryLower = searchQuery.toLowerCase();
    const results = mockCategories.filter(cat => {
      const nameMatch = cat.name.toLowerCase().includes(queryLower);
      const parentMatch = cat.parentName.toLowerCase().includes(queryLower);
      const displayMatch = cat.displayName.toLowerCase().includes(queryLower);
      
      return nameMatch || parentMatch || displayMatch;
    });

    return results.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  };

  // –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞
  const findBestMatch = useCallback((results: WBSubcategory[], searchQuery: string): WBSubcategory | null => {
    if (results.length === 0) return null;
    
    const queryLower = searchQuery.toLowerCase();
    
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const exactMatch = results.find(cat => 
      cat.name.toLowerCase() === queryLower
    );
    if (exactMatch) return exactMatch;
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    const startMatch = results.find(cat => 
      cat.name.toLowerCase().startsWith(queryLower)
    );
    if (startMatch) return startMatch;
    
    // –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywords = extractKeywords(searchQuery);
    const priorityKeywords = ['–Ω–∞—É—à–Ω–∏–∫–∏', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–æ–±—É–≤—å', '–æ–¥–µ–∂–¥–∞', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏'];
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for (const keyword of priorityKeywords) {
      if (keywords.includes(keyword)) {
        const keywordMatch = results.find(cat => 
          cat.name.toLowerCase().includes(keyword.toLowerCase())
        );
        if (keywordMatch) return keywordMatch;
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return results[0];
  }, []);

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const extractKeywords = (productName: string): string[] => {
    return productName.toLowerCase()
      .split(/[\s\-_]+/)
      .filter(word => word.length > 2)
      .filter(word => !['–¥–ª—è', '—Å–≤–æ–∏—Ö', '–Ω–æ–≤—ã–π', '—Ö–æ—Ä–æ—à–∏–π'].includes(word))
      .slice(0, 5);
  };

  const clearSearch = useCallback(() => {
    setQuery('');
    setCategories([]);
    setHasSearched(false);
    setError('');
    setIsDropdownOpen(false);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–≤—Ç–æ–ø–æ–∏—Å–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    if (productName.trim().length > 2) {
      performSmartSearch(productName.trim(), true);
    }
  }, [productName]);

  const selectedCategory = categories.find(cat => cat.id === selectedCategoryId) || null;

  return (
    <div className="space-y-3">
      {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-4 w-4 text-gray-400" />
        </div>
        <input
          type="text"
          value={query}
          onChange={(e) => {
            setQuery(e.target.value);
            if (e.target.value.length > 0) {
              setIsDropdownOpen(true);
            }
          }}
          onFocus={() => {
            if (categories.length > 0) {
              setIsDropdownOpen(true);
            }
          }}
          placeholder={
            productName?.length > 2
              ? `–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏... (–∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –ø–æ ¬´${productName.slice(0, 20)}‚Ä¶¬ª)`
              : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚Äî –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫'
          }
          className="glass-input w-full pl-10 pr-4"
        />
        {isLoading && (
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
            <div className="loading-spinner w-4 h-4"></div>
          </div>
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="flex items-center gap-2 text-gray-400 text-xs">
        <Search className="w-3 h-3" />
        <span>
          {error ? error :
           !isLoading && !categories.length && hasSearched && (query || productName).length > 2 ?
           `–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ¬´${(query || productName).slice(0, 30)}‚Ä¶¬ª` :
           !(productName && productName.trim().length > 2) ?
           '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã—à–µ ‚Äî –º—ã –ø–æ–¥–±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' :
           '–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...'
          }
        </span>
      </div>

      {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
      {selectedCategory && (
        <div className="glass-container p-4 border border-green-400/30 bg-green-400/10">
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <div className="font-medium text-green-100 text-sm">{selectedCategory.displayName}</div>
              <div className="text-xs text-green-300 mt-1">
                –ö–æ–º–∏—Å—Å–∏—è WB: FBW {selectedCategory.commissions.fbw}% ‚Ä¢ ID: {selectedCategory.wbSubjectId || selectedCategory.id}
              </div>
            </div>
            <button
              onClick={() => {
                onCategorySelect(null);
                clearSearch();
              }}
              className="ml-3 p-1 text-green-400 hover:text-green-300 transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}

      {/* Dropdown —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
      {isDropdownOpen && categories.length > 0 && !selectedCategory && (
        <div className="absolute z-50 w-full mt-2 max-h-60 overflow-y-auto glass-container border border-blue-400/30">
          <div className="p-2">
            <h4 className="text-sm font-medium text-gray-300 mb-2 px-2">
              –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({categories.length}):
            </h4>
            {categories.map((category) => (
              <div
                key={category.id}
                onClick={() => {
                  console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category.name);
                  onCategorySelect(category);
                  setIsDropdownOpen(false);
                  setQuery('');
                }}
                className="p-3 rounded-lg cursor-pointer transition-all duration-200 hover:bg-blue-600/20 border border-transparent hover:border-blue-500/30"
              >
                <div className="font-medium text-white text-sm">{category.displayName}</div>
                <div className="text-xs text-gray-400 mt-1">
                  –ö–æ–º–∏—Å—Å–∏—è: {category.commissions.fbw}% ‚Ä¢ WB ID: {category.wbSubjectId || category.id}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è dropdown */}
      {isDropdownOpen && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setIsDropdownOpen(false)}
        />
      )}
    </div>
  );
}