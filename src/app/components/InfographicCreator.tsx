// src/app/components/InfographicCreator.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import React, { useState, useEffect } from 'react';
import { 
  Image as ImageIcon,
  Upload,
  Sparkles,
  Eye,
  Download,
  RefreshCw,
  CheckCircle,
  AlertCircle,
  Loader,
  X,
  Camera,
  Zap,
  Star,
  TrendingUp,
  Palette
} from 'lucide-react';

interface InfographicCreatorProps {
  productId: string;
  productName: string;
  mainProductImage: string;
  isVisible: boolean;
  onClose: () => void;
}

interface InfographicImage {
  id: string;
  url: string;
  type: 'main' | 'angle' | 'detail' | 'comparison';
  focus: string;
  quality: {
    textAccuracy: number;
    visualAppeal: number;
    brandConsistency: number;
    productPreservation: number;
    overallScore: number;
  };
  productImageUsed: string;
}

interface CreationStats {
  totalImages: number;
  processingTime: number;
  qualityScore: number;
  inputImages: {
    productPhotos: number;
    competitorReferences: number;
  };
}

export default function InfographicCreator({ 
  productId, 
  productName, 
  mainProductImage,
  isVisible, 
  onClose 
}: InfographicCreatorProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentStep, setCurrentStep] = useState(1);
  const [isCreating, setIsCreating] = useState(false);
  const [creationProgress, setCreationProgress] = useState(0);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [additionalImages, setAdditionalImages] = useState<File[]>([]);
  const [additionalImagePreviews, setAdditionalImagePreviews] = useState<string[]>([]);
  const [competitorUrls, setCompetitorUrls] = useState('');
  const [brandColors, setBrandColors] = useState('#2563eb,#ffffff,#f3f4f6');
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const [createdInfographics, setCreatedInfographics] = useState<InfographicImage[]>([]);
  const [creationStats, setCreationStats] = useState<CreationStats | null>(null);
  const [agentLogs, setAgentLogs] = useState<any[]>([]);
  const [existingInfographics, setExistingInfographics] = useState<InfographicImage[]>([]);

  useEffect(() => {
    if (isVisible && productId) {
      checkExistingInfographics();
    }
  }, [isVisible, productId]);

  const checkExistingInfographics = async () => {
    try {
      const response = await fetch(`/api/products/${productId}/infographic`);
      const data = await response.json();
      
      if (data.success && data.hasInfographics) {
        setExistingInfographics(data.data.infographics);
        setCreationStats({
          totalImages: data.data.stats.totalCount,
          processingTime: data.data.stats.processingTime,
          qualityScore: data.data.stats.qualityScore,
          inputImages: { productPhotos: 0, competitorReferences: 0 }
        });
        setCurrentStep(4);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫:', error);
    }
  };

  const handleAdditionalImagesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    
    if (files.length === 0) return;
    
    const totalImages = 1 + additionalImages.length + files.length;
    if (totalImages > 10) {
      setError('–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
    
    for (const file of files) {
      if (!ALLOWED_TYPES.includes(file.type)) {
        setError('–í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (JPEG, PNG, WebP)');
        return;
      }
      
      if (file.size > MAX_FILE_SIZE) {
        setError('–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
        return;
      }
    }

    const newImages = [...additionalImages, ...files];
    setAdditionalImages(newImages);
    setError('');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    const newPreviews = [...additionalImagePreviews];
    
    files.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        newPreviews.push(e.target?.result as string);
        if (newPreviews.length === additionalImagePreviews.length + files.length) {
          setAdditionalImagePreviews(newPreviews);
        }
      };
      reader.readAsDataURL(file);
    });
  };

  const removeAdditionalImage = (index: number) => {
    const newImages = additionalImages.filter((_, i) => i !== index);
    const newPreviews = additionalImagePreviews.filter((_, i) => i !== index);
    setAdditionalImages(newImages);
    setAdditionalImagePreviews(newPreviews);
  };



// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è startInfographicCreation - –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —à–∞–≥—É 3

const startInfographicCreation = async () => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏...');
  
  // –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª—ã
  if (additionalImages.length === 0) {
    setError('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    return;
  }

  setIsCreating(true);
  setCreationProgress(0);
  setError('');
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ —à–∞–≥—É 3
  // setCurrentStep(3); // –£–ë–†–ê–õ–ò –≠–¢–£ –°–¢–†–û–ö–£

  try {
    console.log('üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FormData...');
    
    // –°–æ–∑–¥–∞–µ–º FormData –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    const formData = new FormData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    additionalImages.forEach((file, index) => {
      console.log(`üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª ${index}: ${file.name} (${file.size} bytes, type: ${file.type})`);
      formData.append(`additionalImage${index}`, file, file.name);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    formData.append('additionalImagesCount', additionalImages.length.toString());
    formData.append('competitorUrls', competitorUrls.trim());
    formData.append('brandColors', brandColors.trim());
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
    console.log('üìä FormData —Å–æ–¥–µ—Ä–∂–∏—Ç:');
    for (const [key, value] of formData.entries()) {
      if (value instanceof File) {
        console.log(`- ${key}: File(${value.name}, ${value.size} bytes, ${value.type})`);
      } else {
        console.log(`- ${key}: "${value}"`);
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!productId) {
      throw new Error('productId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    // –ü–ï–†–ï–•–û–î–ò–ú –ö –®–ê–ì–£ 3 –¢–û–õ–¨–ö–û –°–ï–ô–ß–ê–°
    setCurrentStep(3);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressInterval = setInterval(() => {
      setCreationProgress(prev => {
        if (prev >= 90) return prev;
        return prev + Math.random() * 10;
      });
    }, 2000);

    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    console.log(`üìç URL: /api/products/${productId}/infographic`);

    const requestOptions: RequestInit = {
      method: 'POST',
      body: formData
    };

    console.log('üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      method: requestOptions.method,
      bodyType: requestOptions.body?.constructor.name,
      bodySize: formData.entries ? Array.from(formData.entries()).length : 'unknown'
    });

    const response = await fetch(`/api/products/${productId}/infographic`, requestOptions);

    clearInterval(progressInterval);

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    console.log('üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      headers: Object.fromEntries(response.headers.entries())
    });

    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
    const responseText = await response.text();
    console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', responseText.substring(0, 500));

    if (!response.ok) {
      console.error('‚ùå HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
      console.error('‚ùå –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseText);
      throw new Error(`HTTP ${response.status}: ${responseText}`);
    }

    // –ü–∞—Ä—Å–∏–º JSON
    let data: any;
    try {
      data = JSON.parse(responseText);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', {
        success: data.success,
        hasData: !!data.data,
        hasError: !!data.error
      });
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:', responseText);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${parseError instanceof Error ? parseError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if (data.success) {
      setCreationProgress(100);
      setCreatedInfographics(data.data?.infographics || []);
      setCreationStats(data.data?.stats || null);
      setAgentLogs(data.data?.agentLogs || []);
      
      const infographicsCount = data.data?.infographics?.length || 0;
      const qualityScore = data.data?.stats?.qualityScore || 0;
      
      setSuccess(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${infographicsCount} –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫! –ö–∞—á–µ—Å—Ç–≤–æ: ${Math.round(qualityScore * 100)}%`);
      setCurrentStep(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º

      console.log('üéâ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä –°–æ–∑–¥–∞–Ω–æ: ${infographicsCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–æ: ${Math.round(qualityScore * 100)}%`);
    } else {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data);
      throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏:', error);
    setCreationProgress(0);
    
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏';
    
    if (error instanceof Error) {
      errorMessage = error.message;
      console.error('‚ùå Stack trace:', error.stack);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
      errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
    }
    
    setError(`–û—à–∏–±–∫–∞: ${errorMessage}`);
  } finally {
    setIsCreating(false);
  }
};
const downloadInfographic = async (imageUrl: string, fileName: string) => {
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
      setError('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
  };

  const resetCreator = () => {
    setCurrentStep(1);
    setAdditionalImages([]);
    setAdditionalImagePreviews([]);
    setCompetitorUrls('');
    setBrandColors('#2563eb,#ffffff,#f3f4f6');
    setCreatedInfographics([]);
    setExistingInfographics([]);
    setCreationStats(null);
    setAgentLogs([]);
    setError('');
    setSuccess('');
  };

  if (!isVisible) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
              <Sparkles className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-800">–ò–ò –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏</h2>
              <p className="text-sm text-gray-600">{productName}</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="w-8 h-8 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        <div className="px-6 py-4 bg-gray-50 border-b">
          <div className="flex items-center justify-center space-x-4">
            {[1, 2, 3, 4].map((step) => (
              <div key={step} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  step <= currentStep
                    ? 'bg-purple-600 text-white'
                    : 'bg-gray-200 text-gray-500'
                }`}>
                  {step === 1 && <Upload className="w-4 h-4" />}
                  {step === 2 && <Palette className="w-4 h-4" />}
                  {step === 3 && <Zap className="w-4 h-4" />}
                  {step === 4 && <Eye className="w-4 h-4" />}
                </div>
                {step < 4 && (
                  <div className={`w-12 h-1 mx-2 ${
                    step < currentStep ? 'bg-purple-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
          <div className="text-center mt-2 text-sm text-gray-600">
            {currentStep === 1 && '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}
            {currentStep === 2 && '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
            {currentStep === 3 && '–ò–ò —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É'}
            {currentStep === 4 && '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="p-6">
          {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
          {error && (
            <div className="mb-4 bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center gap-2 text-red-700">
                <AlertCircle className="w-5 h-5" />
                <span className="font-medium">–û—à–∏–±–∫–∞:</span>
              </div>
              <p className="text-red-600 mt-1">{error}</p>
            </div>
          )}

          {success && (
            <div className="mb-4 bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center gap-2 text-green-700">
                <CheckCircle className="w-5 h-5" />
                <span className="font-medium">–£—Å–ø–µ—Ö:</span>
              </div>
              <p className="text-green-600 mt-1">{success}</p>
            </div>
          )}

         {/* –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
{currentStep === 1 && (
  <div className="space-y-6">
    <div className="text-center mb-6">
      <h3 className="text-lg font-semibold text-gray-800 mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</h3>
      <p className="text-gray-600">–ò–ò –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏</p>
    </div>

    {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ */}
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
      <h4 className="font-medium text-blue-800 mb-3 flex items-center gap-2">
        <ImageIcon className="w-4 h-4" />
        –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
      </h4>
      <div className="w-32 h-32 border rounded-lg overflow-hidden bg-white mx-auto">
        {mainProductImage ? (
          <img src={mainProductImage} alt="–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ" className="w-full h-full object-cover" />
        ) : (
          <div className="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500">
            –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          </div>
        )}
      </div>
    </div>

    {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ *
        <span className="text-xs text-gray-500 block">–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1-9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏</span>
      </label>
      
      <div className="border-2 border-dashed border-purple-300 rounded-lg p-6 bg-purple-50">
        <div className="text-center">
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleAdditionalImagesChange}
            className="hidden"
            id="additionalImages"
          />
          <label
            htmlFor="additionalImages"
            className="cursor-pointer flex flex-col items-center"
          >
            <Upload className="w-12 h-12 text-purple-500 mb-4" />
            <span className="text-lg font-medium text-purple-700 mb-2">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
            </span>
            <span className="text-sm text-purple-600">
              –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞
            </span>
            <span className="text-xs text-purple-500 mt-2">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPEG, PNG, WebP (–¥–æ 5MB –∫–∞–∂–¥–æ–µ)
            </span>
          </label>
        </div>
        
        <div className="text-xs text-purple-600 mt-3 text-center">
          üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–º–æ–≥—É—Ç –ò–ò –ª—É—á—à–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
        </div>
      </div>

      {/* –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
      {additionalImagePreviews.length > 0 && (
        <div className="mt-4">
          <div className="flex items-center justify-between mb-3">
            <span className="text-sm font-medium text-gray-700">
              –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {additionalImagePreviews.length}/9
            </span>
          </div>
          
          <div className="grid grid-cols-3 md:grid-cols-5 gap-3">
            {additionalImagePreviews.map((preview, index) => (
              <div key={index} className="relative group">
                <div className="aspect-square border rounded-lg overflow-hidden bg-gray-50">
                  <img 
                    src={preview} 
                    alt={`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${index + 1}`} 
                    className="w-full h-full object-cover"
                  />
                </div>
                
                <button
                  type="button"
                  onClick={() => removeAdditionalImage(index)}
                  className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center text-sm hover:bg-red-600 transition-colors opacity-0 group-hover:opacity-100"
                >
                  √ó
                </button>
                
                <div className="absolute bottom-1 left-1 bg-black bg-opacity-60 text-white text-xs px-1 rounded">
                  {index + 1}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>

    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ */}
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 border">
      <h4 className="font-medium text-gray-800 mb-2">–ò–ò —Å–æ–∑–¥–∞—Å—Ç –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏—Å–ø–æ–ª—å–∑—É—è:</h4>
      <ul className="text-sm text-gray-600 space-y-1">
        <li>‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞)</li>
        <li>‚Ä¢ {additionalImagePreviews.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏)</li>
        <li>‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞</li>
        <li>‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–∏–∑–∞–π–Ω–∞</li>
      </ul>
      {additionalImagePreviews.length > 0 && (
        <div className="mt-3 p-2 bg-green-100 rounded text-sm text-green-700">
          ‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–ò —Å–æ–∑–¥–∞—Å—Ç {additionalImagePreviews.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫
        </div>
      )}
      {additionalImagePreviews.length === 0 && (
        <div className="mt-3 p-2 bg-yellow-100 rounded text-sm text-yellow-700">
          ‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        </div>
      )}
    </div>
  </div>
)}
          {/* –®–ê–ì 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <p className="text-gray-600">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç–∏–ª—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</p>
              </div>

              {/* –¶–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¶–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞
                  <span className="text-xs text-gray-500 block">–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX: #2563eb,#ffffff,#f3f4f6</span>
                </label>
                <input
                  type="text"
                  value={brandColors}
                  onChange={(e) => setBrandColors(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  placeholder="#2563eb,#ffffff,#f3f4f6"
                />
                <div className="mt-2 flex gap-2">
                  {brandColors.split(',').slice(0, 5).map((color, index) => (
                    <div
                      key={index}
                      className="w-8 h-8 rounded border"
                      style={{ backgroundColor: color.trim() }}
                      title={color.trim()}
                    />
                  ))}
                </div>
              </div>

              {/* URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  <span className="text-xs text-gray-500 block">–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—É—á—à–µ–π –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏</span>
                </label>
                <textarea
                  value={competitorUrls}
                  onChange={(e) => setCompetitorUrls(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  placeholder="https://www.wildberries.ru/catalog/123456/detail.aspx"
                />
              </div>

              {/* –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-3">–ò—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</h4>
                <div className="grid grid-cols-1 gap-2 text-sm">
                  <div className="flex justify-between">
                    <span>–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:</span>
                    <span className="font-medium">{additionalImages.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:</span>
                    <span className="font-medium">{brandColors.split(',').length} —Ü–≤–µ—Ç–æ–≤</span>
                  </div>
                  <div className="flex justify-between">
                    <span>URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</span>
                    <span className="font-medium">{competitorUrls.split('\n').filter(url => url.trim()).length}</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –®–ê–ì 3: –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div className="text-center">
                <div className="w-20 h-20 mx-auto mb-4 bg-purple-100 rounded-full flex items-center justify-center">
                  {isCreating ? (
                    <Loader className="w-10 h-10 text-purple-600 animate-spin" />
                  ) : (
                    <Sparkles className="w-10 h-10 text-purple-600" />
                  )}
                </div>
                <h3 className="text-xl font-semibold text-gray-800 mb-2">
                  {isCreating ? '–ò–ò —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É...' : '–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é'}
                </h3>
                <p className="text-gray-600">
                  {isCreating 
                    ? '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É'
                    : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞'
                  }
                </p>
              </div>

              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
              {isCreating && (
                <div className="bg-white rounded-lg border p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-700">–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è</span>
                    <span className="text-sm text-gray-500">{Math.round(creationProgress)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div 
                      className="bg-purple-600 h-3 rounded-full transition-all duration-1000"
                      style={{ width: `${creationProgress}%` }}
                    />
                  </div>
                  <div className="mt-4 text-center">
                    <div className="text-sm text-gray-600">
                      {creationProgress < 25 && 'ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'}
                      {creationProgress >= 25 && creationProgress < 50 && 'üé® –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏...'}
                      {creationProgress >= 50 && creationProgress < 75 && '‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é DALL-E...'}
                      {creationProgress >= 75 && creationProgress < 95 && 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...'}
                      {creationProgress >= 95 && 'üìù –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...'}
                    </div>
                  </div>
                </div>
              )}

              {/* –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-3">–ß—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ò–ò:</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Camera className="w-4 h-4 text-purple-600" />
                    <span>{additionalImages.length} –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Palette className="w-4 h-4 text-purple-600" />
                    <span>–ë—Ä–µ–Ω–¥–æ–≤—ã–π –¥–∏–∑–∞–π–Ω</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <TrendingUp className="w-4 h-4 text-purple-600" />
                    <span>–†–∞–∑–º–µ—Ä 1024√ó1792px</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Star className="w-4 h-4 text-purple-600" />
                    <span>–ò–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* –®–ê–ì 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-2">üéâ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –≥–æ—Ç–æ–≤–∞!</h3>
                <p className="text-gray-600">–ò–ò —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏–∑ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ</p>
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              {creationStats && (
                <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6 border">
                  <h4 className="font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-purple-600" />
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                  </h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-purple-600">{creationStats.totalImages}</div>
                      <div className="text-xs text-gray-600">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-600">{Math.round(creationStats.qualityScore * 100)}%</div>
                      <div className="text-xs text-gray-600">–ö–∞—á–µ—Å—Ç–≤–æ</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">{Math.round(creationStats.processingTime / 1000)}—Å</div>
                      <div className="text-xs text-gray-600">–í—Ä–µ–º—è</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-600">{creationStats.inputImages.productPhotos}</div>
                      <div className="text-xs text-gray-600">–ò—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ</div>
                    </div>
                  </div>
                </div>
              )}

              {/* –ì–∞–ª–µ—Ä–µ—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫ */}
              <div>
                <h4 className="font-semibold text-gray-800 mb-4">–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏</h4>
                {(createdInfographics.length > 0 || existingInfographics.length > 0) ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {(createdInfographics.length > 0 ? createdInfographics : existingInfographics).map((infographic, index) => (
                      <div key={infographic.id} className="bg-white rounded-lg border shadow-sm overflow-hidden">
                        <div className="aspect-[3/4] bg-gray-100">
                          <img 
                            src={infographic.url} 
                            alt={`–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ ${index + 1}`}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <div className="p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-gray-800 capitalize">
                              {infographic.type === 'main' && 'üéØ –û—Å–Ω–æ–≤–Ω–∞—è'}
                              {infographic.type === 'angle' && 'üìê –†–∞–∫—É—Ä—Å'}
                              {infographic.type === 'detail' && 'üîç –î–µ—Ç–∞–ª–∏'}
                              {infographic.type === 'comparison' && '‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ'}
                            </span>
                            <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                              {Math.round(infographic.quality.overallScore * 100)}%
                            </span>
                          </div>
                          <p className="text-xs text-gray-600 mb-3">{infographic.focus}</p>
                          
                          <div className="flex gap-2">
                            <button
                              onClick={() => window.open(infographic.url, '_blank')}
                              className="flex-1 flex items-center justify-center gap-1 px-3 py-2 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
                            >
                              <Eye className="w-3 h-3" />
                              –ü—Ä–æ—Å–º–æ—Ç—Ä
                            </button>
                            <button
                              onClick={() => downloadInfographic(infographic.url, `infographic_${infographic.type}_${index + 1}.png`)}
                              className="flex-1 flex items-center justify-center gap-1 px-3 py-2 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                            >
                              <Download className="w-3 h-3" />
                              –°–∫–∞—á–∞—Ç—å
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <AlertCircle className="w-12 h-12 text-yellow-500 mx-auto mb-3" />
                    <h4 className="text-lg font-medium text-gray-800 mb-2">–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                    <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∑–∞–Ω–æ–≤–æ</p>
                  </div>
                )}
              </div>

              {/* –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
              {agentLogs.length > 0 && (
                <details className="bg-gray-50 rounded-lg border">
                  <summary className="p-4 cursor-pointer font-medium text-gray-800">
                    –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã –ò–ò ({agentLogs.length} –∑–∞–ø–∏—Å–µ–π)
                  </summary>
                  <div className="px-4 pb-4 max-h-60 overflow-y-auto">
                    {agentLogs.map((log, index) => (
                      <div key={index} className="text-xs py-1 flex items-center gap-2">
                        <span className={`w-2 h-2 rounded-full ${log.success ? 'bg-green-500' : 'bg-red-500'}`} />
                        <span className="font-mono text-gray-500">{log.agentName}</span>
                        <span className="text-gray-700">{log.message}</span>
                      </div>
                    ))}
                  </div>
                </details>
              )}
            </div>
          )}
        </div>

        {/* –§—É—Ç–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
        <div className="px-6 py-4 bg-gray-50 border-t flex justify-between">
          <div className="flex gap-2">
            {currentStep > 1 && currentStep < 4 && !isCreating && (
              <button
                onClick={() => setCurrentStep(currentStep - 1)}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
            )}
            
            {currentStep === 4 && (
              <button
                onClick={resetCreator}
                className="flex items-center gap-2 px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <RefreshCw className="w-4 h-4" />
                –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ
              </button>
            )}
          </div>

          <div className="flex gap-2">
            <button
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
            
            {currentStep === 1 && (
              <button
                onClick={() => setCurrentStep(2)}
                disabled={additionalImages.length === 0}
                className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                –î–∞–ª–µ–µ
              </button>
            )}
            
            {currentStep === 2 && (
              <button
                onClick={() => setCurrentStep(3)}
                className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
            )}
            
            {currentStep === 3 && !isCreating && (
              <button
                onClick={startInfographicCreation}
                disabled={additionalImages.length === 0}
                className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              >
                <Sparkles className="w-4 h-4" />
                –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}