// components/SmartCategorySelector.tsx - –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏

'use client';

import { useState, useEffect, useCallback } from 'react';
import { Search, Sparkles, ChevronRight, Star, Loader, AlertCircle, Lightbulb } from 'lucide-react';

interface WBCategory {
  objectID: number;
  objectName: string;
  parentID?: number;
  isVisible: boolean;
}

interface CategorySuggestion {
  category: WBCategory;
  confidence: number;
  reason: string;
  keywords: string[];
}

interface SmartCategorySelectorProps {
  apiToken: string;
  productName: string;
  onCategorySelect: (category: WBCategory) => void;
  selectedCategoryId?: string;
  className?: string;
}

export default function SmartCategorySelector({ 
  apiToken, 
  productName,
  onCategorySelect, 
  selectedCategoryId,
  className = "" 
}: SmartCategorySelectorProps) {
  const [categories, setCategories] = useState<WBCategory[]>([]);
  const [suggestions, setSuggestions] = useState<CategorySuggestion[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredCategories, setFilteredCategories] = useState<WBCategory[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showAllCategories, setShowAllCategories] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (apiToken) {
      loadCategories();
    }
  }, [apiToken]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  useEffect(() => {
    if (productName && categories.length > 0) {
      generateCategorySuggestions();
    }
  }, [productName, categories]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  useEffect(() => {
    if (searchQuery.trim() && categories.length > 0) {
      const filtered = categories.filter(cat => 
        cat.objectName.toLowerCase().includes(searchQuery.toLowerCase())
      ).slice(0, 50);
      setFilteredCategories(filtered);
    } else {
      setFilteredCategories([]);
    }
  }, [searchQuery, categories]);

  const loadCategories = async () => {
    setLoading(true);
    setError('');
    
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π...');
      
      // –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockCategories: WBCategory[] = [
        // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
        { objectID: 963, objectName: '–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã', isVisible: true },
        { objectID: 964, objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏', isVisible: true },
        { objectID: 965, objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', isVisible: true },
        { objectID: 966, objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤', isVisible: true },
        { objectID: 967, objectName: '–ù–∞—É—à–Ω–∏–∫–∏ –∏ Bluetooth-–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã', isVisible: true },
        { objectID: 968, objectName: '–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', isVisible: true },
        
        // –î–æ–º –∏ –±—ã—Ç
        { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', isVisible: true },
        { objectID: 2674, objectName: '–ö—É—Ö–æ–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏', isVisible: true },
        { objectID: 2675, objectName: '–î–µ–∫–æ—Ä –¥–ª—è –¥–æ–º–∞', isVisible: true },
        { objectID: 2676, objectName: '–•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', isVisible: true },
        
        // –û–¥–µ–∂–¥–∞
        { objectID: 629, objectName: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', isVisible: true },
        { objectID: 8126, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', isVisible: true },
        { objectID: 566, objectName: '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', isVisible: true },
        
        // –û–±—É–≤—å
        { objectID: 2808, objectName: '–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å', isVisible: true },
        { objectID: 2809, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å', isVisible: true },
        { objectID: 2810, objectName: '–î–µ—Ç—Å–∫–∞—è –æ–±—É–≤—å', isVisible: true },
        
        // –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
        { objectID: 1564, objectName: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', isVisible: true },
        { objectID: 1565, objectName: '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è', isVisible: true },
        
        // –°–ø–æ—Ä—Ç
        { objectID: 4091, objectName: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', isVisible: true },
        { objectID: 4092, objectName: '–§–∏—Ç–Ω–µ—Å –∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã', isVisible: true },
        
        // –ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã
        { objectID: 4748, objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', isVisible: true },
        { objectID: 4749, objectName: '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isVisible: true },
        
        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        { objectID: 5001, objectName: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', isVisible: true },
        { objectID: 5002, objectName: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', isVisible: true },
        
        // –ò–≥—Ä—É—à–∫–∏
        { objectID: 4750, objectName: '–ò–≥—Ä—É—à–∫–∏', isVisible: true },
        { objectID: 4751, objectName: '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—É—à–∫–∏', isVisible: true }
      ];

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (apiToken && apiToken.length > 10) {
        try {
    const response = await fetch('/api/wb-proxy', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    endpoint: '/content/v2/object/all?locale=ru&limit=1000',
    method: 'GET',
    apiToken,
    useCache: true
  })
});


          const result = await response.json();
          if (result.success && result.data?.data && result.data.data.length > 0) {
            const realCategories = result.data.data.filter((cat: WBCategory) => cat.isVisible !== false);
            setCategories(realCategories);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${realCategories.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ WB API`);
            return;
          }
        } catch (apiError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      setCategories(mockCategories);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mockCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞.');
    } finally {
      setLoading(false);
    }
  };

  const generateCategorySuggestions = useCallback(() => {
    if (!productName || categories.length === 0) return;

    console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è: "${productName}"`);
    
    const normalizedProductName = productName.toLowerCase().trim();
    const productWords = normalizedProductName.split(/[\s,.-]+/).filter(word => word.length > 2);
    
    // –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const categoryPatterns = [
      // –ö–∞–±–µ–ª–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
      { 
        keywords: ['–∫–∞–±–µ–ª—å', '–ø—Ä–æ–≤–æ–¥', '–∑–∞—Ä—è–¥–∫–∞', '–∑–∞—Ä—è–¥–Ω—ã–π', 'usb', 'type-c', 'lightning', 'micro', '–∞–¥–∞–ø—Ç–µ—Ä', '—à–Ω—É—Ä', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫', 'hdmi', 'aux'], 
        searchTerms: ['–∫–∞–±–µ–ª', '–ø—Ä–æ–≤–æ–¥', '–∑–∞—Ä—è–¥–∫–∞', '–∞–¥–∞–ø—Ç–µ—Ä', '—à–Ω—É—Ä'],
        priority: 10
      },
      // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      { 
        keywords: ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', 'iphone', 'samsung', 'xiaomi', '–º–æ–±–∏–ª—å–Ω—ã–π', '—á–µ—Ö–æ–ª –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞'], 
        searchTerms: ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω'],
        priority: 8
      },
      // –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ
      { 
        keywords: ['–Ω–∞—É—à–Ω–∏–∫–∏', '–Ω–∞—É—à–Ω–∏–∫', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–±–ª—é—Ç—É–∑', 'bluetooth', '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ', 'tws'], 
        searchTerms: ['–Ω–∞—É—à–Ω–∏–∫', 'bluetooth', '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω'],
        priority: 8
      },
      // –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
      { 
        keywords: ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '–ø–∫', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–º—ã—à—å', '–º–æ–Ω–∏—Ç–æ—Ä', '–≤–µ–±-–∫–∞–º–µ—Ä–∞'], 
        searchTerms: ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä', '–º—ã—à—å'],
        priority: 7
      },
      // –î–æ–º –∏ –±—ã—Ç
      { 
        keywords: ['–¥–æ–º', '–±—ã—Ç', '–∫—É—Ö–Ω—è', '–ø–æ—Å—É–¥–∞', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'], 
        searchTerms: ['–¥–æ–º', '–∫—É—Ö–Ω', '–ø–æ—Å—É–¥'],
        priority: 5
      }
    ];

    const categorySuggestions: CategorySuggestion[] = [];

    // –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for (const pattern of categoryPatterns) {
      let matches = 0;
      let matchedWords: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
      for (const keyword of pattern.keywords) {
        if (productWords.some(word => word.includes(keyword) || keyword.includes(word))) {
          matches++;
          matchedWords.push(keyword);
        }
      }

      if (matches > 0) {
        // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
        for (const searchTerm of pattern.searchTerms) {
          const foundCategories = categories.filter(cat => 
            cat.objectName.toLowerCase().includes(searchTerm)
          );

          for (const category of foundCategories.slice(0, 2)) { // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω
            const confidence = (matches / pattern.keywords.length) * (pattern.priority / 10);
            
            if (!categorySuggestions.find(s => s.category.objectID === category.objectID)) {
              categorySuggestions.push({
                category,
                confidence,
                reason: `–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${matchedWords.join(', ')}`,
                keywords: matchedWords
              });
            }
          }
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä—è–º—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for (const word of productWords) {
      if (word.length > 3) {
        const directMatches = categories.filter(cat => 
          cat.objectName.toLowerCase().includes(word) && 
          !categorySuggestions.find(s => s.category.objectID === cat.objectID)
        );

        for (const category of directMatches.slice(0, 2)) {
          categorySuggestions.push({
            category,
            confidence: 0.6,
            reason: `–ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${word}"`,
            keywords: [word]
          });
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-6
    const topSuggestions = categorySuggestions
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 6);

    setSuggestions(topSuggestions);
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${topSuggestions.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, 
      topSuggestions.map(s => ({ name: s.category.objectName, confidence: s.confidence }))
    );
  }, [productName, categories]);

  const handleCategorySelect = (category: WBCategory) => {
    onCategorySelect(category);
  };

  const getConfidenceColor = (confidence: number): string => {
    if (confidence >= 0.7) return 'text-green-600 bg-green-100';
    if (confidence >= 0.4) return 'text-yellow-600 bg-yellow-100';
    return 'text-gray-600 bg-gray-100';
  };

  const getConfidenceText = (confidence: number): string => {
    if (confidence >= 0.7) return '–í—ã—Å–æ–∫–∞—è';
    if (confidence >= 0.4) return '–°—Ä–µ–¥–Ω—è—è';
    return '–ù–∏–∑–∫–∞—è';
  };

  if (loading) {
    return (
      <div className={`${className}`}>
        <div className="flex items-center justify-center py-8">
          <Loader className="w-6 h-6 animate-spin mr-2" />
          <span>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`${className}`}>
        <div className="flex items-center gap-2 p-4 bg-red-50 border border-red-200 rounded">
          <AlertCircle className="w-5 h-5 text-red-600" />
          <div>
            <div className="font-medium text-red-800">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>
            <div className="text-sm text-red-600 mt-1">{error}</div>
          </div>
        </div>
        <button
          onClick={loadCategories}
          className="mt-3 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className={`space-y-4 ${className}`}>
      {/* –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      {suggestions.length > 0 && (
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200">
          <div className="flex items-center gap-2 mb-3">
            <Sparkles className="w-5 h-5 text-purple-600" />
            <h4 className="font-semibold text-gray-800">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
            <span className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
              –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            </span>
          </div>
          
          <div className="space-y-2">
            {suggestions.map((suggestion, index) => (
              <div
                key={suggestion.category.objectID}
                className={`p-3 bg-white rounded border cursor-pointer hover:bg-gray-50 transition-colors ${
                  selectedCategoryId === suggestion.category.objectID.toString() 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-200'
                }`}
                onClick={() => handleCategorySelect(suggestion.category)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">{suggestion.category.objectName}</span>
                      <span className={`text-xs px-2 py-1 rounded-full ${getConfidenceColor(suggestion.confidence)}`}>
                        {getConfidenceText(suggestion.confidence)}
                      </span>
                      {index === 0 && suggestion.confidence >= 0.7 && (
                        <Star className="w-4 h-4 text-yellow-500 fill-current" />
                      )}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">{suggestion.reason}</div>
                    <div className="text-xs text-gray-500">ID: {suggestion.category.objectID}</div>
                  </div>
                  <ChevronRight className="w-4 h-4 text-gray-400" />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
      <div>
        <div className="flex items-center gap-2 mb-3">
          <Search className="w-5 h-5 text-gray-600" />
          <span className="font-medium text-gray-800">–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</span>
        </div>
        
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        {searchQuery && filteredCategories.length > 0 && (
          <div className="mt-3 max-h-60 overflow-y-auto border rounded">
            {filteredCategories.map(category => (
              <div
                key={category.objectID}
                className={`p-3 border-b last:border-b-0 cursor-pointer hover:bg-gray-50 transition-colors ${
                  selectedCategoryId === category.objectID.toString() 
                    ? 'bg-blue-50 border-blue-200' 
                    : ''
                }`}
                onClick={() => handleCategorySelect(category)}
              >
                <div className="font-medium">{category.objectName}</div>
                <div className="text-sm text-gray-500">ID: {category.objectID}</div>
              </div>
            ))}
          </div>
        )}

        {searchQuery && filteredCategories.length === 0 && (
          <div className="mt-3 p-4 text-center text-gray-500 border rounded">
            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery}"
          </div>
        )}
      </div>

      {/* –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {!searchQuery && suggestions.length === 0 && (
        <div className="text-center py-8">
          <Lightbulb className="w-12 h-12 text-gray-400 mx-auto mb-3" />
          <div className="text-gray-600 mb-2">–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
          <div className="text-sm text-gray-500">
            –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤—ã—à–µ
          </div>
        </div>
      )}

      {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
      {selectedCategoryId && (
        <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="text-sm font-medium text-green-800">
            ‚úÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {categories.find(c => c.objectID.toString() === selectedCategoryId)?.objectName}
          </div>
          <div className="text-sm text-green-600">ID: {selectedCategoryId}</div>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="text-xs text-gray-500 pt-2 border-t">
        –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.length} | 
        {suggestions.length > 0 && ` –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${suggestions.length} |`}
        {searchQuery && ` –ù–∞–π–¥–µ–Ω–æ: ${filteredCategories.length} |`}
        –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫—Ç–∏–≤–Ω–∞
      </div>
    </div>
  );
}