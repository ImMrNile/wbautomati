// src/app/api/wb-categories/characteristics/route.ts - API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface CategoryCharacteristic {
  id: number;
  name: string;
  required: boolean;
  type: 'string' | 'number' | 'boolean' | 'select' | 'multiselect';
  values?: string[];
  units?: string[];
  description?: string;
}

interface CharacteristicsResponse {
  success: boolean;
  data?: {
    categoryId: number;
    categoryName: string;
    characteristics: CategoryCharacteristic[];
    total: number;
    cached: boolean;
    lastUpdated: Date;
  };
  error?: string;
}

// –ö–µ—à –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
const characteristicsCache = new Map<string, {
  data: CategoryCharacteristic[];
  timestamp: number;
  ttl: number;
}>();

const CACHE_TTL = 6 * 60 * 60 * 1000; // 6 —á–∞—Å–æ–≤ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

/**
 * GET - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - cabinetId: ID –∫–∞–±–∏–Ω–µ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
 * - categoryId: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
 * - useCache: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const cabinetId = searchParams.get('cabinetId');
    const categoryId = searchParams.get('categoryId');
    const useCache = searchParams.get('useCache') !== 'false';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!cabinetId || !categoryId) {
      return NextResponse.json({
        success: false,
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã cabinetId –∏ categoryId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    const categoryIdNum = parseInt(categoryId);
    if (isNaN(categoryIdNum)) {
      return NextResponse.json({
        success: false,
        error: 'categoryId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
    const cabinet = await prisma.cabinet.findUnique({
      where: { id: cabinetId }
    });

    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({
        success: false,
        error: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const apiToken = await decryptTokenIfNeeded(cabinet.apiToken);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const characteristicsData = await loadCharacteristicsWithCache(
      apiToken, 
      categoryIdNum, 
      useCache
    );

    if (!characteristicsData.success) {
      return NextResponse.json(characteristicsData, { status: 500 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryName = await getCategoryName(apiToken, categoryIdNum);

    return NextResponse.json({
      success: true,
      data: {
        categoryId: categoryIdNum,
        categoryName,
        characteristics: characteristicsData.data!.characteristics,
        total: characteristicsData.data!.characteristics.length,
        cached: characteristicsData.data!.cached,
        lastUpdated: characteristicsData.data!.lastUpdated
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GET /wb-categories/characteristics:', error);
    return NextResponse.json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${error.message}`
    }, { status: 500 });
  }
}

/**
 * POST - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * Body: { cabinetId: string, categoryId: number, characteristics: Record<string, any> }
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { cabinetId, categoryId, characteristics } = body;

    if (!cabinetId || !categoryId || !characteristics) {
      return NextResponse.json({
        success: false,
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã cabinetId, categoryId –∏ characteristics –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç
    const cabinet = await prisma.cabinet.findUnique({
      where: { id: cabinetId }
    });

    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({
        success: false,
        error: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const apiToken = await decryptTokenIfNeeded(cabinet.apiToken);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCharcs = await loadCharacteristicsWithCache(apiToken, categoryId, true);

    if (!categoryCharcs.success) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }, { status: 500 });
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const validationResult = validateCharacteristics(
      categoryCharcs.data!.characteristics,
      characteristics
    );

    return NextResponse.json({
      success: true,
      data: validationResult
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ POST /wb-categories/characteristics:', error);
    return NextResponse.json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${error.message}`
    }, { status: 500 });
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞
 */
async function loadCharacteristicsWithCache(
  apiToken: string, 
  categoryId: number, 
  useCache: boolean = true
): Promise<{ success: boolean; data?: { characteristics: CategoryCharacteristic[]; cached: boolean; lastUpdated: Date }; error?: string }> {
  const cacheKey = `${apiToken}-${categoryId}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  if (useCache) {
    const cached = characteristicsCache.get(cacheKey);
    if (cached && Date.now() < cached.timestamp + cached.ttl) {
      console.log(`üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞`);
      return {
        success: true,
        data: {
          characteristics: cached.data,
          cached: true,
          lastUpdated: new Date(cached.timestamp)
        }
      };
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
  return await loadCharacteristicsFromWbApi(apiToken, categoryId);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ WB API
 */
async function loadCharacteristicsFromWbApi(
  apiToken: string, 
  categoryId: number
): Promise<{ success: boolean; data?: { characteristics: CategoryCharacteristic[]; cached: boolean; lastUpdated: Date }; error?: string }> {
  try {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}...`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ WB API
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'}/api/wb-proxy`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        endpoint: `/content/v2/object/charcs/${categoryId}?locale=ru`,
        method: 'GET',
        apiToken,
        useCache: false
      })
    });

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫');
    }

    const rawCharacteristics = result.data?.data || [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const characteristics = normalizeCharacteristics(rawCharacteristics);

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const cacheKey = `${apiToken}-${categoryId}`;
    characteristicsCache.set(cacheKey, {
      data: characteristics,
      timestamp: Date.now(),
      ttl: CACHE_TTL
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);

    return {
      success: true,
      data: {
        characteristics,
        cached: false,
        lastUpdated: new Date()
      }
    };

  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
    return {
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${error.message}`
    };
  }
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ WB API
 */
function normalizeCharacteristics(rawCharacteristics: any[]): CategoryCharacteristic[] {
  return rawCharacteristics.map((char: any) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    let type: CategoryCharacteristic['type'] = 'string';
    
    if (char.unitName || char.units) {
      type = 'number';
    } else if (char.dictionary && char.dictionary.length > 0) {
      type = char.maxCount > 1 ? 'multiselect' : 'select';
    } else if (char.name && char.name.toLowerCase().includes('–¥–∞/–Ω–µ—Ç')) {
      type = 'boolean';
    }

    return {
      id: char.id || char.charcID,
      name: char.name || char.charcName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      required: char.required || false,
      type,
      values: char.dictionary?.map((item: any) => item.value || item.name) || [],
      units: char.units || (char.unitName ? [char.unitName] : []),
      description: char.description
    };
  }).filter(char => char.id && char.name); // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function getCategoryName(apiToken: string, categoryId: number): Promise<string> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'}/api/wb-categories?cabinetId=temp&flat=true`, {
      headers: {
        'Authorization': `Bearer ${apiToken}`
      }
    });

    if (response.ok) {
      const result = await response.json();
      const category = result.data?.categories?.find((cat: any) => cat.objectID === categoryId);
      if (category) {
        return category.objectName;
      }
    }
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–µ—à–∞');
  }

  return `–ö–∞—Ç–µ–≥–æ—Ä–∏—è #${categoryId}`;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
 */
function validateCharacteristics(
  requiredCharacteristics: CategoryCharacteristic[],
  providedCharacteristics: Record<string, any>
): {
  valid: boolean;
  errors: string[];
  warnings: string[];
  missingRequired: string[];
  extraCharacteristics: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];
  const missingRequired: string[] = [];
  const extraCharacteristics: string[] = [];

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const requiredMap = new Map<number, CategoryCharacteristic>();
  requiredCharacteristics.forEach(char => {
    requiredMap.set(char.id, char);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  requiredCharacteristics.forEach(char => {
    if (char.required) {
      const value = providedCharacteristics[char.id];
      if (value === undefined || value === null || value === '') {
        missingRequired.push(char.name);
        errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${char.name}" –Ω–µ —É–∫–∞–∑–∞–Ω–∞`);
      }
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  Object.entries(providedCharacteristics).forEach(([charId, value]) => {
    const charIdNum = parseInt(charId);
    const requiredChar = requiredMap.get(charIdNum);

    if (!requiredChar) {
      extraCharacteristics.push(charId);
      warnings.push(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å ID ${charId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
      return;
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const validationError = validateCharacteristicValue(requiredChar, value);
    if (validationError) {
      errors.push(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${requiredChar.name}": ${validationError}`);
    }
  });

  return {
    valid: errors.length === 0,
    errors,
    warnings,
    missingRequired,
    extraCharacteristics
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 */
function validateCharacteristicValue(
  characteristic: CategoryCharacteristic,
  value: any
): string | null {
  if (value === undefined || value === null) {
    return characteristic.required ? '–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : null;
  }

  switch (characteristic.type) {
    case 'string':
      if (typeof value !== 'string') {
        return '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      }
      if (value.trim().length === 0 && characteristic.required) {
        return '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
      }
      if (value.length > 500) {
        return '–ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)';
      }
      break;

    case 'number':
      const numValue = parseFloat(value);
      if (isNaN(numValue)) {
        return '–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      }
      if (numValue < 0) {
        return '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º';
      }
      break;

    case 'boolean':
      if (typeof value !== 'boolean' && value !== 'true' && value !== 'false' && value !== 1 && value !== 0) {
        return '–û–∂–∏–¥–∞–µ—Ç—Å—è –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ (true/false)';
      }
      break;

    case 'select':
      if (characteristic.values && characteristic.values.length > 0) {
        if (!characteristic.values.includes(String(value))) {
          return `–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${characteristic.values.join(', ')}`;
        }
      }
      break;

    case 'multiselect':
      if (!Array.isArray(value)) {
        return '–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π';
      }
      if (characteristic.values && characteristic.values.length > 0) {
        const invalidValues = value.filter(v => !characteristic.values!.includes(String(v)));
        if (invalidValues.length > 0) {
          return `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${invalidValues.join(', ')}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${characteristic.values.join(', ')}`;
        }
      }
      break;
  }

  return null;
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
 */
async function decryptTokenIfNeeded(encryptedToken: string): Promise<string> {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  return encryptedToken;
}