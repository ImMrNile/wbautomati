// src/app/api/products/route.ts - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ê–†–¢–ò–ö–£–õ–ê –ò –ö–ê–¢–ï–ì–û–†–ò–ò

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { uploadService } from '../../../../lib/services/uploadService';
import { enhancedGeminiService } from '../../../../lib/services/enhancedGeminiService';
import { updatedWbApiService } from '../../../../lib/services/updatedWbApiService';
import { WB_API_CONFIG, DEFAULT_VALUES } from '../../../../lib/config/wbApiConfig';
import { 
  WBCategory, 
  normalizeCategory, 
  getCategoryId, 
  WB_CATEGORY_DEFAULTS 
} from '../../../../lib/types/wbTypes';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –ø–æ–ª—è)
    const cabinetId = formData.get('cabinetId') as string;
    const productName = formData.get('name') as string;
    const price = parseFloat(formData.get('price') as string);
    const packageContents = formData.get('packageContents') as string;
    const referenceUrl = formData.get('referenceUrl') as string;
    const autoPublish = formData.get('autoPublish') === 'true';
    const dimensions = JSON.parse(formData.get('dimensions') as string);
    
    // –ù–û–í–´–ï –ü–û–õ–Ø
    const vendorCode = formData.get('vendorCode') as string;
    const categoryId = formData.get('categoryId') as string;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!cabinetId || !productName || !price || !packageContents || !vendorCode) {
      return NextResponse.json({ 
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: cabinetId, name, price, packageContents, vendorCode' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞
    const cabinet = await prisma.cabinet.findUnique({ 
      where: { id: cabinetId } 
    });
    
    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({ 
        error: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 400 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageFile = formData.get('image') as File | null;
    let imageUrl = '';
    
    if (imageFile) {
      try {
        imageUrl = await uploadService.uploadFile(imageFile);
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return NextResponse.json({ 
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        }, { status: 400 });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î
    const product = await prisma.product.create({
      data: {
        originalName: productName,
        originalImage: imageUrl,
        price: price,
        dimensions: JSON.stringify(dimensions),
        referenceUrl: referenceUrl || null,
        status: 'PROCESSING',
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        wbData: JSON.stringify({
          userVendorCode: vendorCode,
          userCategoryId: categoryId
        }),
        productCabinets: {
          create: {
            cabinetId: cabinetId,
            isSelected: true
          }
        }
      },
      include: {
        productCabinets: {
          include: { cabinet: true }
        }
      }
    });

    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${product.id}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    processProductAsync(product.id, {
      imageUrl,
      productName,
      packageContents,
      referenceUrl,
      price,
      dimensions,
      autoPublish,
      cabinet,
      vendorCode, // –ù–æ–≤–æ–µ –ø–æ–ª–µ
      categoryId  // –ù–æ–≤–æ–µ –ø–æ–ª–µ
    }).catch(error => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.id}:`, error);
    });

    return NextResponse.json({ 
      id: product.id, 
      message: '–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑',
      status: 'PROCESSING'
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API /products:', error);
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      details: error.message 
    }, { status: 500 });
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê)
async function processProductAsync(productId: string, data: {
  imageUrl: string;
  productName: string;
  packageContents: string;
  referenceUrl?: string;
  price: number;
  dimensions: any;
  autoPublish: boolean;
  cabinet: any;
  vendorCode: string;    // –ù–æ–≤–æ–µ –ø–æ–ª–µ
  categoryId?: string;   // –ù–æ–≤–æ–µ –ø–æ–ª–µ
}) {
  try {
    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await prisma.product.update({
      where: { id: productId },
      data: { status: 'PROCESSING' }
    });

    // –®–∞–≥ 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑
    console.log('üì∏ –ó–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞...');
    const aiAnalysis = await enhancedGeminiService.analyzeProductComprehensive({
      userImage: data.imageUrl,
      userProductName: data.productName,
      packageContents: data.packageContents,
      referenceUrl: data.referenceUrl,
      price: data.price,
      dimensions: data.dimensions
    });

    console.log('‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      confidence: aiAnalysis.metadata.confidence,
      categoryId: aiAnalysis.wbContent.categoryId,
      warnings: aiAnalysis.metadata.warnings
    });

    // –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤—ã–±–æ—Ä—É) - –ò–°–ü–†–ê–í–õ–ï–ù–û
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞...');
    let validCategoryId: number;
    
    if (data.categoryId) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      validCategoryId = parseInt(data.categoryId);
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${validCategoryId}`);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç –ò–ò –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –≤ WB
      try {
        validCategoryId = aiAnalysis.wbContent.categoryId;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ WB - –ò–°–ü–†–ê–í–õ–ï–ù–û
        const categories = await updatedWbApiService.getAllCategories(data.cabinet.id);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const normalizedCategories = categories.map(normalizeCategory);
        
        const foundCategory = normalizedCategories.find((cat: WBCategory) => {
          return cat.objectID === validCategoryId;
        });
        
        if (!foundCategory) {
          console.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${validCategoryId} –æ—Ç –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ WB`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const aiCategoryName = "–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã";
          const bestCategory = await updatedWbApiService.findBestCategory(
            aiCategoryName, 
            data.cabinet.id
          );
          
          if (bestCategory) {
            validCategoryId = getCategoryId(bestCategory);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${validCategoryId}`);
          } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
          }
        } else {
          console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –ò–ò –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${validCategoryId}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—â–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –ò–°–ü–†–ê–í–õ–ï–ù–û
        try {
          const categories = await updatedWbApiService.getAllCategories(data.cabinet.id);
          if (categories.length > 0) {
            const firstCategory = normalizeCategory(categories[0]);
            validCategoryId = firstCategory.objectID || WB_CATEGORY_DEFAULTS.FALLBACK_CATEGORY_ID;
            console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${validCategoryId}`);
          } else {
            throw new Error('–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB –ø—É—Å—Ç');
          }
        } catch (fallbackError) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', fallbackError);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
          validCategoryId = WB_CATEGORY_DEFAULTS.FALLBACK_CATEGORY_ID;
          console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${validCategoryId}`);
        }
      }
    }

    // –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB
    console.log('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API...');
    const wbCardData = updatedWbApiService.prepareCardDataForWB({
      vendorCode: data.vendorCode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞—Ä—Ç–∏–∫—É–ª
      title: aiAnalysis.wbContent.title,
      description: aiAnalysis.wbContent.description,
      brand: aiAnalysis.referenceAnalysis.extractedBrand || DEFAULT_VALUES.BRAND,
      categoryId: validCategoryId,
      price: data.price,
      dimensions: data.dimensions,
      characteristics: aiAnalysis.wbContent.characteristics,
      packageContents: data.packageContents
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    await prisma.product.update({
      where: { id: productId },
      data: {
        generatedName: aiAnalysis.wbContent.title,
        seoDescription: aiAnalysis.wbContent.description,
        aiCharacteristics: JSON.stringify(aiAnalysis),
        suggestedCategory: `${validCategoryId}`,
        colorAnalysis: aiAnalysis.imageAnalysis.primaryColor,
        status: 'READY'
      }
    });

    console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');

    // –®–∞–≥ 4: –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if (data.autoPublish) {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');
      
      await prisma.product.update({
        where: { id: productId },
        data: { status: 'PUBLISHING' }
      });

      try {
        const publishResult = await updatedWbApiService.createProductCard(
          wbCardData, 
          data.cabinet.apiToken
        );

        if (publishResult.success) {
          await prisma.product.update({
            where: { id: productId },
            data: {
              status: 'PUBLISHED',
              publishedAt: new Date(),
              wbData: JSON.stringify({
                ...publishResult.data,
                userVendorCode: data.vendorCode,
                userCategoryId: data.categoryId,
                finalCategoryId: validCategoryId
              })
            }
          });

          console.log(`üéâ –ü—Ä–æ–¥—É–∫—Ç ${productId} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!`);
          
          if (publishResult.taskId) {
            console.log(`üìã Task ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${publishResult.taskId}`);
          }
        } else {
          throw new Error(publishResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
      } catch (publishError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', publishError);
        
        await prisma.product.update({
          where: { id: productId },
          data: {
            status: 'ERROR',
            errorMessage: `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${publishError instanceof Error ? publishError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          }
        });
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

  } catch (error: any) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error);
    
    await prisma.product.update({
      where: { id: productId },
      data: {
        status: 'ERROR',
        errorMessage: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
      }
    });
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const cabinetId = searchParams.get('cabinetId');
    const status = searchParams.get('status');
    const limit = parseInt(searchParams.get('limit') || '20');
    const offset = parseInt(searchParams.get('offset') || '0');

    const whereClause: any = {};
    
    if (cabinetId) {
      whereClause.productCabinets = {
        some: { cabinetId }
      };
    }
    
    if (status) {
      whereClause.status = status;
    }

    const products = await prisma.product.findMany({
      where: whereClause,
      include: {
        productCabinets: {
          include: { cabinet: true }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: limit,
      skip: offset
    });

    const total = await prisma.product.count({ where: whereClause });

    return NextResponse.json({
      products,
      pagination: {
        total,
        limit,
        offset,
        hasMore: offset + limit < total
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 
      details: error.message 
    }, { status: 500 });
  }
}