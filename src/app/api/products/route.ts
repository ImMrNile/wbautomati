// src/app/api/products/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º WB API

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient, Cabinet } from '@prisma/client';
import { hybridWBParser } from '../../../../lib/services/hybridWBParser';
import { uploadService } from '../../../../lib/services/uploadService';
import { geminiService } from '../../../../lib/services/geminiService';

const prisma = new PrismaClient();

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface ProductAnalysisResult {
  visualAnalysis: {
    productType: string;
    primaryColor: string;
    material: string;
    style: string;
    keyFeatures: string[];
    targetAudience: string;
    confidence: number;
    detailedDescription?: string;
    categoryKeywords?: string[];
  };
  categoryAnalysis?: {
    primaryCategory: string;
    secondaryCategories: string[];
    categoryConfidence: number;
    reasonForCategory: string;
  };
  seoTitle: string;
  seoDescription: string;
  characteristics: { id: number; value: string; }[];
  suggestedKeywords: string[];
  competitiveAdvantages: string[];
  wbCategory: string;
  tnvedCode?: string;
  marketingInsights: {
    pricePosition: string;
    uniqueSellingPoints: string[];
    targetAgeGroup: string;
    seasonality: string;
  };
}

interface WBCardData {
  vendorCode: string;
  title: string;
  description: string;
  brand: string;
  imtId: number;
  characteristics: Array<{
    id: number;
    value: string;
  }>;
}

interface CategoryMatch {
  category: {
    objectID: number;
    objectName: string;
    parentID?: number;
    parentName?: string;
    isLeaf?: boolean;
  };
  score: number;
  reason: string;
  source: 'ai' | 'reference' | 'keywords' | 'fallback';
}

enum ProductStatus {
  PROCESSING = 'PROCESSING',
  READY = 'READY',
  PUBLISHING = 'PUBLISHING',
  PUBLISHED = 'PUBLISHED',
  ERROR = 'ERROR'
}

// =======================================
// –û–°–ù–û–í–ù–û–ô POST ENDPOINT
// =======================================

export async function POST(request: NextRequest) {
  let productId: string | null = null;
  
  try {
    const formData = await request.formData();

    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const originalName = formData.get('name') as string;
    const image = formData.get('image') as File;
    const dimensions = JSON.parse(formData.get('dimensions') as string);
    const price = parseFloat(formData.get('price') as string);
    const referenceUrl = formData.get('referenceUrl') as string | null;
    const cabinetId = formData.get('cabinetId') as string;
    const autoPublish = formData.get('autoPublish') === 'true';
    const packageContents = formData.get('packageContents') as string;

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!originalName || !image || !price || !cabinetId || !packageContents) {
      return NextResponse.json({ 
        error: '–í—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    if (price <= 0) {
      return NextResponse.json({ 
        error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è'
      }, { status: 400 });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
    const cabinet = await prisma.cabinet.findUnique({ 
      where: { id: cabinetId } 
    });
    
    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({ 
        error: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
      }, { status: 400 });
    }

    // 4. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    let imageUrl: string;
    try {
      imageUrl = await uploadService.uploadFile(image);
    } catch (error: any) {
      return NextResponse.json({ 
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`
      }, { status: 400 });
    }

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î
    const product = await prisma.product.create({
      data: {
        originalName,
        originalImage: imageUrl,
        dimensions: JSON.stringify(dimensions),
        price,
        referenceUrl: referenceUrl || undefined,
        status: ProductStatus.PROCESSING
      }
    });
    productId = product.id;

    // 6. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞-–∞–Ω–∞–ª–æ–≥–∞ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    let referenceData = null;
    if (referenceUrl && referenceUrl.trim()) {
      try {
        console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä-–∞–Ω–∞–ª–æ–≥...');
        referenceData = await hybridWBParser.getProductData(referenceUrl);
        
        if (referenceData) {
          await prisma.product.update({
            where: { id: productId },
            data: { referenceData: JSON.stringify(referenceData) }
          });
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }
      } catch (error: any) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–æ–≥–∞:', error.message);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –∞–Ω–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å
      }
    }

    // 7. –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É
    await prisma.productCabinet.create({
      data: { 
        productId: productId, 
        cabinetId: cabinetId, 
        isSelected: true 
      }
    });

    // 8. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processProductAutonomous(
      productId,
      originalName, 
      imageUrl, 
      dimensions, 
      price, 
      packageContents,
      referenceData, 
      cabinet, 
      autoPublish
    ).catch(error => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ ERROR
      if (productId) {
        prisma.product.update({
          where: { id: productId },
          data: {
            status: ProductStatus.ERROR,
            errorMessage: error.message || '–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'
          }
        }).catch(console.error);
      }
    });

    return NextResponse.json({
      id: productId,
      status: 'processing',
      message: '–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É',
    });

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ POST /api/products:', error);
    
    if (productId) {
      try {
        await prisma.product.update({
          where: { id: productId },
          data: {
            status: ProductStatus.ERROR,
            errorMessage: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è.'
          }
        });
      } catch (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', updateError);
      }
    }
    
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      details: error.message 
    }, { status: 500 });
  }
}

// =======================================
// –§–û–ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
// =======================================

async function processProductAutonomous(
  productId: string, 
  name: string, 
  imageUrl: string, 
  dimensions: any, 
  price: number,
  packageContents: string,
  referenceData: any, 
  cabinet: Cabinet, 
  autoPublish: boolean = false
) {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}`);

  try {
    // –®–∞–≥ 1: –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¢–ù –í–≠–î
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑...');
    let geminiAnalysis: ProductAnalysisResult;
    
    try {
      geminiAnalysis = await geminiService.analyzeProductForWB({
        productName: name, 
        images: [imageUrl],
        packageContents,
        referenceData,
        dimensions,
        price
      });
      console.log(`‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –¢–ù –í–≠–î: ${geminiAnalysis.tnvedCode}`);
    } catch (aiError: any) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', aiError.message);
      geminiAnalysis = createFallbackAnalysis(name, price, referenceData);
    }

    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB
    console.log('üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB...');
    const wbCategories = await getWBCategoriesWithFallback(cabinet.apiToken);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${wbCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // –®–∞–≥ 3: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryMatch = findBestCategoryForProduct(
      geminiAnalysis, 
      wbCategories, 
      referenceData
    );

    // –®–∞–≥ 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¢–ù –í–≠–î
    const finalTnvedCode = determineFinalTnvedCode(
      referenceData?.tnved,
      geminiAnalysis.tnvedCode,
      name
    );
    console.log(`üí° –§–∏–Ω–∞–ª—å–Ω—ã–π –¢–ù –í–≠–î: ${finalTnvedCode}`);
    
    // –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('üîß –ì–æ—Ç–æ–≤–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...');
    const characteristics = prepareProductCharacteristics(
      geminiAnalysis,
      categoryMatch.category,
      dimensions,
      packageContents,
      finalTnvedCode,
      referenceData
    );

    // –®–∞–≥ 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ WB
    const wbCardData = prepareWBCardData(
      geminiAnalysis,
      categoryMatch.category,
      characteristics,
      productId,
      referenceData,
      price
    );
    
    // –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î
    await prisma.product.update({
      where: { id: productId },
      data: {
        generatedName: wbCardData.title,
        seoDescription: wbCardData.description,
        suggestedCategory: categoryMatch.category.objectName,
        colorAnalysis: geminiAnalysis.visualAnalysis?.primaryColor || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        aiCharacteristics: JSON.stringify({ 
          geminiAnalysis, 
          wbData: wbCardData, 
          category: categoryMatch,
          finalTnvedCode 
        }),
        status: autoPublish ? ProductStatus.PUBLISHING : ProductStatus.READY
      }
    });

    // –®–∞–≥ 8: –ü—É–±–ª–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if (autoPublish) {
      console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä –≤ WB...');
      try {
        const publishResult = await publishToWildberries(wbCardData, cabinet.apiToken);
        
        if (publishResult.success) {
          await prisma.product.update({
            where: { id: productId },
            data: { 
              status: ProductStatus.PUBLISHED, 
              wbNmId: publishResult.nmId, 
              publishedAt: new Date() 
            }
          });
          console.log(`üéâ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! NM ID: ${publishResult.nmId}`);
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${publishResult.error}`);
        }
      } catch (publishError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', publishError);
        await prisma.product.update({
          where: { id: productId },
          data: { 
            status: ProductStatus.ERROR,
            errorMessage: `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${publishError.message}`
          }
        });
        return;
      }
    }
    
    console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    await prisma.product.update({
      where: { id: productId },
      data: { 
        status: ProductStatus.ERROR, 
        errorMessage: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' 
      }
    });
  }
}

// =======================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =======================================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò
 */
function createFallbackAnalysis(name: string, price: number, referenceData?: any): ProductAnalysisResult {
  const category = determineBasicCategory(name, referenceData);
  
  return {
    seoTitle: name.substring(0, 60),
    seoDescription: `${name} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏.`,
    wbCategory: category,
    tnvedCode: determineBasicTnved(name),
    visualAnalysis: {
      productType: name,
      primaryColor: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      material: '–Ω–µ —É–∫–∞–∑–∞–Ω',
      style: '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
      keyFeatures: ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–¥–æ–ª–≥–æ–≤–µ—á–Ω—ã–π'],
      targetAudience: '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
      confidence: 0.5,
      detailedDescription: '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      categoryKeywords: extractBasicKeywords(name)
    },
    categoryAnalysis: {
      primaryCategory: category,
      secondaryCategories: [],
      categoryConfidence: 50,
      reasonForCategory: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –±–∞–∑–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º'
    },
    characteristics: [],
    suggestedKeywords: name.split(' ').filter(word => word.length > 2),
    competitiveAdvantages: ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–Ω–∞–¥–µ–∂–Ω—ã–π'],
    marketingInsights: {
      pricePosition: price > 1000 ? 'premium' : 'budget',
      uniqueSellingPoints: ['—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞'],
      targetAgeGroup: '18-65',
      seasonality: '–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–æ'
    }
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 */
function determineBasicCategory(productName: string, referenceData?: any): string {
  const name = productName.toLowerCase();
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
  if (name.includes('–∫–∞–±–µ–ª—å') || name.includes('–∑–∞—Ä—è–¥–∫') || name.includes('usb') || 
      name.includes('type-c') || name.includes('–ø—Ä–æ–≤–æ–¥') || name.includes('–∞–¥–∞–ø—Ç–µ—Ä')) {
    return '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';
  }
  
  // –ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã
  if (name.includes('–∞–≤—Ç–æ') || name.includes('–º–∞—à–∏–Ω') || name.includes('–∞–≤—Ç–æ–º–æ–±–∏–ª')) {
    return '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã';
  }
  
  // –û–¥–µ–∂–¥–∞
  if (name.includes('—Ñ—É—Ç–±–æ–ª–∫') || name.includes('—Ä—É–±–∞—à–∫') || name.includes('–ø–ª–∞—Ç—å–µ')) {
    return '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å';
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–æ–≥–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
  if (referenceData?.category && 
      !referenceData.category.toLowerCase().includes('–¥–æ–º')) {
    return referenceData.category;
  }
  
  return '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¢–ù –í–≠–î
 */
function determineBasicTnved(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–∫–∞–±–µ–ª—å') || name.includes('–ø—Ä–æ–≤–æ–¥') || name.includes('usb')) {
    return '8544429009'; // –ö–∞–±–µ–ª–∏
  }
  
  if (name.includes('–∑–∞—Ä—è–¥–∫') || name.includes('–∞–¥–∞–ø—Ç–µ—Ä')) {
    return '8504409900'; // –ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  }
  
  if (name.includes('–Ω–∞—É—à–Ω–∏–∫')) {
    return '8518300000'; // –ù–∞—É—à–Ω–∏–∫–∏
  }
  
  return '8544429009'; // –î–µ—Ñ–æ–ª—Ç
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
function extractBasicKeywords(productName: string): string[] {
  const name = productName.toLowerCase();
  const keywords: string[] = [];
  
  if (name.includes('–∫–∞–±–µ–ª—å')) keywords.push('–∫–∞–±–µ–ª—å');
  if (name.includes('–∑–∞—Ä—è–¥–∫')) keywords.push('–∑–∞—Ä—è–¥–∫–∞');
  if (name.includes('usb')) keywords.push('usb');
  if (name.includes('type-c')) keywords.push('type-c');
  
  return keywords;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¢–ù –í–≠–î –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 */
function determineFinalTnvedCode(
  referenceTnved?: string,
  aiTnved?: string, 
  productName?: string
): string {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–ù –í–≠–î –∏–∑ –∞–Ω–∞–ª–æ–≥–∞
  if (referenceTnved && referenceTnved.length === 10) {
    return referenceTnved;
  }
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –¢–ù –í–≠–î –æ—Ç –ò–ò
  if (aiTnved && aiTnved.length === 10) {
    return aiTnved;
  }
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  if (productName) {
    return determineBasicTnved(productName);
  }
  
  // –î–µ—Ñ–æ–ª—Ç
  return '8544429009';
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞
 */
function prepareProductCharacteristics(
  geminiAnalysis: ProductAnalysisResult,
  category: any,
  dimensions: any,
  packageContents: string,
  tnvedCode: string,
  referenceData?: any
): Array<{ id: number; value: string }> {
  const characteristics = [
    { id: 8229, value: referenceData?.brand || 'NoName' }, // –ë—Ä–µ–Ω–¥
    { id: 7919, value: '–†–æ—Å—Å–∏—è' }, // –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    { id: 214, value: tnvedCode }, // –¢–ù –í–≠–î
    { id: 17031, value: packageContents }, // –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
  ];

  // –†–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  if (dimensions.length) {
    characteristics.push({ id: 16999, value: String(dimensions.length) });
  }
  if (dimensions.width) {
    characteristics.push({ id: 17001, value: String(dimensions.width) });
  }
  if (dimensions.height) {
    characteristics.push({ id: 17003, value: String(dimensions.height) });
  }
  if (dimensions.weight) {
    characteristics.push({ id: 17005, value: String(Math.round(dimensions.weight * 1000)) });
  }

  // –¶–≤–µ—Ç
  if (geminiAnalysis.visualAnalysis?.primaryColor && 
      geminiAnalysis.visualAnalysis.primaryColor !== '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') {
    characteristics.push({ 
      id: 14863, 
      value: geminiAnalysis.visualAnalysis.primaryColor 
    });
  }

  return characteristics;
}

/**
 * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
 */
function findBestCategoryForProduct(
  geminiAnalysis: ProductAnalysisResult,
  wbCategories: any[],
  referenceData?: any
): CategoryMatch {
  console.log('üéØ === –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ò ===');
  console.log(`ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: "${geminiAnalysis.wbCategory}"`);
  console.log(`üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: "${geminiAnalysis.visualAnalysis?.productType}"`);
  
  if (referenceData?.category) {
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceData.category}"`);
  }

  const matches: CategoryMatch[] = [];

  // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  const aiMatch = findByAICategory(geminiAnalysis.wbCategory, wbCategories);
  if (aiMatch) {
    matches.push(aiMatch);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò: ${aiMatch.category.objectName}`);
  }

  // 2. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const keywordMatches = findByKeywords(
    geminiAnalysis.visualAnalysis?.productType || '',
    geminiAnalysis.visualAnalysis?.categoryKeywords || [],
    wbCategories
  );
  matches.push(...keywordMatches);

  // 3. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞)
  if (referenceData?.category) {
    const referenceMatch = findByReferenceName(
      referenceData.category, 
      wbCategories, 
      geminiAnalysis
    );
    if (referenceMatch) {
      matches.push(referenceMatch);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å–∫–æ—Ä—É
  matches.sort((a, b) => {
    const sourcePriority = { 'ai': 4, 'keywords': 3, 'reference': 2, 'fallback': 1 };
    const aPriority = sourcePriority[a.source];
    const bPriority = sourcePriority[b.source];
    
    if (aPriority !== bPriority) {
      return bPriority - aPriority;
    }
    return b.score - a.score;
  });

  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (matches.length > 0) {
    const bestMatch = matches[0];
    console.log(`üèÜ –í–´–ë–†–ê–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø: "${bestMatch.category.objectName}"`);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${bestMatch.source}, –û—Ü–µ–Ω–∫–∞: ${bestMatch.score}`);
    return bestMatch;
  }

  // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
  return getFallbackCategory(geminiAnalysis);
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function findByAICategory(aiCategory: string, categories: any[]): CategoryMatch | null {
  if (!aiCategory || aiCategory.length < 3) return null;

  const aiLower = aiCategory.toLowerCase().trim();
  
  for (const category of categories) {
    const categoryName = (category.objectName || '').toLowerCase();
    
    if (categoryName === aiLower || categoryName.includes(aiLower) || aiLower.includes(categoryName)) {
      return {
        category,
        score: categoryName === aiLower ? 100 : 90,
        reason: '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
        source: 'ai'
      };
    }
  }

  return null;
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
 */
function findByKeywords(
  productType: string, 
  categoryKeywords: string[], 
  categories: any[]
): CategoryMatch[] {
  const matches: CategoryMatch[] = [];
  
  const electronicsKeywords = [
    '–∫–∞–±–µ–ª—å', 'cable', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'usb', 'type-c', 'lightning',
    '–∑–∞—Ä—è–¥–Ω–æ–µ', '–∑–∞—Ä—è–¥–∫–∞', 'charger', '–∞–¥–∞–ø—Ç–µ—Ä', 'adapter',
    '–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones', 'bluetooth', '–∫–æ–ª–æ–Ω–∫–∞', 'speaker'
  ];

  const searchText = `${productType} ${categoryKeywords.join(' ')}`.toLowerCase();

  const electronicsMatches = electronicsKeywords.filter(keyword => 
    searchText.includes(keyword)
  );

  if (electronicsMatches.length > 0) {
    const electronicsCategory = categories.find(cat => 
      cat.objectName.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞') ||
      cat.objectID === 1229
    );

    if (electronicsCategory) {
      matches.push({
        category: electronicsCategory,
        score: 85 + (electronicsMatches.length * 5),
        reason: `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏: ${electronicsMatches.join(', ')}`,
        source: 'keywords'
      });
    }
  }

  return matches;
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–æ–≥–∞
 */
function findByReferenceName(
  referenceCategoryName: string, 
  categories: any[], 
  geminiAnalysis: ProductAnalysisResult
): CategoryMatch | null {
  if (!referenceCategoryName) return null;

  const refLower = referenceCategoryName.toLowerCase();
  const productType = geminiAnalysis.visualAnalysis?.productType?.toLowerCase() || '';

  // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  if ((refLower.includes('–¥–æ–º') || refLower.includes('—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞')) && 
      (productType.includes('–∫–∞–±–µ–ª') || productType.includes('–∑–∞—Ä—è–¥–∫') || productType.includes('usb'))) {
    console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
    return null;
  }

  for (const category of categories) {
    const categoryName = (category.objectName || '').toLowerCase();
    
    if (categoryName.includes(refLower) || refLower.includes(categoryName)) {
      return {
        category,
        score: 60,
        reason: '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∞–Ω–∞–ª–æ–≥–∞',
        source: 'reference'
      };
    }
  }

  return null;
}

/**
 * Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
function getFallbackCategory(geminiAnalysis: ProductAnalysisResult): CategoryMatch {
  const productType = geminiAnalysis.visualAnalysis?.productType?.toLowerCase() || '';
  const aiCategory = geminiAnalysis.wbCategory?.toLowerCase() || '';
  
  // –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
  if (productType.includes('–∫–∞–±–µ–ª') || productType.includes('–∑–∞—Ä—è–¥–∫') || 
      productType.includes('usb') || aiCategory.includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω')) {
    return {
      category: { 
        objectID: 1229, 
        objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 
        parentID: 0, 
        parentName: '', 
        isLeaf: true 
      },
      score: 45,
      reason: '–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
      source: 'fallback'
    };
  }

  // –û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  return {
    category: { 
      objectID: 14727, 
      objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', 
      parentID: 0, 
      parentName: '', 
      isLeaf: true 
    },
    score: 25,
    reason: '–û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
    source: 'fallback'
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB —Å fallback
 */
async function getWBCategoriesWithFallback(apiToken?: string): Promise<any[]> {
  try {
    if (apiToken) {
      return await hybridWBParser.getWBCategories(apiToken);
    }
    throw new Error('API —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ');
    return getStaticCategories();
  }
}

/**
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getStaticCategories(): any[] {
  return [
    { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 5392, objectName: '–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
    { objectID: 9836, objectName: '–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
    { objectID: 340, objectName: '–ù–∞—É—à–Ω–∏–∫–∏', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
    { objectID: 306, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 566, objectName: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 1347, objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 1408, objectName: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true }
  ];
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–ª—è WB API
 */
function prepareWBCardData(
  geminiAnalysis: ProductAnalysisResult,
  category: { objectID: number; objectName: string },
  characteristics: Array<{ id: number; value: string }>,
  productId: string,
  referenceData?: any,
  price?: number
): WBCardData {
  
  const timestamp = Date.now().toString().slice(-6);
  const productHash = productId.substring(0, 4).toUpperCase();
  const vendorCode = `AI-${timestamp}-${productHash}`;

  let title = geminiAnalysis.seoTitle || geminiAnalysis.visualAnalysis?.productType || '–¢–æ–≤–∞—Ä';
  title = title.substring(0, 60).trim();

  let description = geminiAnalysis.seoDescription || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ';
  description = description.substring(0, 1000).trim();

  let brand = characteristics.find(c => c.id === 8229)?.value || 'NoName';
  if (referenceData?.brand && referenceData.brand.length < 50) {
    brand = referenceData.brand;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è WB API
  const finalImtId = category.objectID;

  const cardData: WBCardData = {
    vendorCode,
    title,
    description,
    brand,
    imtId: finalImtId,
    characteristics: characteristics
      .filter(char => char.value && char.value.trim() !== '') // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      .map(char => ({
        id: char.id,
        value: String(char.value).trim()
      }))
  };

  console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:');
  console.log(`   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
  console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.objectName} (ID: ${finalImtId})`);
  console.log(`   üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: ${vendorCode}`);
  console.log(`   üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${cardData.characteristics.length}`);
  
  return cardData;
}

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ Wildberries —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º API
 */
async function publishToWildberries(cardData: WBCardData, apiToken: string): Promise<{
  success: boolean;
  nmId?: number;
  data?: any;
  error?: string;
}> {
  try {
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ WB API...');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', JSON.stringify(cardData, null, 2));
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Content API v2
    const response = await fetch('https://content-api.wildberries.ru/content/v2/cards/upload', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiToken}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify([cardData]), // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
      signal: AbortSignal.timeout(30000)
    });

    console.log(`üì° –û—Ç–≤–µ—Ç WB API: ${response.status} ${response.statusText}`);

    let responseData;
    const responseText = await response.text();
    
    try {
      responseData = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ WB API:', responseText);
      throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç WB API: ${responseText}`);
    }

    console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ WB API:', JSON.stringify(responseData, null, 2));

    if (!response.ok) {
      const errorMessage = responseData?.errorText || responseData?.message || `HTTP ${response.status}`;
      throw new Error(errorMessage);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    if (Array.isArray(responseData) && responseData.length > 0) {
      const result = responseData[0];
      
      if (result.error || result.errorText) {
        return {
          success: false,
          error: result.errorText || result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ WB API'
        };
      }
      
      const nmId = result.nmId || result.nmID;
      if (nmId) {
        console.log(`üéâ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å NM ID: ${nmId}`);
        return {
          success: true,
          nmId: nmId,
          data: result
        };
      }
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è
    return {
      success: false,
      error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API',
      data: responseData
    };

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API';
    
    if (error.message.includes('timeout')) {
      errorMessage = '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API';
    } else if (error.message.includes('format is incorrect')) {
      errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB API';
    } else if (error.message.includes('Authorization')) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WB API - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω';
    } else if (error.message) {
      errorMessage = error.message;
    }
    
    return {
      success: false,
      error: errorMessage
    };
  }
}

// =======================================
// GET ENDPOINT
// =======================================

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const action = url.searchParams.get('action');

    if (action === 'categories') {
      const categories = await getWBCategoriesWithFallback();
      return NextResponse.json({
        success: true,
        categories: categories.slice(0, 50),
        total: categories.length
      });
    }

    if (action === 'parser-status') {
      const status = hybridWBParser.getParserStatus();
      return NextResponse.json({
        success: true,
        parserStatus: status,
        recommendations: status.recommendations
      });
    }

    if (action === 'test-category-search') {
      const productName = url.searchParams.get('productName') || '–ö–∞–±–µ–ª—å Type-C';
      const aiCategory = url.searchParams.get('aiCategory') || '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';
      
      const mockAnalysis: ProductAnalysisResult = {
        wbCategory: aiCategory,
        tnvedCode: '8544429009',
        visualAnalysis: {
          productType: productName,
          primaryColor: '—á–µ—Ä–Ω—ã–π',
          material: '–ø–ª–∞—Å—Ç–∏–∫',
          style: '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
          keyFeatures: ['–±—ã—Å—Ç—Ä–∞—è –∑–∞—Ä—è–¥–∫–∞'],
          targetAudience: '–≤–∑—Ä–æ—Å–ª—ã–µ',
          confidence: 0.9,
          categoryKeywords: ['–∫–∞–±–µ–ª—å', 'usb', 'type-c']
        },
        seoTitle: productName,
        seoDescription: `${productName} –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞`,
        characteristics: [],
        suggestedKeywords: [],
        competitiveAdvantages: [],
        marketingInsights: {
          pricePosition: '—Å—Ä–µ–¥–Ω–∏–π',
          uniqueSellingPoints: [],
          targetAgeGroup: '18-65',
          seasonality: '–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–æ'
        }
      };
      
      const categories = await getWBCategoriesWithFallback();
      const categoryMatch = findBestCategoryForProduct(mockAnalysis, categories);
      
      return NextResponse.json({
        success: true,
        result: categoryMatch,
        testData: {
          productName,
          aiCategory,
          finalCategory: categoryMatch.category.objectName,
          source: categoryMatch.source,
          score: categoryMatch.score
        }
      });
    }

    if (action === 'test-card-format') {
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
      const testCard: WBCardData = {
        vendorCode: 'TEST-123456',
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ WB API',
        brand: 'TestBrand',
        imtId: 1229,
        characteristics: [
          { id: 8229, value: 'TestBrand' },
          { id: 7919, value: '–†–æ—Å—Å–∏—è' },
          { id: 214, value: '8544429009' }
        ]
      };

      return NextResponse.json({
        success: true,
        testCard,
        message: '–§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WB API'
      });
    }

    return NextResponse.json({
      error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: categories, parser-status, test-category-search, test-card-format'
    }, { status: 400 });

  } catch (error: any) {
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    }, { status: 500 });
  }
}