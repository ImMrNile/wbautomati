// src/app/api/products/route.ts - API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å Enhanced System (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import { uploadService } from '../../../../lib/services/uploadService';
import { AuthService } from '../../../../lib/auth/auth-service';
import { fromPrismaJson, toPrismaJson } from '../../../../lib/utils/json';

// –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
import { EnhancedCharacteristicsIntegrationService } from '../../../../lib/services/enhancedCharacteristicsService';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const enhancedCharacteristicsIntegrationService = new EnhancedCharacteristicsIntegrationService();

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)
 */
async function checkDatabaseConnection(): Promise<{
  connected: boolean;
  latency?: number;
  error?: string;
}> {
  const startTime = Date.now();
  
  try {
    await prisma.$queryRaw`SELECT 1 as health_check`;
    
    const latency = Date.now() - startTime;
    console.log('‚úÖ [DB] Database health check passed, latency:', latency + 'ms');
    
    return { connected: true, latency };
    
  } catch (error) {
    console.error('‚ùå [DB] Database health check failed:', error);
    
    return { 
      connected: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
export async function POST(request: NextRequest) {
  const startTime = Date.now();
  let productId: string | undefined = undefined;
  
  try {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('   - DATABASE_URL:', process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('   - DIRECT_URL:', process.env.DIRECT_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('   - NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    try {
      const connectionStatus = await checkDatabaseConnection();
      if (connectionStatus.connected) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.error('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å:', connectionStatus.error);
      }
    } catch (dbError: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
      console.error('üîß –ö–æ–¥ –æ—à–∏–±–∫–∏:', dbError.code);
      console.error('üí° –°–æ–æ–±—â–µ–Ω–∏–µ:', dbError.message);
      
      if (dbError.code === 'P1001') {
        console.error('üö® –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        console.error('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ aws-1-eu-north-1.pooler.supabase.com');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –∏ DIRECT_URL');
      }
      
      if (dbError.code === 'P1017') {
        console.error('üö® –ü—Ä–æ–±–ª–µ–º–∞: –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        console.error('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
      }
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let user = null;
    try {
      user = await AuthService.getCurrentUser();
    } catch (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError);
      
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        details: authError instanceof Error ? authError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ'
      }, { status: 401 });
    }
    
    if (!user) {
      return NextResponse.json({ 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        suggestion: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'
      }, { status: 401 });
    }

    console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const formData = await request.formData();
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ formData:');
    for (const [key, value] of formData.entries()) {
      console.log(`  ${key}: ${value} (—Ç–∏–ø: ${typeof value})`);
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null/undefined
    const productData = {
      name: (formData.get('name') as string) || '',
      originalPrice: (formData.get('originalPrice') as string) || '',
      discountPrice: (formData.get('discountPrice') as string) || '',
      costPrice: (formData.get('costPrice') as string) || '',
      packageContents: (formData.get('packageContents') as string) || '',
      length: (() => {
        const dimensions = formData.get('dimensions');
        if (dimensions && typeof dimensions === 'string') {
          try {
            const parsed = JSON.parse(dimensions);
            return parsed.length?.toString() || '';
          } catch (e) {
            return '';
          }
        }
        return '';
      })(),
      width: (() => {
        const dimensions = formData.get('dimensions');
        if (dimensions && typeof dimensions === 'string') {
          try {
            const parsed = JSON.parse(dimensions);
            return parsed.width?.toString() || '';
          } catch (e) {
            return '';
          }
        }
        return '';
      })(),
      height: (() => {
        const dimensions = formData.get('dimensions');
        if (dimensions && typeof dimensions === 'string') {
          try {
            const parsed = JSON.parse(dimensions);
            return parsed.height?.toString() || '';
          } catch (e) {
            return '';
          }
        }
        return '';
      })(),
      weight: (() => {
        const dimensions = formData.get('dimensions');
        if (dimensions && typeof dimensions === 'string') {
          try {
            const parsed = JSON.parse(dimensions);
            return parsed.weight?.toString() || '';
          } catch (e) {
            return '';
          }
        }
        return '';
      })(),
      referenceUrl: (formData.get('referenceUrl') as string) || '',
      cabinetId: (formData.get('cabinetId') as string) || '',
      vendorCode: (formData.get('vendorCode') as string) || '',
      autoGenerateVendorCode: formData.get('autoGenerateVendorCode') === 'true',
      barcode: (formData.get('barcode') as string) || '',
      hasVariantSizes: formData.get('hasVariantSizes') === 'true',
      variantSizes: (() => {
        try {
          const variantSizesData = formData.get('variantSizes');
          if (variantSizesData && typeof variantSizesData === 'string') {
            return JSON.parse(variantSizesData);
          }
          return [];
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ variantSizes, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤:', error);
          return [];
        }
      })(),
      description: (formData.get('description') as string) || '',
      mainImage: formData.get('image') as File || null,
      imageComments: (formData.get('imageComments') as string) || '',
      categoryId: (formData.get('categoryId') as string) || '',
      categoryName: (formData.get('categoryName') as string) || '',
      parentCategoryName: (formData.get('parentCategoryName') as string) || '',
      additionalImagesCount: parseInt((formData.get('additionalImagesCount') as string) || '0'),
    };

    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', productData);

    // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const validationErrors = [];
    
    if (!productData.name || productData.name.trim() === '') {
      validationErrors.push('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    }
    
    if (!productData.originalPrice || productData.originalPrice.trim() === '') {
      validationErrors.push('–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞');
    }
    
    if (!productData.discountPrice || productData.discountPrice.trim() === '') {
      validationErrors.push('—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π');
    }
    
    if (!productData.packageContents || productData.packageContents.trim() === '') {
      validationErrors.push('–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è');
    }
    
    if (!productData.length || productData.length.trim() === '') {
      validationErrors.push('–¥–ª–∏–Ω–∞');
    }
    
    if (!productData.width || productData.width.trim() === '') {
      validationErrors.push('—à–∏—Ä–∏–Ω–∞');
    }
    
    if (!productData.height || productData.height.trim() === '') {
      validationErrors.push('–≤—ã—Å–æ—Ç–∞');
    }
    
    if (!productData.weight || productData.weight.trim() === '') {
      validationErrors.push('–≤–µ—Å');
    }
    
    if (!productData.vendorCode || productData.vendorCode.trim() === '') {
      validationErrors.push('–∞—Ä—Ç–∏–∫—É–ª');
    }
    
    if (!productData.barcode || productData.barcode.trim() === '') {
      validationErrors.push('—à—Ç—Ä–∏—Ö–∫–æ–¥');
    }
    
    if (!productData.categoryId || productData.categoryId.trim() === '') {
      validationErrors.push('–∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    }
    
    if (!productData.mainImage) {
      validationErrors.push('–≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
    
    if (validationErrors.length > 0) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationErrors);
      return NextResponse.json({ 
        error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${validationErrors.join(', ')}`,
        receivedData: {
          name: productData.name,
          originalPrice: productData.originalPrice,
          discountPrice: productData.discountPrice,
          packageContents: productData.packageContents,
          dimensions: {
            length: productData.length,
            width: productData.width,
            height: productData.height,
            weight: productData.weight
          },
          vendorCode: productData.vendorCode,
          barcode: productData.barcode,
          categoryId: productData.categoryId,
          hasMainImage: !!productData.mainImage
        }
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    console.log(`üìê –†–∞–∑–º–µ—Ä—ã: ${productData.length}√ó${productData.width}√ó${productData.height} —Å–º`);
    console.log(`‚öñÔ∏è –í–µ—Å: ${productData.weight} –∫–≥`);
    console.log(`üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: ${productData.packageContents}`);
    console.log(`üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: ${productData.vendorCode}`);
    console.log(`üìä –®—Ç—Ä–∏—Ö–∫–æ–¥: ${productData.barcode}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${productData.categoryName} (ID: ${productData.categoryId})`);

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –∏–∑ –ë–î
    let cabinets = [];
    try {
      cabinets = await prisma.cabinet.findMany({
        where: { userId: user.id, isActive: true }
      });
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${cabinets.length} –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –ë–î:', dbError);
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        details: dbError instanceof Error ? dbError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

    if (cabinets.length === 0) {
      console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: user.id,
        userEmail: user.email,
        cabinetsCount: cabinets.length
      });
      return NextResponse.json({ 
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        userId: user.id,
        userEmail: user.email
      }, { status: 400 });
    }
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã:', cabinets.map(c => ({ id: c.id, name: c.name })));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if (!productData.cabinetId || productData.cabinetId.trim() === '') {
      if (cabinets.length > 0) {
        productData.cabinetId = cabinets[0].id;
        console.log('‚ö†Ô∏è CabinetId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:', productData.cabinetId);
      } else {
        console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return NextResponse.json({ 
          error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          userId: user.id,
          availableCabinets: cabinets.length
        }, { status: 400 });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    if (productData.vendorCode.length < 8 || productData.vendorCode.length > 13) {
      return NextResponse.json({ 
        error: '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 8 –¥–æ 13 —Å–∏–º–≤–æ–ª–æ–≤',
        receivedVendorCode: productData.vendorCode,
        vendorCodeLength: productData.vendorCode.length
      }, { status: 400 });
    }

    if (productData.barcode.length !== 13) {
      return NextResponse.json({ 
        error: '–®—Ç—Ä–∏—Ö–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 13 —Å–∏–º–≤–æ–ª–æ–≤',
        receivedBarcode: productData.barcode,
        barcodeLength: productData.barcode.length
      }, { status: 400 });
    }
    
    console.log('‚úÖ –ê—Ä—Ç–∏–∫—É–ª –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º');

    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î –¥–ª—è –ò–ò
    let categoryCharacteristics = [];
    try {
      categoryCharacteristics = await prisma.wbCategoryCharacteristic.findMany({
        where: { subcategoryId: parseInt(productData.categoryId) },
        include: {
          values: {
            where: { isActive: true },
            orderBy: { sortOrder: 'asc' }
          }
        },
        orderBy: [
          { isRequired: 'desc' },
          { sortOrder: 'asc' },
          { name: 'asc' }
        ]
      });
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${categoryCharacteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${productData.categoryName}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ò–ò:');
      categoryCharacteristics.forEach((char, index) => {
        console.log(`  ${index + 1}. ${char.name} (ID: ${char.wbCharacteristicId || char.id}, —Ç–∏–ø: ${char.type}, ${char.isRequired ? '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è' : '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è'})`);
        if (char.values && char.values.length > 0) {
          console.log(`     –í–∞—Ä–∏–∞–Ω—Ç—ã: ${char.values.slice(0, 3).map(v => v.value).join(', ')}${char.values.length > 3 ? '...' : ''}`);
        }
      });
      
    } catch (charError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', charError);
      categoryCharacteristics = [];
    }

    console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è Enhanced System —Å –¥–≤—É–º—è —Ü–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', {
      productName: productData.name,
      priceInfo: {
        original: parseFloat(productData.originalPrice),
        discount: parseFloat(productData.discountPrice),
        final: parseFloat(productData.discountPrice)
      },
      hasDiscount: parseFloat(productData.originalPrice) > parseFloat(productData.discountPrice),
      discountPercent: parseFloat(productData.originalPrice) > parseFloat(productData.discountPrice) 
        ? Math.round(((parseFloat(productData.originalPrice) - parseFloat(productData.discountPrice)) / parseFloat(productData.originalPrice)) * 100)
        : 0,
      categoryId: parseInt(productData.categoryId),
      categoryName: productData.categoryName,
      parentCategoryName: productData.parentCategoryName,
      vendorCode: productData.vendorCode,
      barcode: productData.barcode,
      hasVariantSizes: productData.hasVariantSizes,
      variantSizesCount: productData.variantSizes.length,
      characteristicsCount: categoryCharacteristics.length,
      autoPublish: false
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
      const product = await prisma.product.create({
        data: {
          name: productData.name,
          price: parseFloat(productData.discountPrice),
          status: 'DRAFT',
          originalImage: null, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          referenceUrl: productData.referenceUrl || null,
          dimensions: {
            length: parseFloat(productData.length),
            width: parseFloat(productData.width),
            height: parseFloat(productData.height),
            weight: parseFloat(productData.weight) * 1000 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–≥ –≤ –≥—Ä–∞–º–º—ã –¥–ª—è –ë–î
          },
          workflowId: `enhanced-dual-price-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          processingMethod: 'enhanced_system_dual_price',
          wbData: {
            vendorCode: productData.vendorCode,
            barcode: productData.barcode,
            packageContents: productData.packageContents,
            hasVariantSizes: productData.hasVariantSizes,
            variantSizes: productData.variantSizes,
            description: productData.description || '',
            imageComments: productData.imageComments || '',
            originalPrice: parseFloat(productData.originalPrice),
            discountPrice: parseFloat(productData.discountPrice),
            costPrice: productData.costPrice ? parseFloat(productData.costPrice) : null,
            categoryId: parseInt(productData.categoryId),
            categoryName: productData.categoryName,
            parentCategoryName: productData.parentCategoryName
          },
          userId: user.id,
          subcategoryId: parseInt(productData.categoryId)
        }
      });
      productId = product.id;
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', productId);
      
      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
      try {
        await prisma.productCabinet.create({
          data: {
            productId: product.id,
            cabinetId: productData.cabinetId,
            isSelected: true
          }
        });
        console.log('‚úÖ –°–≤—è–∑—å —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∞');
      } catch (cabinetError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º:', cabinetError);
      }
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î:', dbError);
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: dbError instanceof Error ? dbError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let mainImageUrl = null;
    let additionalImageUrls = [];
    
    if (productData.mainImage) {
      console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      try {
        mainImageUrl = await uploadService.uploadFile(productData.mainImage);
        console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', mainImageUrl);
      } catch (imageError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
        return NextResponse.json({ 
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          details: imageError instanceof Error ? imageError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (productData.additionalImagesCount > 0) {
      console.log(`üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${productData.additionalImagesCount} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
      
      for (let i = 0; i < productData.additionalImagesCount; i++) {
        const additionalImage = formData.get(`additionalImage${i}`) as File;
        if (additionalImage) {
          try {
            const additionalImageUrl = await uploadService.uploadFile(additionalImage);
            additionalImageUrls.push(additionalImageUrl);
            console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –∑–∞–≥—Ä—É–∂–µ–Ω–æ:`, additionalImageUrl);
          } catch (imageError) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, imageError);
          }
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î
    if (mainImageUrl) {
      try {
        await prisma.product.update({
          where: { id: productId },
          data: { originalImage: mainImageUrl }
        });
        console.log('‚úÖ URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
      } catch (updateError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î:', updateError);
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º Enhanced System –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Enhanced System –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞...');
    console.log('üîç [API] –ü–µ—Ä–µ–¥–∞–µ–º –≤ Enhanced System –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
      categoryId: parseInt(productData.categoryId),
      categoryName: productData.categoryName,
      parentCategoryName: productData.parentCategoryName,
      categoryIdType: typeof productData.categoryId,
      categoryIdValue: productData.categoryId
    });
    
    let enhancedResult = null;
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ò–ò –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const characteristicsForAI = categoryCharacteristics.map(char => ({
        id: char.wbCharacteristicId || char.id,
        name: char.name,
        type: char.type,
        isRequired: char.isRequired,
        description: char.description,
        maxLength: char.maxLength,
        minValue: char.minValue,
        maxValue: char.maxValue,
        values: (char.values || []).map(v => ({
          id: v.wbValueId || v.id,
          value: v.value,
          displayName: v.displayName || v.value
        }))
      }));

      enhancedResult = await enhancedCharacteristicsIntegrationService.analyzeProductWithEnhancedSystem({
        productName: productData.name,
        productImages: [mainImageUrl, ...additionalImageUrls].filter((url): url is string => url !== null),
        categoryId: parseInt(productData.categoryId),
        packageContents: productData.packageContents,
        referenceUrl: productData.referenceUrl || '',
        price: parseFloat(productData.discountPrice),
        dimensions: {
          length: parseFloat(productData.length),
          width: parseFloat(productData.width),
          height: parseFloat(productData.height),
          weight: parseFloat(productData.weight)
        },
        hasVariantSizes: productData.hasVariantSizes,
        variantSizes: productData.variantSizes,
        aiPromptComment: productData.imageComments || '',
        // –ü–ï–†–ï–î–ê–ï–ú –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ò –í –ò–ò
        additionalCharacteristics: characteristicsForAI,
        preserveUserData: {
          preserveUserData: true,
          userProvidedPackageContents: productData.packageContents,
          userProvidedDimensions: {
            length: parseFloat(productData.length),
            width: parseFloat(productData.width),
            height: parseFloat(productData.height),
            weight: parseFloat(productData.weight)
          },
          specialInstructions: `
            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ó–ê–ü–û–õ–ù–Ø–ô –¢–û–õ–¨–ö–û –≠–¢–ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
            
            –î–û–°–¢–£–ü–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (${characteristicsForAI.length} —à—Ç):
            ${characteristicsForAI.map(char => 
              `- ${char.name} (ID: ${char.id}, —Ç–∏–ø: ${char.type.toUpperCase()}${char.isRequired ? ', –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø' : ''})`
            ).join('\n            ')}
            
            –ù–ï –ò–ó–ú–ï–ù–Ø–ô:
            1. –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: "${productData.packageContents}"
            2. –í–µ—Å —Ç–æ–≤–∞—Ä–∞: ${productData.weight} –∫–≥  
            3. –†–∞–∑–º–µ—Ä—ã: ${productData.length}√ó${productData.width}√ó${productData.height} —Å–º
            
            –ó–ê–ü–û–õ–ù–Ø–ô –¢–û–õ–¨–ö–û:
            - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
            - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            - –ù–ï –∑–∞–ø–æ–ª–Ω—è–π –≥–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            - –ù–ï –∑–∞–ø–æ–ª–Ω—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–≤–µ—Ç–∞
            
            –¶–ï–õ–¨: –ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ò–ó –î–û–°–¢–£–ü–ù–û–ì–û –°–ü–ò–°–ö–ê!
          `
        }
      });
      
      console.log('Enhanced System –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${enhancedResult.characteristics.length}`);
      console.log(`   - –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: ${enhancedResult.qualityMetrics.overallScore}%`);
      console.log(`   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${enhancedResult.confidence}%`);
    } catch (enhancedError) {
      console.error('–û—à–∏–±–∫–∞ Enhanced System:', enhancedError);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
      console.log('Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞');
      
      try {
        await prisma.product.update({
          where: { id: productId },
          data: {
            status: 'DRAFT',
            errorMessage: `Enhanced System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${enhancedError instanceof Error ? enhancedError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.`
          }
        });
        console.log('–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (DRAFT)');
      } catch (fallbackError) {
        console.error('–û—à–∏–±–∫–∞ fallback –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', fallbackError);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (enhancedResult) {
      try {
        await prisma.product.update({
          where: { id: productId },
          data: {
            status: 'READY',
            generatedName: enhancedResult.seoTitle,
            seoDescription: enhancedResult.seoDescription,
            aiCharacteristics: toPrismaJson({
              characteristics: enhancedResult.characteristics,
              keywords: enhancedResult.suggestedKeywords || [],
              advantages: enhancedResult.competitiveAdvantages || [],
              tnvedCode: enhancedResult.tnvedCode,
              confidence: enhancedResult.confidence,
              warnings: enhancedResult.warnings || [],
              qualityScore: enhancedResult.qualityMetrics.overallScore,
              recommendations: enhancedResult.recommendations,
              analysisReport: enhancedResult.analysisReport,
              qualityMetrics: enhancedResult.qualityMetrics
            })
          }
        });
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
      } catch (aiUpdateError) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î:', aiUpdateError);
      }
    }

    const endTime = Date.now();
    const processingTime = endTime - startTime;

    console.log(`–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${processingTime}–º—Å`);

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
      productId,
      processingTime,
      data: {
        name: productData.name,
        vendorCode: productData.vendorCode,
        barcode: productData.barcode,
        price: {
          original: parseFloat(productData.originalPrice),
          discount: parseFloat(productData.discountPrice)
        },
        category: {
          id: productData.categoryId,
          name: productData.categoryName,
          parentName: productData.parentCategoryName
        },
        dimensions: {
          length: parseFloat(productData.length),
          width: parseFloat(productData.width),
          height: parseFloat(productData.height),
          weight: parseFloat(productData.weight)
        },
        packageContents: productData.packageContents,
        hasVariantSizes: productData.hasVariantSizes,
        variantSizes: productData.variantSizes
      }
    });

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    let errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    let errorDetails = '';
    let suggestion = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';
    
    if (error instanceof Error) {
      if (error.message.includes('timeout') || error.message.includes('connection')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É';
        suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      } else if (error.message.includes('database') || error.message.includes('prisma')) {
        errorMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
        suggestion = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';
      } else if (error.message.includes('validation') || error.message.includes('parse')) {
        errorMessage = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
        suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
      } else if (error.message.includes('upload') || error.message.includes('file')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤';
        suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤';
      } else {
        errorDetails = error.message;
      }
    }

    return NextResponse.json({
      error: errorMessage,
      details: errorDetails,
      suggestion,
      processingTime
    }, { status: 500 });
  }
}