// src/app/api/products/route.ts - –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient, Cabinet } from '@prisma/client';
import { toPrismaJson } from '../../../../lib/utils/json';
import { wbSimpleParser } from '../../../../lib/services/wbSimpleParser';
import { uploadService } from '../../../../lib/services/uploadService';
import { geminiService } from '../../../../lib/services/geminiService';
import { WBCharacteristicsHelper, WB_CHARACTERISTICS_IDS } from '../../../../lib/utils/wbCharacteristics';
import { ErrorHandler, ProcessLogger, ValidationUtils, ErrorCode } from '../../../../lib/utils/errorHandler';
import { ProductStatus, ProductAnalysisResult, WBCategory, WBCardData, ProductCharacteristic } from '../../../../lib/types/gemini';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();

    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const originalName = formData.get('name') as string;
    const image = formData.get('image') as File;
    const dimensions = JSON.parse(formData.get('dimensions') as string);
    const price = parseFloat(formData.get('price') as string);
    const referenceUrl = formData.get('referenceUrl') as string | null;
    const cabinetId = formData.get('cabinetId') as string;
    const autoPublish = formData.get('autoPublish') === 'true';

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!originalName || !image || !price || !cabinetId) {
      return NextResponse.json({ 
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 
        code: ErrorCode.INVALID_INPUT 
      }, { status: 400 });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞
    const cabinet = await prisma.cabinet.findUnique({ where: { id: cabinetId } });
    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({ 
        error: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', 
        code: ErrorCode.WB_UNAUTHORIZED 
      }, { status: 400 });
    }

    // 4. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞-–∞–Ω–∞–ª–æ–≥–∞
    let referenceData = null;
    if (referenceUrl && referenceUrl.trim()) {
      try {
        console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä-–∞–Ω–∞–ª–æ–≥:', referenceUrl);
        referenceData = await wbSimpleParser.getProductData(referenceUrl);
        console.log('‚úÖ –ê–Ω–∞–ª–æ–≥ –ø–æ–ª—É—á–µ–Ω:', referenceData?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∞–Ω–∞–ª–æ–≥:', error);
        referenceData = null;
      }
    }

    // 5. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageUrl = await uploadService.uploadFile(image);

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î
    const product = await prisma.product.create({
      data: {
        originalName,
        originalImage: imageUrl,
        dimensions: toPrismaJson(dimensions),
        price,
        referenceUrl: referenceUrl || undefined,
        referenceData: referenceData ? toPrismaJson(referenceData) : undefined,
        status: ProductStatus.PROCESSING
      }
    });

    // 7. –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É
    await prisma.productCabinet.create({
      data: { 
        productId: product.id, 
        cabinetId: cabinetId, 
        isSelected: true 
      }
    });

    // 8. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ await –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    processProductSimple(
      product.id, 
      originalName, 
      imageUrl, 
      dimensions, 
      price, 
      referenceData, 
      cabinet, 
      autoPublish
    ).catch(error => {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    });

    return NextResponse.json({
      id: product.id,
      status: 'processing',
      message: '–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É',
      hasReference: !!referenceData,
      referenceName: referenceData?.name || null,
      autoPublish
    });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      details: error.message 
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const status = searchParams.get('status');

    const where = status && status !== 'all' ? { status: status as any } : {};

    const products = await prisma.product.findMany({
      where,
      include: { productCabinets: { include: { cabinet: true } } },
      orderBy: { createdAt: 'desc' },
      skip: (page - 1) * limit,
      take: limit
    });

    const total = await prisma.product.count({ where });

    return NextResponse.json({
      products,
      pagination: { page, limit, total, pages: Math.ceil(total / limit) }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// =========================================================================================
// –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–û–ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
// =========================================================================================
async function processProductSimple(
  productId: string, 
  name: string, 
  imageUrl: string, 
  dimensions: any, 
  price: number,
  referenceData: any, 
  cabinet: Cabinet, 
  autoPublish: boolean = false
) {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}`);

  try {
    // –®–∞–≥ 1: –ò–ò-–∞–Ω–∞–ª–∏–∑
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑...');
    const geminiAnalysis: ProductAnalysisResult = await geminiService.analyzeProductForWB({
      productName: name, 
      images: [imageUrl], 
      referenceData,
      dimensions: {
        length: dimensions.length?.toString(),
        width: dimensions.width?.toString(),
        height: dimensions.height?.toString(),
        weight: dimensions.weight?.toString(),
      },
      price
    });

    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π WB
    console.log('üìÇ –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ WB...');
    const wbCategories = await wbSimpleParser.getWBCategories(cabinet.apiToken);
    
    // –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üéØ –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
    const bestCategory = findBestCategory(geminiAnalysis, wbCategories, referenceData);
    
    // –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üîß –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const categoryCharacteristics = await wbSimpleParser.getCategoryCharacteristics(
      bestCategory.id, 
      cabinet.apiToken
    );

    // –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...');
    const optimizedCharacteristics = prepareCharacteristics(
      geminiAnalysis, 
      categoryCharacteristics, 
      dimensions, 
      referenceData
    );

    // –®–∞–≥ 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WB
    console.log('üìã –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
    const wbCardData = prepareCardData(
      geminiAnalysis, 
      bestCategory, 
      optimizedCharacteristics, 
      productId,
      referenceData
    );

    // –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ë–î
    await prisma.product.update({
      where: { id: productId },
      data: {
        generatedName: wbCardData.title,
        seoDescription: wbCardData.description,
        suggestedCategory: bestCategory.name,
        colorAnalysis: geminiAnalysis.visualAnalysis?.primaryColor || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        aiCharacteristics: toPrismaJson({ 
          geminiAnalysis, 
          wbData: wbCardData, 
          category: bestCategory
        }),
        status: autoPublish ? ProductStatus.PUBLISHING : ProductStatus.READY
      }
    });

    // –®–∞–≥ 8: –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
    if (autoPublish) {
      console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä –≤ WB...');
      
      const publishResult = await wbSimpleParser.createProductCard(wbCardData, cabinet.apiToken);

      if (publishResult.success) {
        await prisma.product.update({
          where: { id: productId },
          data: { 
            status: ProductStatus.PUBLISHED, 
            wbNmId: publishResult.nmId, 
            publishedAt: new Date(), 
            wbData: toPrismaJson(publishResult.data) 
          }
        });

        await prisma.productCabinet.updateMany({
          where: { productId, cabinetId: cabinet.id },
          data: { 
            isPublished: true, 
            wbCardId: publishResult.nmId?.toString() 
          }
        });

        console.log(`‚úÖ –¢–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! NM ID: ${publishResult.nmId}`);
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${publishResult.error}`);
      }
    }

    console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
    
    await prisma.product.update({
      where: { id: productId },
      data: { 
        status: ProductStatus.ERROR, 
        errorMessage: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }
    });
  } finally {
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await wbSimpleParser.cleanup();
  }
}

// ==============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ==============================================

/**
 * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
 */
function findBestCategory(
  geminiAnalysis: ProductAnalysisResult, 
  wbCategories: any[], 
  referenceData?: any
): WBCategory {
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${wbCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
  
  const aiCategory = geminiAnalysis.wbCategory || '';
  const productType = geminiAnalysis.visualAnalysis?.productType || '';
  
  console.log(`üéØ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: "${aiCategory}"`);
  console.log(`üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: "${productType}"`);
  
  if (referenceData?.category) {
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceData.category}"`);
  }

  let bestMatch: any = null;
  let bestScore = -1;

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const searchTerms = [
    aiCategory.toLowerCase(),
    productType.toLowerCase(),
    referenceData?.category?.toLowerCase() || ''
  ].filter(term => term.length > 2);

  for (const category of wbCategories) {
    if (!category?.objectName && !category?.name) continue;
    
    const categoryName = (category.objectName || category.name || '').toLowerCase();
    let score = 0;

    // –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (const term of searchTerms) {
      if (term && categoryName.includes(term)) {
        score += term.length > 10 ? 15 : 10;
      }
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–æ–≥–æ–º
    if (referenceData?.categoryId && 
        (category.objectID === referenceData.categoryId || category.id === referenceData.categoryId)) {
      score += 20;
    }

    if (score > bestScore) {
      bestScore = score;
      bestMatch = category;
    }
  }

  if (bestMatch) {
    const categoryId = bestMatch.objectID || bestMatch.id || 14727;
    const categoryName = bestMatch.objectName || bestMatch.name || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞';
    
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${categoryName}" (ID: ${categoryId}, –æ—á–∫–∏: ${bestScore})`);
    
    return { 
      id: categoryId, 
      name: categoryName 
    };
  }

  // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const fallback = selectFallbackCategory(aiCategory, productType);
  console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${fallback.name}`);
  
  return fallback;
}

/**
 * –í—ã–±–æ—Ä fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function selectFallbackCategory(aiCategory: string, productType: string): WBCategory {
  const categoryMappings = {
    '–æ–¥–µ–∂–¥–∞': { id: 306, name: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },
    '–æ–±—É–≤—å': { id: 566, name: '–û–±—É–≤—å' },
    '—É–∫—Ä–∞—à–µ–Ω–∏—è': { id: 1586, name: '–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è' },
    '—Ç–µ—Ö–Ω–∏–∫–∞': { id: 1229, name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
    '—Å–ø–æ—Ä—Ç': { id: 1408, name: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö' },
    '–∫—Ä–∞—Å–æ—Ç–∞': { id: 518, name: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ' },
    '–¥–æ–º': { id: 14727, name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞' },
    '–∞–≤—Ç–æ': { id: 1347, name: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã' }
  };

  const combined = `${aiCategory} ${productType}`.toLowerCase();
  
  for (const [key, category] of Object.entries(categoryMappings)) {
    if (combined.includes(key)) {
      return category;
    }
  }

  return { id: 14727, name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞' };
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞
 */
function prepareCharacteristics(
  geminiAnalysis: ProductAnalysisResult, 
  wbApiChars: any[], 
  dimensions: any,
  referenceData?: any
): ProductCharacteristic[] {
  console.log('üîß –°–æ–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...');
  
  const charMap = new Map<number, string>();

  // 1. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç –ò–ò
  if (geminiAnalysis.characteristics) {
    geminiAnalysis.characteristics.forEach(char => {
      if (char.id && char.value) {
        charMap.set(Number(char.id), String(char.value));
      }
    });
  }

  // 2. –†–∞–∑–º–µ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
  if (dimensions.length) charMap.set(16999, String(dimensions.length));
  if (dimensions.width) charMap.set(17001, String(dimensions.width));
  if (dimensions.height) charMap.set(17003, String(dimensions.height));
  if (dimensions.weight) charMap.set(17005, String(Math.round(dimensions.weight * 1000)));

  // 3. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –ò–ò
  if (geminiAnalysis.visualAnalysis) {
    const visual = geminiAnalysis.visualAnalysis;
    
    if (visual.primaryColor && !charMap.has(14863)) {
      charMap.set(14863, visual.primaryColor);
    }
    if (visual.material && !charMap.has(7174)) {
      charMap.set(7174, visual.material);
    }
  }

  // 4. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –∞–Ω–∞–ª–æ–≥–∞
  if (referenceData?.characteristics) {
    referenceData.characteristics.forEach((char: any) => {
      const mappedId = mapCharacteristicName(char.name);
      if (mappedId && !charMap.has(mappedId)) {
        charMap.set(mappedId, String(char.value));
      }
    });
  }

  // 5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaults = {
    8229: referenceData?.brand || 'NoName', // –ë—Ä–µ–Ω–¥
    7919: '–†–æ—Å—Å–∏—è', // –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  };

  Object.entries(defaults).forEach(([id, value]) => {
    const numId = Number(id);
    if (!charMap.has(numId)) {
      charMap.set(numId, String(value));
    }
  });

  const result = Array.from(charMap, ([id, value]) => ({ id, value }));
  console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${result.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
  
  return result;
}

/**
 * –ú–∞–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ WB ID
 */
function mapCharacteristicName(name: string): number | null {
  const nameLower = name.toLowerCase();
  
  const mapping: Record<string, number> = {
    '—Ü–≤–µ—Ç': 14863,
    '–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç': 14863,
    '–º–∞—Ç–µ—Ä–∏–∞–ª': 7174,
    '–±—Ä–µ–Ω–¥': 8229,
    '—Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': 7919,
    '–ø–æ–ª': 7183,
    '—Å–æ—Å—Ç–∞–≤': 14866,
    '—Å–µ–∑–æ–Ω': 14865,
    '—Ä–∞–∑–º–µ—Ä': 14864
  };

  for (const [key, id] of Object.entries(mapping)) {
    if (nameLower.includes(key)) {
      return id;
    }
  }

  return null;
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è WB
 */
function prepareCardData(
  geminiAnalysis: ProductAnalysisResult, 
  category: WBCategory,
  characteristics: ProductCharacteristic[], 
  productId: string,
  referenceData?: any
): WBCardData {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
  const vendorCode = `AI-${Date.now().toString().slice(-6)}-${productId.substring(0, 4).toUpperCase()}`;
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
  let title = geminiAnalysis.seoTitle || geminiAnalysis.visualAnalysis?.productType || '–¢–æ–≤–∞—Ä';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∞–Ω–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏–π
  if (referenceData?.name && title.length < 40) {
    const refWords = referenceData.name
      .split(/[\s\-\/,().]+/)
      .filter((word: string) => word.length > 3 && !title.toLowerCase().includes(word.toLowerCase()))
      .slice(0, 2);
    
    if (refWords.length > 0) {
      title = `${title} ${refWords.join(' ')}`;
    }
  }

  title = title.substring(0, 60);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  let description = geminiAnalysis.seoDescription || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞–Ω–∞–ª–æ–≥–∞
  if (referenceData?.description && description.length < 500) {
    const benefits = extractBenefits(referenceData.description);
    if (benefits.length > 0) {
      description += '\n\n' + benefits.slice(0, 3).join('\n');
    }
  }

  description = description.substring(0, 1000);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥
  let brand = characteristics.find(c => c.id === 8229)?.value || 'NoName';
  if (referenceData?.brand && referenceData.brand !== 'NoName') {
    brand = referenceData.brand;
  }

  return {
    vendorCode,
    title,
    description,
    brand,
    imtId: category.id,
    characteristics: characteristics.map(char => ({
      id: Number(char.id),
      value: String(char.value)
    }))
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function extractBenefits(description: string): string[] {
  return description
    .split(/[.!?]+/)
    .filter(sentence => 
      sentence.includes('‚úÖ') || 
      sentence.includes('+') || 
      /–∫–∞—á–µ—Å—Ç–≤|–ø—Ä–µ–∏–º—É—â|–æ—Å–æ–±–µ–Ω–Ω|—É–¥–æ–±–Ω|–ø—Ä–∞–∫—Ç–∏—á–Ω/i.test(sentence)
    )
    .map(sentence => sentence.trim())
    .filter(sentence => sentence.length > 10 && sentence.length < 100)
    .slice(0, 3);
}