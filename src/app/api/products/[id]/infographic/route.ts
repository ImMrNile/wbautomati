// src/app/api/products/[id]/infographic/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è null mainProductImage

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { infographicAgentSystem } from '../../../../../../lib/services/infographicAgentSystem';

const prisma = new PrismaClient();

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const productId = params.id;
    console.log(`üé® –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productId}`);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const headers = Object.fromEntries(request.headers.entries());
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
      'content-type': headers['content-type'],
      'content-length': headers['content-length']
    });

    // –ü–æ–ª—É—á–∞–µ–º FormData
    let formData: FormData;
    try {
      console.log('üì• –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FormData...');
      formData = await request.formData();
      console.log('‚úÖ FormData —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    } catch (formDataError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FormData:', formDataError);
      
      return NextResponse.json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ FormData',
        details: formDataError instanceof Error ? formDataError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 400 });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
    console.log('üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData:');
    const formDataEntries = Array.from(formData.entries());
    for (const [key, value] of formDataEntries) {
      if (value instanceof File) {
        console.log(`- ${key}: File(name="${value.name}", size=${value.size}, type="${value.type}")`);
      } else {
        console.log(`- ${key}: "${value}"`);
      }
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const competitorUrls = (formData.get('competitorUrls') as string) || '';
    const brandColors = (formData.get('brandColors') as string) || '#2563eb,#ffffff,#f3f4f6';
    const additionalImagesCount = parseInt((formData.get('additionalImagesCount') as string) || '0');
    
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      competitorUrlsLength: competitorUrls.length,
      brandColors,
      additionalImagesCount
    });
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    const additionalImages: File[] = [];
    for (let i = 0; i < additionalImagesCount; i++) {
      const file = formData.get(`additionalImage${i}`);
      if (file instanceof File && file.size > 0) {
        additionalImages.push(file);
        console.log(`üì∏ –§–∞–π–ª ${i}: ${file.name} (${file.size} bytes)`);
      }
    }
    
    console.log(`üì∏ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${additionalImages.length}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (additionalImages.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        details: `–û–∂–∏–¥–∞–ª–æ—Å—å ${additionalImagesCount} —Ñ–∞–π–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ 0`
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: {
        subcategory: {
          include: {
            parentCategory: true
          }
        }
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    if (product.status !== 'READY') {
      return NextResponse.json({
        success: false,
        error: `–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ (READY), —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${product.status}`
      }, { status: 400 });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!product.originalImage) {
      return NextResponse.json({
        success: false,
        error: '–£ —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.'
      }, { status: 400 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ò–ò
    let aiData: any = {};
    try {
      aiData = product.aiCharacteristics ? JSON.parse(product.aiCharacteristics) : {};
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ aiCharacteristics:', e);
      aiData = {};
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ base64
    const additionalProductImages: string[] = [];
    for (const file of additionalImages) {
      try {
        const arrayBuffer = await file.arrayBuffer();
        const base64 = Buffer.from(arrayBuffer).toString('base64');
        const dataUrl = `data:${file.type};base64,${base64}`;
        additionalProductImages.push(dataUrl);
        console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ${file.name} –≤ base64`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${file.name}:`, error);
        return NextResponse.json({
          success: false,
          error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}`
        }, { status: 400 });
      }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π null
    const infographicInput = {
      productId: product.id,
      productName: product.generatedName || product.name,
      productCharacteristics: aiData.characteristics || [],
      seoDescription: product.seoDescription || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä',
      competitiveAdvantages: aiData.advantages || ['–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
      mainProductImage: product.originalImage, // –£–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ, —á—Ç–æ –Ω–µ null
      additionalProductImages: additionalProductImages,
      competitorUrls: competitorUrls.split('\n').filter(url => url.trim()),
      brandColors: brandColors.split(',').map(c => c.trim()),
      categoryInfo: {
        name: product.subcategory?.name || '–¢–æ–≤–∞—Ä—ã',
        parentName: product.subcategory?.parentCategory?.name || '–û–±—â–∏–µ'
      }
    };

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É...');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await prisma.product.update({
      where: { id: productId },
      data: { status: 'CREATING_INFOGRAPHICS' }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const result = await infographicAgentSystem.generateProductInfographics(infographicInput);

    if (!result.success) {
      console.error('‚ùå –ê–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ failed:', result.error);
      
      await prisma.product.update({
        where: { id: productId },
        data: { status: 'READY' }
      });

      return NextResponse.json({
        success: false,
        error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏'
      }, { status: 500 });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const wbData = product.wbData ? JSON.parse(product.wbData) : {};
    const updatedWbData = {
      ...wbData,
      infographics: {
        createdAt: new Date().toISOString(),
        totalCount: result.infographics.length,
        processingTime: result.processingTime,
        qualityScore: result.qualityScore,
        images: result.infographics
      }
    };

    await prisma.product.update({
      where: { id: productId },
      data: {
        status: 'READY',
        wbData: JSON.stringify(updatedWbData)
      }
    });

    console.log('üéâ –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    return NextResponse.json({
      success: true,
      message: '–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: {
        productId: product.id,
        infographics: result.infographics,
        stats: {
          totalImages: result.infographics.length,
          processingTime: result.processingTime,
          qualityScore: result.qualityScore,
          inputImages: {
            productPhotos: 1 + additionalProductImages.length,
            competitorReferences: infographicInput.competitorUrls.length
          }
        },
        agentLogs: result.agentLogs
      }
    });

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    try {
      await prisma.product.update({
        where: { id: params.id },
        data: { status: 'READY' }
      });
    } catch (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞:', updateError);
    }

    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    }, { status: 500 });
  }
}

// GET –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const productId = params.id;
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    let wbData: any = {};
    try {
      wbData = product.wbData ? JSON.parse(product.wbData) : {};
    } catch (e) {
      wbData = {};
    }

    const infographics = wbData.infographics;

    if (!infographics) {
      return NextResponse.json({
        success: true,
        hasInfographics: false,
        message: '–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞'
      });
    }

    return NextResponse.json({
      success: true,
      hasInfographics: true,
      data: {
        productId: product.id,
        productName: product.generatedName || product.name,
        infographics: infographics.images || [],
        stats: {
          totalCount: infographics.totalCount || 0,
          processingTime: infographics.processingTime || 0,
          qualityScore: infographics.qualityScore || 0,
          createdAt: infographics.createdAt
        }
      }
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
    }, { status: 500 });
  }
}