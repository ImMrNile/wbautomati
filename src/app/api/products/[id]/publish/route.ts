// app/api/products/publish/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞');
    
    const body = await request.json();
    const { productId, cabinetIds } = body;
    
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', {
      productId,
      cabinetIds,
      cabinetsCount: cabinetIds?.length || 0
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!productId || !cabinetIds || !Array.isArray(cabinetIds) || cabinetIds.length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ userId (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    const userId = request.headers.get('x-user-id') || 'default-user-id';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const product = await prisma.product.findFirst({
      where: {
        id: productId,
        userId: userId
      },
      include: {
        subcategory: true
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É'
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
    if (product.status !== 'ANALYZED') {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ò–ò –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cabinets = await prisma.cabinet.findMany({
      where: {
        id: { in: cabinetIds },
        userId: userId,
        isActive: true
      }
    });

    if (cabinets.length !== cabinetIds.length) {
      const foundIds = cabinets.map(c => c.id);
      const missingIds = cabinetIds.filter(id => !foundIds.includes(id));
      
      return NextResponse.json({
        success: false,
        error: `–ö–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã: ${missingIds.join(', ')}`
      }, { status: 400 });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cabinets.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    const publications = [];
    
    for (const cabinet of cabinets) {
      console.log(`üì§ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        const existingPublication = await prisma.productPublication.findUnique({
          where: {
            productId_cabinetId: {
              productId: productId,
              cabinetId: cabinet.id
            }
          }
        });

        let publication;
        
        if (existingPublication) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
          publication = await prisma.productPublication.update({
            where: { id: existingPublication.id },
            data: {
              status: 'QUEUED',
              errorMessage: null,
              price: product.price,
              updatedAt: new Date()
            }
          });
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${publication.id}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
          publication = await prisma.productPublication.create({
            data: {
              productId: productId,
              cabinetId: cabinet.id,
              status: 'QUEUED',
              price: product.price
            }
          });
          console.log(`‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${publication.id}`);
        }

        publications.push({
          id: publication.id,
          cabinetId: cabinet.id,
          cabinetName: cabinet.name,
          status: publication.status
        });

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        // –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries
        console.log(`üìã –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${publication.id}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏, –Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        publications.push({
          cabinetId: cabinet.id,
          cabinetName: cabinet.name,
          status: 'FAILED',
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
    await prisma.product.update({
      where: { id: productId },
      data: {
        status: 'QUEUED_FOR_PUBLICATION',
        updatedAt: new Date()
      }
    });

    const successCount = publications.filter(p => p.status !== 'FAILED').length;
    const failureCount = publications.filter(p => p.status === 'FAILED').length;

    console.log(`‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failureCount} —Å –æ—à–∏–±–∫–∞–º–∏`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      message: `–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ ${successCount} –∫–∞–±–∏–Ω–µ—Ç(–∞—Ö)`,
      data: {
        productId: productId,
        totalCabinets: cabinetIds.length,
        successfulPublications: successCount,
        failedPublications: failureCount,
        publications: publications,
        productStatus: 'QUEUED_FOR_PUBLICATION'
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}