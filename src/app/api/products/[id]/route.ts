// app/api/products/[id]/publish/route.ts - –ü–û–õ–ù–´–ô –†–û–£–¢–ï–† –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../lib/prisma';
import { AuthService } from '../../../../../lib/auth/auth-service';

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    console.log('üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const user = await AuthService.getCurrentUser();
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const productId = params.id;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    let body;
    try {
      const textBody = await request.text();
      console.log('üì¶ Raw body length:', textBody?.length || 0);
      
      if (!textBody || textBody.trim() === '') {
        body = { cabinetIds: [] };
      } else {
        body = JSON.parse(textBody);
      }
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞'
      }, { status: 400 });
    }
    
    let { cabinetIds } = body;
    
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', {
      productId,
      cabinetIds,
      cabinetsCount: cabinetIds?.length || 0
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è productId
    if (!productId) {
      return NextResponse.json({
        success: false,
        error: 'ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    const product = await prisma.product.findFirst({
      where: {
        id: productId,
        userId: user.id
      },
      include: {
        subcategory: true,
        productCabinets: {
          include: {
            cabinet: true
          }
        }
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É'
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
    if (!['READY', 'ANALYZED', 'DRAFT'].includes(product.status)) {
      return NextResponse.json({
        success: false,
        error: `–¢–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ "${product.status}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`
      }, { status: 400 });
    }

    // –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–æ–º
    if (!cabinetIds || !Array.isArray(cabinetIds) || cabinetIds.length === 0) {
      console.log('‚ö†Ô∏è –ö–∞–±–∏–Ω–µ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–æ–º...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–æ–º
      const linkedCabinets = product.productCabinets
        .filter(pc => pc.cabinet.isActive)
        .map(pc => pc.cabinet.id);
      
      if (linkedCabinets.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userCabinets = await prisma.cabinet.findMany({
          where: {
            userId: user.id,
            isActive: true
          }
        });
        
        cabinetIds = userCabinets.map(c => c.id);
      } else {
        cabinetIds = linkedCabinets;
      }
      
      if (cabinetIds.length === 0) {
        return NextResponse.json({
          success: false,
          error: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        }, { status: 400 });
      }
      
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ${cabinetIds.length} –∫–∞–±–∏–Ω–µ—Ç–æ–≤`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cabinets = await prisma.cabinet.findMany({
      where: {
        id: { in: cabinetIds },
        userId: user.id,
        isActive: true
      }
    });

    if (cabinets.length !== cabinetIds.length) {
      const foundIds = cabinets.map(c => c.id);
      const missingIds = cabinetIds.filter(id => !foundIds.includes(id));
      
      return NextResponse.json({
        success: false,
        error: `–ö–∞–±–∏–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã: ${missingIds.join(', ')}`
      }, { status: 400 });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cabinets.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    const publications = [];
    let successCount = 0;
    let failureCount = 0;
    
    for (const cabinet of cabinets) {
      console.log(`üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinet.name}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —ç—Ç–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        const existingPublication = await prisma.productPublication.findUnique({
          where: {
            productId_cabinetId: {
              productId: productId,
              cabinetId: cabinet.id
            }
          }
        });

        let publication;
        
        if (existingPublication) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
          publication = await prisma.productPublication.update({
            where: { id: existingPublication.id },
            data: {
              status: 'QUEUED',
              errorMessage: null,
              price: product.price,
              updatedAt: new Date()
            }
          });
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${publication.id}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
          publication = await prisma.productPublication.create({
            data: {
              productId: productId,
              cabinetId: cabinet.id,
              status: 'QUEUED',
              price: product.price
            }
          });
          console.log(`‚ú® –°–æ–∑–¥–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: ${publication.id}`);
        }

        publications.push({
          id: publication.id,
          cabinetId: cabinet.id,
          cabinetName: cabinet.name,
          status: publication.status
        });

        successCount++;
        console.log(`üìã –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${publication.id}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinet.name}:`, error);
        
        publications.push({
          cabinetId: cabinet.id,
          cabinetName: cabinet.name,
          status: 'FAILED',
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
        
        failureCount++;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if (successCount > 0) {
      await prisma.product.update({
        where: { id: productId },
        data: {
          status: 'QUEUED_FOR_PUBLICATION',
          updatedAt: new Date()
        }
      });
    }

    console.log(`‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failureCount} —Å –æ—à–∏–±–∫–∞–º–∏`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      message: successCount > 0 
        ? `–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ ${successCount} –∫–∞–±–∏–Ω–µ—Ç(–∞—Ö)${failureCount > 0 ? ` (${failureCount} –æ—à–∏–±–æ–∫)` : ''}`
        : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
      data: {
        productId: productId,
        productName: product.name,
        totalCabinets: cabinetIds.length,
        successfulPublications: successCount,
        failedPublications: failureCount,
        publications: publications,
        productStatus: successCount > 0 ? 'QUEUED_FOR_PUBLICATION' : product.status
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const user = await AuthService.getCurrentUser();
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const productId = params.id;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
    const product = await prisma.product.findFirst({
      where: {
        id: productId,
        userId: user.id
      },
      include: {
        publications: {
          include: {
            cabinet: true
          },
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    const stats = {
      total: product.publications.length,
      pending: product.publications.filter(p => p.status === 'PENDING').length,
      queued: product.publications.filter(p => p.status === 'QUEUED').length,
      publishing: product.publications.filter(p => p.status === 'PUBLISHING').length,
      published: product.publications.filter(p => p.status === 'PUBLISHED').length,
      failed: product.publications.filter(p => p.status === 'FAILED').length,
      unpublished: product.publications.filter(p => p.status === 'UNPUBLISHED').length
    };

    return NextResponse.json({
      success: true,
      data: {
        productId: product.id,
        productName: product.name,
        productStatus: product.status,
        publicationStats: stats,
        publications: product.publications.map(pub => ({
          id: pub.id,
          cabinetId: pub.cabinetId,
          cabinetName: pub.cabinet.name,
          status: pub.status,
          wbTaskId: pub.wbTaskId,
          wbNmId: pub.wbNmId,
          price: pub.price,
          discountPrice: pub.discountPrice,
          publishedAt: pub.publishedAt,
          errorMessage: pub.errorMessage,
          lastSyncAt: pub.lastSyncAt,
          createdAt: pub.createdAt,
          updatedAt: pub.updatedAt
        }))
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}

// DELETE - –æ—Ç–º–µ–Ω–∞/—É–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    console.log('üóëÔ∏è –û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const user = await AuthService.getCurrentUser();
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const productId = params.id;
    const { searchParams } = new URL(request.url);
    const cabinetId = searchParams.get('cabinetId');

    if (cabinetId) {
      // –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
      const publication = await prisma.productPublication.findFirst({
        where: {
          productId: productId,
          cabinetId: cabinetId,
          product: { userId: user.id }
        }
      });

      if (!publication) {
        return NextResponse.json({
          success: false,
          error: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }, { status: 404 });
      }

      await prisma.productPublication.update({
        where: { id: publication.id },
        data: {
          status: 'UNPUBLISHED',
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ ${cabinetId}`);
    } else {
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
      const updatedPublications = await prisma.productPublication.updateMany({
        where: {
          productId: productId,
          product: { userId: user.id }
        },
        data: {
          status: 'UNPUBLISHED',
          updatedAt: new Date()
        }
      });

      console.log(`‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ ${updatedPublications.count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π`);
    }

    return NextResponse.json({
      success: true,
      message: cabinetId 
        ? '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        : '–í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}