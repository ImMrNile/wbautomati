// src/app/api/products/[id]/characteristics/route.ts - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
function processCharacteristicValue(
  value: any,
  characteristicName: string,
  characteristicId: number,
  dbType: 'string' | 'number'
): any {
  if (value === null || value === undefined || value === '') {
    return null;
  }

  const nameLower = characteristicName.toLowerCase();
  console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞: "${characteristicName}" (ID: ${characteristicId}, —Ç–∏–ø: ${dbType}) = "${value}"`);

  // –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú
  let correctedValue = fixCommonIssues(characteristicName, value);

  if (dbType === 'number') {
    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
    return extractPureNumber(correctedValue, characteristicName);
  } else {
    // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return processStringWithUnits(correctedValue, nameLower, characteristicId);
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */
function fixCommonIssues(characteristicName: string, value: any): any {
  const nameLower = characteristicName.toLowerCase();
  
  console.log(`üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –¥–ª—è "${characteristicName}": "${value}"`);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: "2 –º–∏–Ω—É—Ç—ã" –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ä—è–¥–∫–∏ -> "120 –º–∏–Ω—É—Ç"
  if (nameLower.includes('–≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏')) {
    if (value === '2 –º–∏–Ω—É—Ç—ã' || value === '2' || value === 2) {
      console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏: "${value}" ‚Üí "120 –º–∏–Ω—É—Ç"`);
      return '120 –º–∏–Ω—É—Ç';
    }
    if (value === '1' || value === 1) {
      console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏: "${value}" ‚Üí "60 –º–∏–Ω—É—Ç"`);
      return '60 –º–∏–Ω—É—Ç';
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è "10" -> "10 –º"
  if (nameLower.includes('—Ä–∞–¥–∏—É—Å') || nameLower.includes('–¥–∞–ª—å–Ω–æ—Å—Ç—å') || 
      nameLower.includes('—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')) {
    if (value === '10' || value === 10) {
      console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û —Ä–∞–¥–∏—É—Å: "${value}" ‚Üí "10 –º"`);
      return '10 –º';
    }
    if (typeof value === 'number' && value < 100) {
      console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–û —Ä–∞–¥–∏—É—Å: "${value}" ‚Üí "${value} –º"`);
      return `${value} –º`;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è "0.3 —Å–º" -> "30 —Å–º" 
  if (nameLower.includes('–¥–ª–∏–Ω–∞') && nameLower.includes('–∫–∞–±–µ–ª')) {
    if (value === '0.3 —Å–º' || value === '0.3') {
      console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ê –¥–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è: "${value}" ‚Üí "30 —Å–º"`);
      return '30 —Å–º';
    }
  }

  return value;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
function extractPureNumber(value: any, charName: string): number | null {
  if (typeof value === 'number') {
    console.log(`üî¢ –ß–∏—Å–ª–æ –∫–∞–∫ –µ—Å—Ç—å: ${value}`);
    return value;
  }

  if (typeof value === 'string') {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
    const cleaned = value.replace(/\s+/g, '').replace(/,/g, '.');
    
    // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
    const match = cleaned.match(/(\d+(?:\.\d+)?)/);
    if (match) {
      const num = parseFloat(match[1]);
      console.log(`üî¢ –ò–∑–≤–ª–µ—á–µ–Ω–æ —á–∏—Å–ª–æ –∏–∑ "${value}": ${num}`);
      return isNaN(num) ? null : num;
    }
  }

  console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ "${value}" –¥–ª—è ${charName}`);
  return null;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –µ–¥–∏–Ω–∏—Ü
 */
function processStringWithUnits(
  value: any,
  nameLower: string,
  characteristicId: number
): string {
  let stringValue = String(value).trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  if (!needsUnits(nameLower)) {
    console.log(`üìù –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: "${stringValue}"`);
    return stringValue;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –µ–¥–∏–Ω–∏—Ü—ã
  if (hasUnitsAlready(stringValue)) {
    console.log(`‚úÖ –ï–¥–∏–Ω–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å: "${stringValue}"`);
    return stringValue;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
  const numMatch = stringValue.match(/(\d+(?:\.\d+)?)/);
  if (!numMatch) {
    console.log(`üìù –¢–µ–∫—Å—Ç –±–µ–∑ —á–∏—Å–ª–∞: "${stringValue}"`);
    return stringValue;
  }

  const number = parseFloat(numMatch[1]);
  const processedValue = addAppropriateUnits(number, nameLower, stringValue);
  
  console.log(`üîß –î–æ–±–∞–≤–ª–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã: "${stringValue}" ‚Üí "${processedValue}"`);
  return processedValue;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω—ã –ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
 */
function needsUnits(nameLower: string): boolean {
  const unitsKeywords = [
    '–≤—Ä–µ–º—è', '—Å—Ä–æ–∫', '–ø–µ—Ä–∏–æ–¥', '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    '–µ–º–∫–æ—Å—Ç—å', '–≥–∞—Ä–∞–Ω—Ç–∏—è',
    '—Ä–∞–¥–∏—É—Å', '–¥–∞–ª—å–Ω–æ—Å—Ç—å', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–¥–∏—Å—Ç–∞–Ω—Ü–∏—è'
  ];

  return unitsKeywords.some(keyword => nameLower.includes(keyword));
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
 */
function hasUnitsAlready(value: string): boolean {
  const unitsPatterns = [
    // –í—Ä–µ–º—è
    /\d+\s*(—á–∞—Å|—á–∞—Å–æ–≤|–º–∏–Ω|–º–∏–Ω—É—Ç|—Å–µ–∫|—Å–µ–∫—É–Ω–¥|—á|–º|—Å)\b/i,
    /\d+\s*(–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–µ–≤|–Ω–µ–¥–µ–ª—å|–¥–Ω–µ–π)\b/i,
    
    // –†–∞–∑–º–µ—Ä—ã
    /\d+\s*(—Å–º|–º–º|–º|–¥–º|–∫–º|mm|cm)\b/i,
    /\d+\s*(–¥—é–π–º|"|inch|–∏–Ω—á)\b/i,
    
    // –ï–º–∫–æ—Å—Ç—å –∏ –ø—Ä–æ—á–µ–µ
    /\d+\s*(–º–∞—á|mah|–ºa¬∑—á|ma¬∑h|–∞—á|ah)\b/i,
    /\d+\s*(–≤—Ç|–≤–∞—Ç—Ç|w|–∫–≤—Ç)\b/i,
    /\d+\s*(–≤|–≤–æ–ª—å—Ç|v|–∫–≤)\b/i,
    /\d+\s*(–≥—Ü|–≥–µ—Ä—Ü|hz|–º–≥—Ü|–∫–≥—Ü|ghz|khz)\b/i,
    /\d+\s*(–¥–±|db|–¥–µ—Ü–∏–±–µ–ª)\b/i,
  ];

  return unitsPatterns.some(pattern => pattern.test(value));
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 */
function addAppropriateUnits(
  number: number,
  nameLower: string,
  originalValue: string
): string {
  console.log(`üîß –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è "${originalValue}" (—á–∏—Å–ª–æ: ${number})`);

  // –í–†–ï–ú–Ø –ó–ê–†–Ø–î–ö–ò - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
  if (nameLower.includes('–≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏') || nameLower.includes('–∑–∞—Ä—è–¥–∫')) {
    if (number <= 10) {
      // 1-10 —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á–∞—Å—ã
      return `${number} ${getHoursForm(number)}`;
    } else if (number <= 600) {
      // 10-600 —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—ã
      return `${number} ${getMinutesForm(number)}`;
    } else {
      // –ë–æ–ª—å—à–µ 600 - –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ–∫—É–Ω–¥—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã
      const minutes = Math.round(number / 60);
      return `${minutes} ${getMinutesForm(minutes)}`;
    }
  }

  // –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ –û–¢ –ê–ö–ö–£–ú–£–õ–Ø–¢–û–†–ê
  if (nameLower.includes('–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã') || nameLower.includes('–∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å')) {
    if (number <= 48) {
      // –î–æ 48 - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —á–∞—Å–∞—Ö
      return `${number} ${getHoursForm(number)}`;
    } else if (number <= 2880) {
      // –î–æ 2880 –º–∏–Ω—É—Ç (48 —á–∞—Å–æ–≤) - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
      const hours = Math.round(number / 60);
      return `${hours} ${getHoursForm(hours)}`;
    } else {
      // –ë–æ–ª—å—à–µ - –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ–∫—É–Ω–¥—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
      const hours = Math.round(number / 3600);
      return `${hours} ${getHoursForm(hours)}`;
    }
  }

  // –†–ê–î–ò–£–° –î–ï–ô–°–¢–í–ò–Ø / –î–ê–õ–¨–ù–û–°–¢–¨ - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
  if (nameLower.includes('—Ä–∞–¥–∏—É—Å') || nameLower.includes('–¥–∞–ª—å–Ω–æ—Å—Ç—å') || 
      nameLower.includes('—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ') || nameLower.includes('–¥–∏—Å—Ç–∞–Ω—Ü–∏—è')) {
    if (number <= 100) {
      // –î–æ 100 - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –º–µ—Ç—Ä—ã
      return `${number} –º`;
    } else if (number <= 10000) {
      // –î–æ 10000 - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Ç—Ä—ã
      const meters = Math.round(number / 100);
      return `${meters} –º`;
    } else {
      // –ë–æ–ª—å—à–µ 10000 - –≤–æ–∑–º–æ–∂–Ω–æ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Ç—Ä—ã
      const meters = Math.round(number / 1000);
      return `${meters} –º`;
    }
  }

  // –ï–ú–ö–û–°–¢–¨ –ê–ö–ö–£–ú–£–õ–Ø–¢–û–†–ê
  if (nameLower.includes('–µ–º–∫–æ—Å—Ç—å')) {
    if (originalValue.toLowerCase().includes('–Ω–µ —É–∫–∞–∑–∞–Ω–æ') || 
        originalValue.toLowerCase().includes('–Ω–µ—Ç')) {
      return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";
    }
    if (number >= 100) {
      return `${number} –º–ê—á`;
    } else {
      // –í–æ–∑–º–æ–∂–Ω–æ –≤ –ê—á, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–ê—á
      return `${number * 1000} –º–ê—á`;
    }
  }

  // –ì–ê–†–ê–ù–¢–ò–ô–ù–´–ô –°–†–û–ö
  if (nameLower.includes('–≥–∞—Ä–∞–Ω—Ç–∏—è') || nameLower.includes('—Å—Ä–æ–∫')) {
    if (number >= 12) {
      const years = Math.round(number / 12);
      return `${years} ${getYearsForm(years)}`;
    } else {
      return `${number} ${getMonthsForm(number)}`;
    }
  }

  // –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: "${nameLower}"`);
  return originalValue;
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
 */
function getHoursForm(hours: number): string {
  const lastDigit = hours % 10;
  const lastTwoDigits = hours % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '—á–∞—Å–æ–≤';
  if (lastDigit === 1) return '—á–∞—Å';
  if (lastDigit >= 2 && lastDigit <= 4) return '—á–∞—Å–∞';
  return '—á–∞—Å–æ–≤';
}

function getMinutesForm(minutes: number): string {
  const lastDigit = minutes % 10;
  const lastTwoDigits = minutes % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–º–∏–Ω—É—Ç';
  if (lastDigit === 1) return '–º–∏–Ω—É—Ç—É';
  if (lastDigit >= 2 && lastDigit <= 4) return '–º–∏–Ω—É—Ç—ã';
  return '–º–∏–Ω—É—Ç';
}

function getYearsForm(years: number): string {
  const lastDigit = years % 10;
  const lastTwoDigits = years % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–ª–µ—Ç';
  if (lastDigit === 1) return '–≥–æ–¥';
  if (lastDigit >= 2 && lastDigit <= 4) return '–≥–æ–¥–∞';
  return '–ª–µ—Ç';
}

function getMonthsForm(months: number): string {
  const lastDigit = months % 10;
  const lastTwoDigits = months % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–º–µ—Å—è—Ü–µ–≤';
  if (lastDigit === 1) return '–º–µ—Å—è—Ü';
  if (lastDigit >= 2 && lastDigit <= 4) return '–º–µ—Å—è—Ü–∞';
  return '–º–µ—Å—è—Ü–µ–≤';
}

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const productId = params.id;
    const { characteristicId, value, action = 'update' } = await request.json();

    console.log(`üîß ${action === 'add' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristicId} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: {
        subcategory: true
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    let categoryCharacteristics = [];
    if (product.subcategory) {
      try {
        const categoryResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/categories/${product.subcategory.id}/characteristics`);
        if (categoryResponse.ok) {
          const categoryData = await categoryResponse.json();
          categoryCharacteristics = categoryData.characteristics || [];
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryChar = categoryCharacteristics.find((c: any) => c.id === characteristicId);
    
    // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    let aiData: any = { characteristics: [] };
    if (product.aiCharacteristics) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∏–∑ Prisma
        const aiCharacteristicsValue = product.aiCharacteristics;
        if (typeof aiCharacteristicsValue === 'string') {
          aiData = JSON.parse(aiCharacteristicsValue);
        } else if (aiCharacteristicsValue && typeof aiCharacteristicsValue === 'object') {
          aiData = aiCharacteristicsValue;
        }
        
        if (!aiData.characteristics) {
          aiData.characteristics = [];
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ aiCharacteristics:', error);
        aiData = { characteristics: [] };
      }
    }

    // –û–ë–†–ê–ë–û–¢–ö–ê –° –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô
    let characteristicType = 'string';
    if (categoryChar) {
      characteristicType = categoryChar.type;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processedValue = processCharacteristicValue(
      value,
      categoryChar?.name || `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId}`,
      characteristicId,
      characteristicType as 'string' | 'number'
    );

    if (processedValue === null || processedValue === undefined) {
      return NextResponse.json({
        success: false,
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ "${value}" –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`
      }, { status: 400 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    const characteristicIndex = aiData.characteristics.findIndex(
      (char: any) => char.id === characteristicId
    );

    const characteristicData = {
      id: characteristicId,
      name: categoryChar?.name || `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId}`,
      value: processedValue,
      type: characteristicType,
      confidence: 1.0, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ—Ä–µ–Ω –Ω–∞ 100%
      reasoning: action === 'add' ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' : '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    };

    if (characteristicIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
      aiData.characteristics[characteristicIndex] = characteristicData;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId}: "${processedValue}"`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
      aiData.characteristics.push(characteristicData);
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId}: "${processedValue}"`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.product.update({
      where: { id: productId },
      data: {
        aiCharacteristics: JSON.stringify(aiData),
        updatedAt: new Date()
      }
    });

    console.log(`‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId} —É—Å–ø–µ—à–Ω–æ ${action === 'add' ? '–¥–æ–±–∞–≤–ª–µ–Ω–∞' : '–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`);

    return NextResponse.json({
      success: true,
      message: `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${action === 'add' ? '–¥–æ–±–∞–≤–ª–µ–Ω–∞' : '–æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`,
      characteristic: characteristicData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - —É–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–†–ê–ó–†–ï–®–ï–ù–û –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const productId = params.id;
    const { searchParams } = new URL(request.url);
    const characteristicId = parseInt(searchParams.get('characteristicId') || '0');

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristicId} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    let aiData: any = { characteristics: [] };
    if (product.aiCharacteristics) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∏–∑ Prisma
        const aiCharacteristicsValue = product.aiCharacteristics;
        if (typeof aiCharacteristicsValue === 'string') {
          aiData = JSON.parse(aiCharacteristicsValue);
        } else if (aiCharacteristicsValue && typeof aiCharacteristicsValue === 'object') {
          aiData = aiCharacteristicsValue;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ aiCharacteristics:', error);
        return NextResponse.json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞'
        }, { status: 400 });
      }
    }

    // –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
    if (aiData.characteristics && Array.isArray(aiData.characteristics)) {
      const initialLength = aiData.characteristics.length;
      aiData.characteristics = aiData.characteristics.filter(
        (char: any) => char.id !== characteristicId
      );

      if (aiData.characteristics.length === initialLength) {
        return NextResponse.json({
          success: false,
          error: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }, { status: 404 });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.product.update({
      where: { id: productId },
      data: {
        aiCharacteristics: JSON.stringify(aiData),
        updatedAt: new Date()
      }
    });

    console.log(`‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristicId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);

    return NextResponse.json({
      success: true,
      message: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö + –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö)
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const productId = params.id;

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞: ${productId}`);

    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: {
        subcategory: {
          include: {
            parentCategory: true,
            characteristics: {
              include: {
                values: {
                  where: { isActive: true },
                  orderBy: { sortOrder: 'asc' }
                }
              },
              orderBy: [
                { isRequired: 'desc' },
                { sortOrder: 'asc' },
                { name: 'asc' }
              ]
            }
          }
        }
      }
    });

    if (!product) {
      return NextResponse.json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ò–ò
    let aiData: any = { characteristics: [] };
    if (product.aiCharacteristics) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∏–∑ Prisma
        const aiCharacteristicsValue = product.aiCharacteristics;
        if (typeof aiCharacteristicsValue === 'string') {
          aiData = JSON.parse(aiCharacteristicsValue);
        } else if (aiCharacteristicsValue && typeof aiCharacteristicsValue === 'object') {
          aiData = aiCharacteristicsValue;
        }
        
        if (!aiData.characteristics) {
          aiData.characteristics = [];
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ aiCharacteristics:', error);
      }
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ WB
    let wbData: any = {};
    if (product.wbData) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∏–∑ Prisma
        const wbDataValue = product.wbData;
        if (typeof wbDataValue === 'string') {
          wbData = JSON.parse(wbDataValue);
        } else if (wbDataValue && typeof wbDataValue === 'object') {
          wbData = wbDataValue;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ wbData:', error);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const allCategoryCharacteristics = product.subcategory?.characteristics || [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const filledCharacteristicsMap = new Map();
    aiData.characteristics.forEach((char: any) => {
      filledCharacteristicsMap.set(char.id, char);
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const gabaritIds = new Set([
      89008, 90630, 90607, 90608, 90652, 90653,
      11001, 11002, 72739, 90654, 90655
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const allCharacteristics = allCategoryCharacteristics.map((categoryChar: any) => {
      const filledChar = filledCharacteristicsMap.get(categoryChar.wbCharacteristicId || categoryChar.id);
      
      const isGabarit = gabaritIds.has(categoryChar.wbCharacteristicId || categoryChar.id);
      
      if (filledChar) {
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        return {
          id: categoryChar.wbCharacteristicId || categoryChar.id,
          name: categoryChar.name,
          value: filledChar.value,
          type: categoryChar.type,
          confidence: filledChar.confidence || 0.7,
          reasoning: filledChar.reasoning || '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ò–ò',
          isRequired: categoryChar.isRequired,
          isFilled: true,
          isGabarit: isGabarit,
          needsManualInput: isGabarit,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          possibleValues: categoryChar.values?.map((v: any) => ({
            id: v.wbValueId || v.id,
            value: v.value,
            displayName: v.displayName || v.value
          })) || [],
          maxLength: categoryChar.maxLength,
          minValue: categoryChar.minValue,
          maxValue: categoryChar.maxValue,
          description: categoryChar.description
        };
      } else {
        // –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        return {
          id: categoryChar.wbCharacteristicId || categoryChar.id,
          name: categoryChar.name,
          value: null,
          type: categoryChar.type,
          confidence: 0,
          reasoning: isGabarit ? '–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è' : '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ',
          isRequired: categoryChar.isRequired,
          isFilled: false,
          isGabarit: isGabarit,
          needsManualInput: isGabarit,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
          possibleValues: categoryChar.values?.map((v: any) => ({
            id: v.wbValueId || v.id,
            value: v.value,
            displayName: v.displayName || v.value
          })) || [],
          maxLength: categoryChar.maxLength,
          minValue: categoryChar.minValue,
          maxValue: categoryChar.maxValue,
          description: categoryChar.description
        };
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ, –ø–æ—Ç–æ–º –≥–∞–±–∞—Ä–∏—Ç—ã, –ø–æ—Ç–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    allCharacteristics.sort((a, b) => {
      if (a.isRequired !== b.isRequired) {
        return b.isRequired ? 1 : -1; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
      }
      if (a.isGabarit !== b.isGabarit) {
        return b.isGabarit ? 1 : -1; // –ì–∞–±–∞—Ä–∏—Ç—ã –≤—Ç–æ—Ä—ã–º–∏ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
      }
      if (a.isFilled !== b.isFilled) {
        return b.isFilled ? 1 : -1; // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º–∏
      }
      return a.name.localeCompare(b.name); // –ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≥–∞–±–∞—Ä–∏—Ç–æ–≤
    const stats = {
      total: allCharacteristics.length,
      filled: allCharacteristics.filter(c => c.isFilled).length,
      required: allCharacteristics.filter(c => c.isRequired).length,
      requiredFilled: allCharacteristics.filter(c => c.isRequired && c.isFilled).length,
      optional: allCharacteristics.filter(c => !c.isRequired).length,
      optionalFilled: allCharacteristics.filter(c => !c.isRequired && c.isFilled).length,
      gabarit: allCharacteristics.filter(c => c.isGabarit).length,
      gabaritFilled: allCharacteristics.filter(c => c.isGabarit && c.isFilled).length,
      needsManualInput: allCharacteristics.filter(c => c.needsManualInput && !c.isFilled).length
    };

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:`, stats);

    return NextResponse.json({
      success: true,
      data: {
        id: product.id,
        name: product.name,
        generatedName: product.generatedName,
        seoDescription: product.seoDescription,
        status: product.status,
        price: product.price,
        category: product.subcategory ? {
          id: product.subcategory.id,
          name: product.subcategory.name,
          parentName: product.subcategory.parentCategory?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          displayName: `${product.subcategory.parentCategory?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} / ${product.subcategory.name}`
        } : null,
        // –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï: –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ + –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ + –≥–∞–±–∞—Ä–∏—Ç—ã)
        characteristics: allCharacteristics,
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
        stats,
        wbCardData: aiData.wbCardData,
        vendorCode: wbData.userVendorCode,
        barcode: wbData.barcode,
        originalPrice: wbData.originalPrice,
        discountPrice: wbData.discountPrice,
        finalPrice: wbData.finalPrice,
        hasVariantSizes: wbData.hasVariantSizes,
        variantSizes: wbData.variantSizes,
        comments: wbData.comments,
        createdAt: product.createdAt,
        updatedAt: product.updatedAt,
        
        // –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–ê–ë–ê–†–ò–¢–ê–•
        gabaritInfo: {
          needsManualInput: stats.needsManualInput,
          totalGabarits: stats.gabarit,
          filledGabarits: stats.gabaritFilled,
          message: stats.needsManualInput > 0 ? 
            `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å ${stats.needsManualInput} –≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—Ä—É—á–Ω—É—é` : 
            '–í—Å–µ –≥–∞–±–∞—Ä–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}