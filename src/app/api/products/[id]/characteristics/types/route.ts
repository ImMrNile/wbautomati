// src/app/api/categories/[id]/characteristics/types/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import { NextRequest, NextResponse } from 'next/server';
import { unifiedCharacteristicsService } from '../../../../../../../lib/services/unifiedCharacteristicsService';
import { localCategoriesService } from '../../../../../../../lib/services/localCategoriesService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface CharacteristicType {
  id: number;
  name: string;
  currentType: string;
  detectedType: 'pure_number' | 'string_with_units' | 'string_only';
  confidence: number;
  reasoning: string;
}

interface TypeAnalysisResult {
  characteristics: CharacteristicType[];
  confidence: number;
  summary: {
    pureNumbers: number;
    stringWithUnits: number;
    stringOnly: number;
  };
}

// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ (–∑–∞–º–µ–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π characteristicsTypeService)
class CharacteristicsTypeAnalysisService {
  async analyzeCharacteristicTypes(
    characteristics: any[], 
    categoryName: string, 
    parentCategoryName: string
  ): Promise<TypeAnalysisResult> {
    console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è "${parentCategoryName} / ${categoryName}"`);
    
    const analyzedCharacteristics: CharacteristicType[] = characteristics.map(char => {
      const charName = char.name.toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      let detectedType: 'pure_number' | 'string_with_units' | 'string_only' = 'string_only';
      let confidence = 0.8;
      let reasoning = '–ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é';
      
      // –ß–∏—Å—Ç—ã–µ —á–∏—Å–ª–∞
      if (char.type === 'number' || 
          charName.includes('–≤–µ—Å') || 
          charName.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') ||
          charName.includes('–µ–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞') ||
          charName.includes('–º–æ—â–Ω–æ—Å—Ç—å') ||
          charName.includes('–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ') ||
          charName.includes('—á–∞—Å—Ç–æ—Ç–∞')) {
        detectedType = 'pure_number';
        confidence = 0.9;
        reasoning = '–ß–∏—Å–ª–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É –ë–î –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º';
      }
      // –°—Ç—Ä–æ–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      else if (charName.includes('–≤—Ä–µ–º—è') || 
               charName.includes('—Ä–∞–∑–º–µ—Ä') ||
               charName.includes('–¥–ª–∏–Ω–∞') || 
               charName.includes('—à–∏—Ä–∏–Ω–∞') || 
               charName.includes('–≤—ã—Å–æ—Ç–∞') ||
               charName.includes('–≥–ª—É–±–∏–Ω–∞') ||
               charName.includes('–¥–∏–∞–º–µ—Ç—Ä') ||
               charName.includes('—Ç–æ–ª—â–∏–Ω–∞') ||
               charName.includes('–≥–∞—Ä–∞–Ω—Ç–∏—è') ||
               charName.includes('—Å—Ä–æ–∫')) {
        detectedType = 'string_with_units';
        confidence = 0.85;
        reasoning = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è';
      }
      // –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      else {
        detectedType = 'string_only';
        confidence = 0.8;
        reasoning = '–¢–µ–∫—Å—Ç–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü';
      }

      return {
        id: char.id,
        name: char.name,
        currentType: char.type || 'string',
        detectedType,
        confidence,
        reasoning
      };
    });

    const summary = {
      pureNumbers: analyzedCharacteristics.filter(c => c.detectedType === 'pure_number').length,
      stringWithUnits: analyzedCharacteristics.filter(c => c.detectedType === 'string_with_units').length,
      stringOnly: analyzedCharacteristics.filter(c => c.detectedType === 'string_only').length
    };

    const avgConfidence = analyzedCharacteristics.reduce((sum, char) => sum + char.confidence, 0) / analyzedCharacteristics.length;

    return {
      characteristics: analyzedCharacteristics,
      confidence: avgConfidence,
      summary
    };
  }
}

const characteristicsTypeService = new CharacteristicsTypeAnalysisService();

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = parseInt(params.id);
    
    if (isNaN(categoryId)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }, { status: 400 });
    }

    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const { forceReAnalysis = false } = body;

    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const characteristics = await localCategoriesService.getCharacteristicsForCategory(categoryId);
    
    if (characteristics.length === 0) {
      return NextResponse.json({
        success: false,
        error: `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryInfo = await localCategoriesService.getCategoryById(categoryId);
    
    if (!categoryInfo) {
      return NextResponse.json({
        success: false,
        error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      }, { status: 404 });
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
    const typeAnalysisResult = await characteristicsTypeService.analyzeCharacteristicTypes(
      characteristics,
      categoryInfo.name,
      categoryInfo.parentName
    );

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: ${typeAnalysisResult.characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      data: {
        categoryId: categoryId,
        categoryName: categoryInfo.name,
        parentCategoryName: categoryInfo.parentName,
        totalCharacteristics: characteristics.length,
        analyzedCharacteristics: typeAnalysisResult.characteristics.length,
        typeAnalysis: typeAnalysisResult,
        summary: {
          pureNumbers: typeAnalysisResult.characteristics.filter((c: CharacteristicType) => c.detectedType === 'pure_number').length,
          stringWithUnits: typeAnalysisResult.characteristics.filter((c: CharacteristicType) => c.detectedType === 'string_with_units').length,
          stringOnly: typeAnalysisResult.characteristics.filter((c: CharacteristicType) => c.detectedType === 'string_only').length,
          averageConfidence: typeAnalysisResult.confidence
        },
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${params.id}:`, error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏–ø–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = parseInt(params.id);
    
    if (isNaN(categoryId)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }, { status: 400 });
    }

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const characteristics = await localCategoriesService.getCharacteristicsForCategory(categoryId);
    
    if (characteristics.length === 0) {
      return NextResponse.json({
        success: false,
        error: `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryInfo = await localCategoriesService.getCategoryById(categoryId);
    
    if (!categoryInfo) {
      return NextResponse.json({
        success: false,
        error: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      }, { status: 404 });
    }

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ (–±–µ–∑ –ò–ò)
    const baseTypeAnalysis = characteristics.map(char => {
      const charName = char.name.toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
      let estimatedType: 'pure_number' | 'string_with_units' | 'string_only' = 'string_only';
      let reasoning = '–ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      if (char.type === 'number' || charName.includes('–≤–µ—Å') || charName.includes('–º–æ—â–Ω–æ—Å—Ç—å') || 
          charName.includes('–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ') || charName.includes('—á–∞—Å—Ç–æ—Ç–∞') || charName.includes('—Ä–∞–∑–º–µ—Ä') ||
          charName.includes('–¥–ª–∏–Ω–∞') || charName.includes('—à–∏—Ä–∏–Ω–∞') || charName.includes('–≤—ã—Å–æ—Ç–∞')) {
        estimatedType = 'pure_number';
        reasoning = '–ß–∏—Å–ª–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é';
      } 
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
      else if (charName.includes('–≤—Ä–µ–º—è') || charName.includes('—Å—Ä–æ–∫') || charName.includes('–≥–∞—Ä–∞–Ω—Ç–∏—è') ||
               charName.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') || charName.includes('–ø–µ—Ä–∏–æ–¥')) {
        estimatedType = 'string_with_units';
        reasoning = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è';
      }

      return {
        id: char.id,
        name: char.name,
        currentType: char.type || 'string',
        estimatedType: estimatedType,
        reasoning: reasoning,
        isRequired: char.isRequired || false,
        hasValues: (char.values && char.values.length > 0) || false,
        valuesCount: char.values ? char.values.length : 0
      };
    });

    const summary = {
      total: characteristics.length,
      estimatedPureNumbers: baseTypeAnalysis.filter(c => c.estimatedType === 'pure_number').length,
      estimatedStringWithUnits: baseTypeAnalysis.filter(c => c.estimatedType === 'string_with_units').length,
      estimatedStringOnly: baseTypeAnalysis.filter(c => c.estimatedType === 'string_only').length,
      required: characteristics.filter(c => c.isRequired).length,
      withValues: characteristics.filter(c => c.values && c.values.length > 0).length
    };

    return NextResponse.json({
      success: true,
      data: {
        categoryId: categoryId,
        categoryName: categoryInfo.name,
        parentCategoryName: categoryInfo.parentName,
        displayName: categoryInfo.displayName,
        characteristics: baseTypeAnalysis,
        summary: summary,
        hasAIAnalysis: false,
        note: '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º'
      }
    });

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${params.id}:`, error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}