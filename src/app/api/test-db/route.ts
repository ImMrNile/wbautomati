// src/app/api/test-db/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';

export async function GET() {
  try {
    console.log('üß™ [DB Test] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const results = {
      connectionTest: null as any,
      queryTest: null as any,
      userCount: null as any,
      cabinetCount: null as any,
      sessionCount: null as any,
      error: null as string | null
    };

    try {
      // 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º $connect()...');
      await prisma.$connect();
      results.connectionTest = 'SUCCESS';
      console.log('‚úÖ $connect() —É—Å–ø–µ—à–Ω–æ');
    } catch (error: any) {
      console.error('‚ùå $connect() –æ—à–∏–±–∫–∞:', error);
      results.connectionTest = 'FAILED: ' + error.message;
      results.error = error.message;
    }

    try {
      // 2. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º $queryRaw...');
      await prisma.$queryRaw`SELECT 1 as test`;
      results.queryTest = 'SUCCESS';
      console.log('‚úÖ $queryRaw —É—Å–ø–µ—à–Ω–æ');
    } catch (error: any) {
      console.error('‚ùå $queryRaw –æ—à–∏–±–∫–∞:', error);
      results.queryTest = 'FAILED: ' + error.message;
      if (!results.error) results.error = error.message;
    }

    try {
      // 3. –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º count users...');
      const userCount = await prisma.user.count();
      results.userCount = userCount;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    } catch (error: any) {
      console.error('‚ùå count users –æ—à–∏–±–∫–∞:', error);
      results.userCount = 'FAILED: ' + error.message;
      if (!results.error) results.error = error.message;
    }

    try {
      // 4. –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
      console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º count cabinets...');
      const cabinetCount = await prisma.cabinet.count();
      results.cabinetCount = cabinetCount;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: ${cabinetCount}`);
    } catch (error: any) {
      console.error('‚ùå count cabinets –æ—à–∏–±–∫–∞:', error);
      results.cabinetCount = 'FAILED: ' + error.message;
      if (!results.error) results.error = error.message;
    }

    try {
      // 5. –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Å–µ—Å—Å–∏–π
      console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º count sessions...');
      const sessionCount = await prisma.session.count();
      results.sessionCount = sessionCount;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessionCount}`);
    } catch (error: any) {
      console.error('‚ùå count sessions –æ—à–∏–±–∫–∞:', error);
      results.sessionCount = 'FAILED: ' + error.message;
      if (!results.error) results.error = error.message;
    }

    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const hasErrors = Object.values(results).some(v => 
      typeof v === 'string' && v.includes('FAILED')
    );

    console.log(`üß™ [DB Test] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${hasErrors ? '–ï–°–¢–¨ –û–®–ò–ë–ö–ò' : '–í–°–ï –†–ê–ë–û–¢–ê–ï–¢'}`);

    return NextResponse.json({
      success: !hasErrors,
      message: hasErrors ? '–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î' : '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      results,
      timestamp: new Date().toISOString(),
      databaseUrl: process.env.DATABASE_URL?.replace(/:[^:@]*@/, ':***@'), // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
      recommendations: hasErrors ? [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local',
        '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç 5432 –≤–º–µ—Å—Ç–æ 6543',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ aws-1-eu-north-1.pooler.supabase.com',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: npm run db:deploy –∏–ª–∏ npx prisma db push'
      ] : []
    });

  } catch (error: any) {
    console.error('üß™ [DB Test] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);

    return NextResponse.json({
      success: false,
      message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î',
      error: error.message,
      code: error.code,
      timestamp: new Date().toISOString(),
      databaseUrl: process.env.DATABASE_URL?.replace(/:[^:@]*@/, ':***@'),
      recommendations: [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env.local —Ñ–∞–π–ª',
        '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase'
      ]
    }, { status: 500 });
  } finally {
    try {
      await prisma.$disconnect();
    } catch (e) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –ë–î:', e);
    }
  }
}