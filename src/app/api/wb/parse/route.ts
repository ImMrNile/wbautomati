// src/app/api/wb/parse/route.ts - –ü–û–õ–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø

import { NextResponse } from 'next/server';
import { wbSimpleParser } from '../../../../../lib/services/wbSimpleParser';
import { ErrorHandler, ErrorCode } from '../../../../../lib/utils/error';

/**
 * @handler POST
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries.
 * @param {Request} request - –í—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
 * @returns {Promise<NextResponse>} - –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç.
 */
export async function POST(request: Request) {
    try {
        const body = await request.json();
        const { nmId, url } = body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!nmId && !url) {
            return NextResponse.json(
                { 
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏–±–æ ID —Ç–æ–≤–∞—Ä–∞ (nmId), –ª–∏–±–æ URL —Ç–æ–≤–∞—Ä–∞', 
                    code: ErrorCode.INVALID_INPUT 
                },
                { status: 400 }
            );
        }

        console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä WB:', nmId || url);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        let productUrl: string;
        if (url) {
            productUrl = url;
        } else {
            productUrl = `https://www.wildberries.ru/catalog/${nmId}/detail.aspx`;
        }

        // –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä
        const productData = await wbSimpleParser.getProductData(productUrl);

        if (!productData) {
            return NextResponse.json(
                { 
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞',
                    code: ErrorCode.PRODUCT_NOT_FOUND
                },
                { status: 404 }
            );
        }

        console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω:', productData.name);

        return NextResponse.json(
            {
                message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω',
                data: productData,
                success: true
            },
            { status: 200 }
        );

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ WB:', error);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        let errorCode = ErrorCode.UNKNOWN;
        let statusCode = 500;
        let userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

        if (error.message?.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID')) {
            errorCode = ErrorCode.INVALID_INPUT;
            statusCode = 400;
            userMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ç–æ–≤–∞—Ä–∞';
        } else if (error.message?.includes('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')) {
            errorCode = ErrorCode.PRODUCT_NOT_FOUND;
            statusCode = 404;
            userMessage = '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        } else if (error.message?.includes('fetch')) {
            errorCode = ErrorCode.NETWORK;
            statusCode = 503;
            userMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries';
        }

        return NextResponse.json(
            { 
                message: userMessage,
                code: errorCode,
                details: error.message,
                success: false
            },
            { status: statusCode }
        );
    }
}

/**
 * @handler GET
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞
 */
export async function GET(request: Request) {
    try {
        const url = new URL(request.url);
        const nmId = url.searchParams.get('nmId');
        const productUrl = url.searchParams.get('url');

        if (!nmId && !productUrl) {
            return NextResponse.json(
                { 
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä nmId –∏–ª–∏ url',
                    code: ErrorCode.INVALID_INPUT
                },
                { status: 400 }
            );
        }

        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if (nmId) {
            const exists = await wbSimpleParser.checkProductExists(nmId);
            return NextResponse.json({
                exists,
                nmId,
                message: exists ? '–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω' : '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω URL, –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if (productUrl) {
            const extractedId = wbSimpleParser.extractProductId(productUrl);
            if (!extractedId) {
                return NextResponse.json(
                    { 
                        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL',
                        code: ErrorCode.INVALID_INPUT
                    },
                    { status: 400 }
                );
            }

            const exists = await wbSimpleParser.checkProductExists(extractedId);
            return NextResponse.json({
                exists,
                nmId: extractedId,
                url: productUrl,
                message: exists ? '–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω' : '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB:', error);
        
        return NextResponse.json(
            { 
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞',
                code: ErrorCode.UNKNOWN,
                details: error.message
            },
            { status: 500 }
        );
    }
}