// pages/api/wb/characteristics/[categoryId].ts - API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö –ö–ê–¢–ï–ì–û–†–ò–ò

import { NextApiRequest, NextApiResponse } from 'next';
import { proxyEnabledWbService } from '../../../../../lib/services/proxyEnabledWbService';
import { REQUIRED_CHARACTERISTICS, DEFAULT_VALUES } from '../../../../../lib/config/wbApiConfig';

interface WBCharacteristic {
  id: number;
  name: string;
  required: boolean;
  type: string;
  values?: Array<{ id: number; value: string }>;
  defaultValue?: string;
  maxLength?: number;
  pattern?: string;
}

// –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è fallback
const FALLBACK_CHARACTERISTICS: WBCharacteristic[] = [
  {
    id: 85,
    name: '–ë—Ä–µ–Ω–¥',
    required: true,
    type: 'string',
    defaultValue: DEFAULT_VALUES.BRAND,
    maxLength: 50
  },
  {
    id: 91,
    name: '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
    required: true,
    type: 'dictionary',
    values: [
      { id: 1, value: '–†–æ—Å—Å–∏—è' },
      { id: 2, value: '–ö–∏—Ç–∞–π' },
      { id: 3, value: '–°–®–ê' },
      { id: 4, value: '–ì–µ—Ä–º–∞–Ω–∏—è' },
      { id: 5, value: '–ò—Ç–∞–ª–∏—è' }
    ],
    defaultValue: DEFAULT_VALUES.COUNTRY
  },
  {
    id: 14177449,
    name: '–¶–≤–µ—Ç',
    required: true,
    type: 'dictionary',
    values: [
      { id: 1, value: '—á–µ—Ä–Ω—ã–π' },
      { id: 2, value: '–±–µ–ª—ã–π' },
      { id: 3, value: '–∫—Ä–∞—Å–Ω—ã–π' },
      { id: 4, value: '—Å–∏–Ω–∏–π' },
      { id: 5, value: '–∑–µ–ª–µ–Ω—ã–π' },
      { id: 6, value: '–∂–µ–ª—Ç—ã–π' },
      { id: 7, value: '—Å–µ—Ä—ã–π' },
      { id: 8, value: '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π' }
    ],
    defaultValue: DEFAULT_VALUES.COLOR
  },
  {
    id: 372,
    name: '–°–æ—Å—Ç–∞–≤',
    required: true,
    type: 'string',
    defaultValue: DEFAULT_VALUES.COMPOSITION,
    maxLength: 500
  },
  {
    id: 83,
    name: '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è',
    required: false,
    type: 'string',
    maxLength: 75
  }
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ API
function getApiToken(req: NextApiRequest): string | null {
  const authHeader = req.headers.authorization;
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  
  return process.env.WB_API_READ_TOKEN || process.env.WB_API_TOKEN || null;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
function normalizeCharacteristic(char: any): WBCharacteristic {
  return {
    id: char.id || char.charcID,
    name: char.name || char.charcName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
    required: char.required || char.isRequired || false,
    type: char.charcType || char.type || 'string',
    values: char.dictionary || char.values || undefined,
    defaultValue: char.defaultValue || undefined,
    maxLength: char.maxLength || undefined,
    pattern: char.pattern || undefined
  };
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function addCategorySpecificCharacteristics(categoryId: number, characteristics: WBCharacteristic[]): WBCharacteristic[] {
  const result = [...characteristics];
  
  // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
  if ([963, 964, 965, 966].includes(categoryId)) {
    result.push(
      {
        id: 312,
        name: '–ì–∞—Ä–∞–Ω—Ç–∏—è',
        required: false,
        type: 'string',
        defaultValue: DEFAULT_VALUES.WARRANTY
      },
      {
        id: 2758,
        name: '–ú–æ—â–Ω–æ—Å—Ç—å',
        required: false,
        type: 'string'
      }
    );
  }
  
  // –û–¥–µ–∂–¥–∞
  if ([629, 8126, 566].includes(categoryId)) {
    result.push(
      {
        id: 48,
        name: '–†–∞–∑–º–µ—Ä',
        required: true,
        type: 'dictionary',
        values: [
          { id: 1, value: 'XS' },
          { id: 2, value: 'S' },
          { id: 3, value: 'M' },
          { id: 4, value: 'L' },
          { id: 5, value: 'XL' },
          { id: 6, value: 'XXL' }
        ]
      },
      {
        id: 50,
        name: '–°–µ–∑–æ–Ω',
        required: false,
        type: 'dictionary',
        values: [
          { id: 1, value: '–ª–µ—Ç–æ' },
          { id: 2, value: '–∑–∏–º–∞' },
          { id: 3, value: '–¥–µ–º–∏—Å–µ–∑–æ–Ω' },
          { id: 4, value: '–≤—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–π' }
        ],
        defaultValue: DEFAULT_VALUES.SEASON
      }
    );
  }
  
  // –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
  if ([14727, 2674].includes(categoryId)) {
    result.push(
      {
        id: 49,
        name: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
        required: false,
        type: 'string',
        defaultValue: DEFAULT_VALUES.MATERIAL
      },
      {
        id: 147,
        name: '–†–∞–∑–º–µ—Ä—ã',
        required: false,
        type: 'string'
      }
    );
  }
  
  return result;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'GET') {
    return res.status(405).json({ 
      success: false, 
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GET.' 
    });
  }

  try {
    const { categoryId } = req.query;
    const { locale = 'ru', includeDefaults = 'true' } = req.query;

    if (!categoryId) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      });
    }

    const categoryIdNum = parseInt(categoryId as string);
    if (isNaN(categoryIdNum) || categoryIdNum <= 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      });
    }

    console.log(`üìã –ó–∞–ø—Ä–æ—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryIdNum}...`);

    let characteristics: WBCharacteristic[] = [];
    let source = '';

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
    const apiToken = getApiToken(req);
    
    if (apiToken) {
      try {
        console.log('üîë –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ WB API...');
        
        const rawCharacteristics = await proxyEnabledWbService.getCategoryCharacteristics(
          categoryIdNum, 
          apiToken, 
          locale as string
        );
        
        characteristics = rawCharacteristics.map(normalizeCharacteristic);
        source = 'api';
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ API`);
        
      } catch (apiError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ API:', apiError);
        
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        characteristics = [...FALLBACK_CHARACTERISTICS];
        source = 'fallback-api-error';
        
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
      }
    } else {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω API –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
      characteristics = [...FALLBACK_CHARACTERISTICS];
      source = 'fallback-no-token';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (includeDefaults === 'true') {
      const requiredIds = Object.values(REQUIRED_CHARACTERISTICS.UNIVERSAL);
      
      for (const requiredId of requiredIds) {
        const exists = characteristics.some(char => char.id === requiredId);
        if (!exists) {
          const fallbackChar = FALLBACK_CHARACTERISTICS.find(char => char.id === requiredId);
          if (fallbackChar) {
            characteristics.push(fallbackChar);
            console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${fallbackChar.name}`);
          }
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    characteristics = addCategorySpecificCharacteristics(categoryIdNum, characteristics);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    characteristics.sort((a, b) => {
      if (a.required && !b.required) return -1;
      if (!a.required && b.required) return 1;
      return a.name.localeCompare(b.name);
    });

    console.log(`‚úÖ –ò—Ç–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${characteristics.length} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: ${characteristics.filter(c => c.required).length})`);

    return res.status(200).json({
      success: true,
      data: characteristics,
      meta: {
        categoryId: categoryIdNum,
        total: characteristics.length,
        required: characteristics.filter(c => c.required).length,
        optional: characteristics.filter(c => !c.required).length,
        source,
        locale,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const categoryIdNum = parseInt(req.query.categoryId as string) || 0;
    const emergencyCharacteristics = addCategorySpecificCharacteristics(
      categoryIdNum, 
      [...FALLBACK_CHARACTERISTICS]
    );

    return res.status(200).json({
      success: true,
      data: emergencyCharacteristics,
      meta: {
        categoryId: categoryIdNum,
        total: emergencyCharacteristics.length,
        required: emergencyCharacteristics.filter(c => c.required).length,
        optional: emergencyCharacteristics.filter(c => !c.required).length,
        source: 'emergency-fallback',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: new Date().toISOString()
      }
    });
  }
}