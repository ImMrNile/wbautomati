// src/app/api/wb/local-categories/route.ts - –ü–û–õ–ù–´–ô API ENDPOINT

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization'
};

export async function OPTIONS() {
  return new NextResponse(null, { status: 200, headers: corsHeaders });
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action') || 'all';
    const query = searchParams.get('query');
    const search = searchParams.get('search');
    const parentId = searchParams.get('parentId');
    const parent = searchParams.get('parent');
    const limit = searchParams.get('limit');
    const subcategoryId = searchParams.get('subcategoryId');
    const sellingPrice = searchParams.get('sellingPrice');
    const productCost = searchParams.get('productCost');
    const deliveryType = searchParams.get('deliveryType') || 'fbw';

    console.log('üìÇ API –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', { action, query, search, parent, parentId, limit });

    switch (action) {
      case 'search':
        const searchQuery = query || search;
        if (!searchQuery) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
          }, { status: 400, headers: corsHeaders });
        }

        console.log(`üîç –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: "${searchQuery}"`);

        const searchResults = await prisma.wbSubcategory.findMany({
          where: {
            OR: [
              {
                name: {
                  contains: searchQuery
                }
              },
              {
                parentCategory: {
                  name: {
                    contains: searchQuery
                  }
                }
              }
            ]
          },
          include: {
            parentCategory: true
          },
          take: limit ? parseInt(limit) : 20,
          orderBy: { name: 'asc' }
        });

        return NextResponse.json({
          success: true,
          data: searchResults.map(cat => ({
            id: cat.id,
            name: cat.name,
            slug: cat.slug,
            parentId: cat.parentCategoryId,
            parentName: cat.parentCategory.name,
            displayName: `${cat.parentCategory.name} / ${cat.name}`,
            wbSubjectId: cat.wbSubjectId || undefined,
            parentCategory: cat.parentCategory,
            commissions: {
              fbw: cat.commissionFbw,
              fbs: cat.commissionFbs,
              dbs: cat.commissionDbs,
              cc: cat.commissionCc,
              edbs: cat.commissionEdbs,
              booking: cat.commissionBooking
            }
          })),
          meta: {
            query: searchQuery,
            total: searchResults.length,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      case 'parents':
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const parentCategories = await prisma.wbParentCategory.findMany({
          include: {
            _count: { select: { subcategories: true } }
          },
          orderBy: { name: 'asc' }
        });
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${parentCategories.length} —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        return NextResponse.json({
          success: true,
          data: parentCategories.map(cat => ({
            id: cat.id,
            name: cat.name,
            slug: cat.slug,
            count: cat._count.subcategories
          })),
          meta: {
            total: parentCategories.length,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      case 'subcategories':
      case 'by-parent':
        const parentCategoryId = parentId || parent;
        if (!parentCategoryId) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
          }, { status: 400, headers: corsHeaders });
        }

        console.log(`üì± –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è ${parentCategoryId}...`);

        const subcategories = await prisma.wbSubcategory.findMany({
          where: {
            parentCategoryId: parseInt(parentCategoryId)
          },
          include: {
            parentCategory: true
          },
          orderBy: { name: 'asc' }
        });

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

        return NextResponse.json({
          success: true,
          data: subcategories.map(cat => ({
            id: cat.id,
            name: cat.name,
            slug: cat.slug,
            parentId: cat.parentCategoryId,
            parentName: cat.parentCategory.name,
            displayName: `${cat.parentCategory.name} / ${cat.name}`,
            wbSubjectId: cat.wbSubjectId || undefined,
            parentCategory: cat.parentCategory,
            commissions: {
              fbw: cat.commissionFbw,
              fbs: cat.commissionFbs,
              dbs: cat.commissionDbs,
              cc: cat.commissionCc,
              edbs: cat.commissionEdbs,
              booking: cat.commissionBooking
            }
          })),
          meta: {
            parentId: parseInt(parentCategoryId),
            total: subcategories.length,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      case 'calculate-profit':
        if (!subcategoryId || !sellingPrice || !productCost) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: subcategoryId, sellingPrice, productCost'
          }, { status: 400, headers: corsHeaders });
        }

        console.log(`üí∞ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${subcategoryId}, —Ü–µ–Ω–∞: ${sellingPrice}, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${productCost}`);

        try {
          const profitCalculation = await calculateProfitWithCommissions(
            parseFloat(sellingPrice),
            parseFloat(productCost),
            parseInt(subcategoryId),
            deliveryType as 'fbw' | 'fbs' | 'dbs' | 'cc' | 'edbs' | 'booking'
          );

          console.log(`‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–∏–±—ã–ª—å ${profitCalculation.netProfit}‚ÇΩ (${profitCalculation.profitMargin}%)`);

          return NextResponse.json({
            success: true,
            data: profitCalculation,
            meta: {
              subcategoryId: parseInt(subcategoryId),
              sellingPrice: parseFloat(sellingPrice),
              productCost: parseFloat(productCost),
              deliveryType,
              timestamp: new Date().toISOString()
            }
          }, { headers: corsHeaders });

        } catch (calcError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏:', calcError);
          return NextResponse.json({
            success: false,
            error: calcError instanceof Error ? calcError.message : '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏'
          }, { status: 400, headers: corsHeaders });
        }

      case 'by-id':
        if (!subcategoryId) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
          }, { status: 400, headers: corsHeaders });
        }

        const categoryById = await prisma.wbSubcategory.findUnique({
          where: { id: parseInt(subcategoryId) },
          include: { parentCategory: true }
        });

        if (!categoryById) {
          return NextResponse.json({
            success: false,
            error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
          }, { status: 404, headers: corsHeaders });
        }

        return NextResponse.json({
          success: true,
          data: {
            id: categoryById.id,
            name: categoryById.name,
            slug: categoryById.slug,
            parentId: categoryById.parentCategoryId,
            parentName: categoryById.parentCategory.name,
            displayName: `${categoryById.parentCategory.name} / ${categoryById.name}`,
            wbSubjectId: categoryById.wbSubjectId || undefined,
            commissions: {
              fbw: categoryById.commissionFbw,
              fbs: categoryById.commissionFbs,
              dbs: categoryById.commissionDbs,
              cc: categoryById.commissionCc,
              edbs: categoryById.commissionEdbs,
              booking: categoryById.commissionBooking
            }
          }
        }, { headers: corsHeaders });

      case 'stats':
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const [totalParents, totalSubs, avgCommission] = await Promise.all([
          prisma.wbParentCategory.count(),
          prisma.wbSubcategory.count(),
          prisma.wbSubcategory.aggregate({
            _avg: { commissionFbw: true }
          })
        ]);

        const topParents = await prisma.wbParentCategory.findMany({
          include: {
            _count: { select: { subcategories: true } }
          },
          orderBy: {
            subcategories: { _count: 'desc' }
          },
          take: 5
        });

        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalParents} —Ä–æ–¥–∏—Ç–µ–ª–µ–π, ${totalSubs} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

        return NextResponse.json({
          success: true,
          data: {
            totalParents,
            totalSubs,
            avgCommission: Number(avgCommission._avg.commissionFbw || 0),
            topCategories: topParents.map(cat => ({
              name: cat.name,
              count: cat._count.subcategories
            }))
          },
          meta: {
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      default:
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (action = 'all' –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ª–∏–º–∏—Ç: ${limit || 100})...`);
        
        const allCategories = await prisma.wbSubcategory.findMany({
          include: {
            parentCategory: true
          },
          take: limit ? parseInt(limit) : 100,
          orderBy: { name: 'asc' }
        });

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

        return NextResponse.json({
          success: true,
          data: allCategories.map(cat => ({
            id: cat.id,
            name: cat.name,
            slug: cat.slug,
            parentId: cat.parentCategoryId,
            parentName: cat.parentCategory.name,
            displayName: `${cat.parentCategory.name} / ${cat.name}`,
            wbSubjectId: cat.wbSubjectId || undefined,
            parentCategory: cat.parentCategory,
            commissions: {
              fbw: cat.commissionFbw,
              fbs: cat.commissionFbs,
              dbs: cat.commissionDbs,
              cc: cat.commissionCc,
              edbs: cat.commissionEdbs,
              booking: cat.commissionBooking
            }
          })),
          meta: {
            total: allCategories.length,
            limit: limit ? parseInt(limit) : 100,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500, headers: corsHeaders });
  }
}

// POST - —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { action, data } = body;

    console.log('üìù POST –∑–∞–ø—Ä–æ—Å –≤ API –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', { action, data });

    switch (action) {
      case 'smart-search':
        if (!data?.query) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
          }, { status: 400, headers: corsHeaders });
        }

        console.log(`üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫: "${data.query}"`);
        
        const smartResults = await smartCategorySearch(data.query, data.limit || 20);

        console.log(`‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${smartResults.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

        return NextResponse.json({
          success: true,
          data: smartResults,
          meta: {
            query: data.query,
            method: 'smart-search',
            total: smartResults.length,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      case 'find-best-category':
        if (!data?.productName) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
          }, { status: 400, headers: corsHeaders });
        }

        console.log(`üéØ –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: "${data.productName}"`);
        
        const bestCategory = await findBestCategoryForProduct(data.productName);
        
        if (bestCategory) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${bestCategory.displayName}`);
          return NextResponse.json({
            success: true,
            data: bestCategory,
            meta: {
              productName: data.productName,
              method: 'find-best-category',
              timestamp: new Date().toISOString()
            }
          }, { headers: corsHeaders });
        } else {
          return NextResponse.json({
            success: false,
            error: '–ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
          }, { status: 404, headers: corsHeaders });
        }

      case 'calculate-profit':
        const { categoryId, price, cost, deliveryType = 'fbw' } = data;

        if (!categoryId || !price || !cost) {
          return NextResponse.json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: categoryId, price, cost'
          }, { status: 400, headers: corsHeaders });
        }

        const profitData = await calculateProfitWithCommissions(
          price,
          cost,
          categoryId,
          deliveryType
        );

        return NextResponse.json({
          success: true,
          data: profitData,
          meta: {
            categoryId,
            price,
            cost,
            deliveryType,
            timestamp: new Date().toISOString()
          }
        }, { headers: corsHeaders });

      default:
        return NextResponse.json({
          success: false,
          error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        }, { status: 400, headers: corsHeaders });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ POST API –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500, headers: corsHeaders });
  }
}

// –£–ú–ù–´–ô –ü–û–ò–°–ö –ö–ê–¢–ï–ì–û–†–ò–ô
async function smartCategorySearch(query: string, limit: number = 20) {
  const queryLower = query.toLowerCase();
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –≤–µ—Å–∞–º–∏
  const categoryKeywords = {
    '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': {
      keywords: ['–∫–∞–±–µ–ª—å', '–∑–∞—Ä—è–¥–∫–∞', '–∞–¥–∞–ø—Ç–µ—Ä', 'usb', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'type-c', 'lightning', 'micro', '–∑–∞—Ä—è–¥–Ω–æ–µ', '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫'],
      weight: 10,
      parentNames: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤']
    },
    '–Ω–∞—É—à–Ω–∏–∫–∏': {
      keywords: ['–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', 'airpods', 'bluetooth', '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ', '–≤–∫–ª–∞–¥—ã—à–∏', '–Ω–∞–∫–ª–∞–¥–Ω—ã–µ'],
      weight: 9,
      parentNames: ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞']
    },
    '—á–µ—Ö–ª—ã': {
      keywords: ['—á–µ—Ö–æ–ª', '–±–∞–º–ø–µ—Ä', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–ø–ª–µ–Ω–∫–∞', '–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞', '–∑–∞—â–∏—Ç–Ω–æ–µ'],
      weight: 8,
      parentNames: ['–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–ó–∞—â–∏—Ç–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏']
    },
    '–∞–≤—Ç–æ': {
      keywords: ['–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', '–≤ –º–∞—à–∏–Ω—É', '–∞–≤—Ç–æ–º–∞–≥–Ω–∏—Ç–æ–ª–∞', '–¥–ª—è –∞–≤—Ç–æ', '–∞–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä', '–¥–µ—Ä–∂–∞—Ç–µ–ª—å –≤ –∞–≤—Ç–æ'],
      weight: 7,
      parentNames: ['–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã']
    },
    '–¥–æ–º': {
      keywords: ['–¥–ª—è –¥–æ–º–∞', '–¥–æ–º–∞—à–Ω–∏–π', '–∫—É—Ö–Ω—è', '–≤–∞–Ω–Ω–∞', '—Å–ø–∞–ª—å–Ω—è', '–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–∏–Ω—Ç–µ—Ä—å–µ—Ä'],
      weight: 6,
      parentNames: ['–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', '–ö—É—Ö–Ω—è', '–í–∞–Ω–Ω–∞—è', '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ò–Ω—Ç–µ—Ä—å–µ—Ä']
    },
    '–æ–¥–µ–∂–¥–∞': {
      keywords: ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–ø–ª–∞—Ç—å–µ', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–±—Ä—é–∫–∏', '—Å–≤–∏—Ç–µ—Ä', '–±–ª—É–∑–∫–∞'],
      weight: 5,
      parentNames: ['–û–¥–µ–∂–¥–∞', '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞']
    },
    '–æ–±—É–≤—å': {
      keywords: ['–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–±–æ—Ç–∏–Ω–∫–∏', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏', '—Ç–∞–ø–æ—á–∫–∏', '—Å–∞–Ω–¥–∞–ª–∏–∏', '–±–æ—Å–æ–Ω–æ–∂–∫–∏'],
      weight: 5,
      parentNames: ['–û–±—É–≤—å', '–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å', '–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å', '–î–µ—Ç—Å–∫–∞—è –æ–±—É–≤—å']
    },
    '–∏–≥—Ä—É—à–∫–∏': {
      keywords: ['–∏–≥—Ä—É—à–∫–∞', '–∏–≥—Ä—ã', '–¥–µ—Ç—Å–∫–∞—è', '—Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '–∫—É–∫–ª–∞', '–º–∞—à–∏–Ω–∫–∞'],
      weight: 6,
      parentNames: ['–ò–≥—Ä—É—à–∫–∏', '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—É—à–∫–∏']
    },
    '–º–µ–±–µ–ª—å': {
      keywords: ['—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–¥–∏–≤–∞–Ω', '–∫—Ä–µ—Å–ª–æ', '—à–∫–∞—Ñ', '–∫—Ä–æ–≤–∞—Ç—å', '–º–µ–±–µ–ª—å', '–ø–æ–ª–∫–∞'],
      weight: 7,
      parentNames: ['–ú–µ–±–µ–ª—å', '–ú–µ–±–µ–ª—å –º—è–≥–∫–∞—è', '–ú–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞']
    },
    '–∫–æ—Å–º–µ—Ç–∏–∫–∞': {
      keywords: ['–∫—Ä–µ–º', '–º–∞—Å–∫–∞', '—à–∞–º–ø—É–Ω—å', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '—É—Ö–æ–¥', '–∫—Ä–∞—Å–æ—Ç–∞', '–º–∞–∫–∏—è–∂'],
      weight: 6,
      parentNames: ['–ö—Ä–∞—Å–æ—Ç–∞', '–ö–æ—Å–º–µ—Ç–∏–∫–∞', '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π', '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è']
    }
  };

  const matchedCategories = [];
  
  for (const [categoryType, config] of Object.entries(categoryKeywords)) {
    let matchScore = 0;
    const matchedKeywords = [];
    
    for (const keyword of config.keywords) {
      if (queryLower.includes(keyword)) {
        matchScore += config.weight;
        matchedKeywords.push(keyword);
        
        if (queryLower === keyword) {
          matchScore += 5;
        }
      }
    }
    
    if (matchScore > 0) {
      matchedCategories.push({ 
        categoryType, 
        matchScore, 
        config,
        matchedKeywords
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  matchedCategories.sort((a, b) => b.matchScore - a.matchScore);
  
  const searchResults: any[] = [];
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —É–º–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  for (const match of matchedCategories.slice(0, 3)) {
    const categories = await prisma.wbSubcategory.findMany({
      where: {
        OR: [
          {
            name: {
              contains: query
            }
          },
          {
            parentCategory: {
              name: {
                in: match.config.parentNames
              }
            }
          }
        ]
      },
      include: {
        parentCategory: true
      },
      take: 5,
      orderBy: { name: 'asc' }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    for (const cat of categories) {
      if (!searchResults.some(r => r.id === cat.id)) {
        searchResults.push({
          id: cat.id,
          name: cat.name,
          slug: cat.slug,
          parentId: cat.parentCategoryId,
          parentName: cat.parentCategory.name,
          displayName: `${cat.parentCategory.name} / ${cat.name}`,
          wbSubjectId: cat.wbSubjectId || undefined,
          parentCategory: cat.parentCategory,
          relevanceScore: match.matchScore,
          matchReason: `–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${match.matchedKeywords.join(', ')}`,
          commissions: {
            fbw: cat.commissionFbw,
            fbs: cat.commissionFbs,
            dbs: cat.commissionDbs,
            cc: cat.commissionCc,
            edbs: cat.commissionEdbs,
            booking: cat.commissionBooking
          }
        });
      }
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (searchResults.length < limit) {
    const additionalResults = await prisma.wbSubcategory.findMany({
      where: {
        OR: [
          {
            name: {
              contains: query
            }
          },
          {
            parentCategory: {
              name: {
                contains: query
              }
            }
          }
        ]
      },
      include: {
        parentCategory: true
      },
      take: limit - searchResults.length,
      orderBy: { name: 'asc' }
    });
    
    for (const cat of additionalResults) {
      if (!searchResults.some(r => r.id === cat.id)) {
        searchResults.push({
          id: cat.id,
          name: cat.name,
          slug: cat.slug,
          parentId: cat.parentCategoryId,
          parentName: cat.parentCategory.name,
          displayName: `${cat.parentCategory.name} / ${cat.name}`,
          wbSubjectId: cat.wbSubjectId || undefined,
          parentCategory: cat.parentCategory,
          relevanceScore: 1,
          matchReason: '–ù–∞–π–¥–µ–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
          commissions: {
            fbw: cat.commissionFbw,
            fbs: cat.commissionFbs,
            dbs: cat.commissionDbs,
            cc: cat.commissionCc,
            edbs: cat.commissionEdbs,
            booking: cat.commissionBooking
          }
        });
      }
    }
  }
  
  return searchResults
    .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0))
    .slice(0, limit);
}

// –ü–û–ò–°–ö –õ–£–ß–®–ï–ô –ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø –¢–û–í–ê–†–ê
async function findBestCategoryForProduct(productName: string) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
  const smartResults = await smartCategorySearch(productName, 5);
  
  if (smartResults.length > 0) {
    const bestMatch = smartResults[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${bestMatch.displayName} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${bestMatch.relevanceScore})`);
    return bestMatch;
  }

  // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
  const normalResults = await prisma.wbSubcategory.findMany({
    where: {
      name: {
        contains: productName
      }
    },
    include: {
      parentCategory: true
    },
    take: 5,
    orderBy: { name: 'asc' }
  });

  if (normalResults.length > 0) {
    const result = {
      id: normalResults[0].id,
      name: normalResults[0].name,
      slug: normalResults[0].slug,
      parentId: normalResults[0].parentCategoryId,
      parentName: normalResults[0].parentCategory.name,
      displayName: `${normalResults[0].parentCategory.name} / ${normalResults[0].name}`,
      wbSubjectId: normalResults[0].wbSubjectId || undefined,
      parentCategory: normalResults[0].parentCategory,
      commissions: {
        fbw: normalResults[0].commissionFbw,
        fbs: normalResults[0].commissionFbs,
        dbs: normalResults[0].commissionDbs,
        cc: normalResults[0].commissionCc,
        edbs: normalResults[0].commissionEdbs,
        booking: normalResults[0].commissionBooking
      }
    };

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: ${result.displayName}`);
    return result;
  }

  // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const defaultCategory = await prisma.wbSubcategory.findFirst({
    include: { parentCategory: true }
  });

  if (defaultCategory) {
    const result = {
      id: defaultCategory.id,
      name: defaultCategory.name,
      slug: defaultCategory.slug,
      parentId: defaultCategory.parentCategoryId,
      parentName: defaultCategory.parentCategory.name,
      displayName: `${defaultCategory.parentCategory.name} / ${defaultCategory.name}`,
      wbSubjectId: defaultCategory.wbSubjectId || undefined,
      parentCategory: defaultCategory.parentCategory,
      commissions: {
        fbw: defaultCategory.commissionFbw,
        fbs: defaultCategory.commissionFbs,
        dbs: defaultCategory.commissionDbs,
        cc: defaultCategory.commissionCc,
        edbs: defaultCategory.commissionEdbs,
        booking: defaultCategory.commissionBooking
      }
    };

    console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${result.displayName}`);
    return result;
  }

  return null;
}

// –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–ò
async function calculateProfitWithCommissions(
  price: number,
  cost: number,
  subcategoryId: number,
  deliveryType: 'fbw' | 'fbs' | 'dbs' | 'cc' | 'edbs' | 'booking' = 'fbw'
) {
  const category = await prisma.wbSubcategory.findUnique({
    where: { id: subcategoryId },
    include: { parentCategory: true }
  });

  if (!category) {
    throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏
  let commissionPercent = 0;
  switch (deliveryType) {
    case 'fbw': commissionPercent = category.commissionFbw; break;
    case 'fbs': commissionPercent = category.commissionFbs; break;
    case 'dbs': commissionPercent = category.commissionDbs; break;
    case 'cc': commissionPercent = category.commissionCc; break;
    case 'edbs': commissionPercent = category.commissionEdbs; break;
    case 'booking': commissionPercent = category.commissionBooking; break;
  }

  // –†–∞—Å—á–µ—Ç—ã
  const commission = (price * commissionPercent) / 100;
  const revenue = price - commission;
  const grossProfit = revenue - cost;
  const netProfit = grossProfit;
  const profitMargin = (netProfit / price) * 100;

  return {
    revenue: Math.round(revenue * 100) / 100,
    commission: Math.round(commission * 100) / 100,
    commissionRate: commissionPercent,
    logisticsCost: 0,
    productCost: cost,
    grossProfit: Math.round(grossProfit * 100) / 100,
    netProfit: Math.round(netProfit * 100) / 100,
    profitMargin: Math.round(profitMargin * 100) / 100,
    category: {
      name: category.name,
      parentName: category.parentCategory.name
    }
  };
}