import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../lib/prisma';
import { AuthService } from '../../../../../lib/auth/auth-service';

export async function POST(request: NextRequest) {
  try {
    console.log('üîê [API Login] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...');
    
    const body = await request.json();
    console.log('üîê [API Login] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω–æ:', { email: body.email, hasPassword: !!body.password });
    
    const { email, password } = body;

    console.log('üîê [API Login] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { email, password: password ? '***' : 'undefined' });

    if (!email || !password) {
      console.log('‚ùå [API Login] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      return NextResponse.json({
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    console.log('üîê [API Login] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await prisma.user.findFirst({
      where: { 
        email: email.toLowerCase().trim(),
        isActive: true
      }
    });

    console.log('üîê [API Login] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user ? { id: user.id, email: user.email } : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!user) {
      console.log('‚ùå [API Login] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
      return NextResponse.json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (password !== '919014095@Man') {
      console.log('‚ùå [API Login] –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
      }, { status: 401 });
    }

    console.log('‚úÖ [API Login] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', { id: user.id, email: user.email, role: user.role });

    console.log('üîê [API Login] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.session.deleteMany({
      where: { userId: user.id }
    });

    console.log('üîê [API Login] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const sessionToken = await AuthService.createSession(
      user.id,
      request.headers.get('x-forwarded-for') || undefined,
      request.headers.get('user-agent') || undefined
    );

    console.log('‚úÖ [API Login] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', sessionToken.substring(0, 10) + '...');

    console.log('üîê [API Login] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });

    console.log('üîê [API Login] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å cookie
    const response = NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        isActive: user.isActive
      },
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Å–µ—Å—Å–∏–µ–π
    response.cookies.set('session_token', sessionToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/'
    });

    console.log('‚úÖ [API Login] –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤, cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return response;

  } catch (error) {
    console.error('‚ùå [API Login] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.error('‚ùå [API Login] Stack trace:', error instanceof Error ? error.stack : '–ù–µ—Ç stack trace');
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
