// src/app/api/auth/convert-supabase-session/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '../../../../../lib/supabase/server';
import { prisma } from '../../../../../lib/prisma';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ [Convert Session] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Supabase —Å–µ—Å—Å–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω—É—é');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    try {
      await prisma.$connect();
      console.log('‚úÖ [Convert Session] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    } catch (dbError: any) {
      console.error('‚ùå [Convert Session] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', dbError);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ –ë–î
      if (dbError.code === 'P1001') {
        console.error('üö® [Convert Session] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É PostgreSQL');
      } else if (dbError.code === 'P1017') {
        console.error('üö® [Convert Session] –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      }
      
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: dbError.message,
        code: dbError.code
      }, { status: 500 });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const supabase = createClient();
    const { data: { user: supabaseUser }, error } = await supabase.auth.getUser();
    
    console.log('üîç [Convert Session] Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      hasUser: !!supabaseUser,
      userId: supabaseUser?.id,
      email: supabaseUser?.email,
      error: error?.message
    });
    
    if (error || !supabaseUser) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π Supabase —Å–µ—Å—Å–∏–∏',
        details: error?.message
      }, { status: 401 });
    }
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
    console.log('üîç [Convert Session] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    
    let user = await prisma.user.findUnique({
      where: { supabaseId: supabaseUser.id }
    });
    
    if (!user) {
      console.log('üîÑ [Convert Session] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      user = await prisma.user.create({
        data: {
          supabaseId: supabaseUser.id,
          email: supabaseUser.email || `user-${supabaseUser.id}@unknown.com`,
          name: supabaseUser.user_metadata?.name || supabaseUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          role: 'USER',
          isActive: true,
          lastLoginAt: new Date()
        }
      });
      
      console.log('‚úÖ [Convert Session] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);
    } else {
      console.log('‚úÖ [Convert Session] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      await prisma.user.update({
        where: { id: user.id },
        data: { lastLoginAt: new Date() }
      });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.session.deleteMany({
      where: { userId: user.id }
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const token = generateToken();
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
    
    await prisma.session.create({
      data: {
        userId: user.id,
        token,
        expiresAt
      }
    });
    
    console.log('‚úÖ [Convert Session] –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', token.substring(0, 10) + '...');
    
    const response = NextResponse.json({
      success: true,
      message: '–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –Ω–∞—à–µ–π —Å–µ—Å—Å–∏–µ–π
    response.cookies.set('session_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/',
      sameSite: 'lax'
    });
    
    return response;
    
  } catch (error) {
    console.error('‚ùå [Convert Session] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  for (let i = 0; i < 64; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
}