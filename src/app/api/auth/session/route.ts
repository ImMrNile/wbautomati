import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { prisma } from '../../../../../lib/prisma';

export async function GET(request: NextRequest) {
  try {
    console.log('üîê [API Session] === –ù–ê–ß–ê–õ–û GET /api/auth/session ===');
    
    // –ü–æ–ª—É—á–∞–µ–º cookie —Å —Å–µ—Å—Å–∏–µ–π
    const cookieStore = cookies();
    console.log('üîê [API Session] Cookie store –ø–æ–ª—É—á–µ–Ω');
    
    const sessionToken = cookieStore.get('session_token')?.value;
    console.log('üîê [API Session] Session token:', sessionToken ? `${sessionToken.substring(0, 10)}...` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!sessionToken) {
      console.log('üîê [API Session] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return NextResponse.json({
        success: false,
        user: null,
        message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    console.log('üîê [API Session] –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î...');
    
    // üÜï –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîê [API Session] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      await prisma.$queryRaw`SELECT 1 as test`;
      console.log('‚úÖ [API Session] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    } catch (dbError: any) {
      console.error('‚ùå [API Session] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
      return NextResponse.json({
        success: false,
        user: null,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: dbError.message
      }, { status: 500 });
    }
    
    // –ò—â–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîê [API Session] –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –≤ –ë–î —Å —Ç–æ–∫–µ–Ω–æ–º:', sessionToken.substring(0, 10) + '...');
    const session = await prisma.session.findUnique({
      where: { token: sessionToken },
      include: { user: true }
    });
    
    console.log('üîê [API Session] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', session ? { 
      sessionId: session.id, 
      userId: session.userId, 
      expiresAt: session.expiresAt,
      userEmail: session.user.email,
      userActive: session.user.isActive
    } : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    if (!session) {
      console.log('üîê [API Session] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î');
      
      // üÜï –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–µ—Å—Å–∏–∏ –≤ –ë–î
      const allSessions = await prisma.session.findMany({
        select: { id: true, token: true, userId: true, expiresAt: true }
      });
      console.log('üîê [API Session] –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ë–î:', allSessions.length);
      if (allSessions.length > 0) {
        console.log('üîê [API Session] –ü—Ä–∏–º–µ—Ä—ã —Å–µ—Å—Å–∏–π:', allSessions.slice(0, 3).map(s => ({
          id: s.id,
          tokenStart: s.token.substring(0, 10) + '...',
          userId: s.userId,
          expiresAt: s.expiresAt
        })));
      }
      
      return NextResponse.json({
        success: false,
        user: null,
        message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
    const now = new Date();
    console.log('üîê [API Session] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏:', {
      now: now.toISOString(),
      expiresAt: session.expiresAt.toISOString(),
      isExpired: session.expiresAt < now
    });
    
    if (session.expiresAt < now) {
      console.log('üîê [API Session] –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
      
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
      await prisma.session.delete({
        where: { id: session.id }
      });
      
      return NextResponse.json({
        success: false,
        user: null,
        message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!session.user.isActive) {
      console.log('üîê [API Session] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      return NextResponse.json({
        success: false,
        user: null,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
      });
    }
    
    console.log('‚úÖ [API Session] –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.user.email);
    
    const userData = {
      id: session.user.id,
      email: session.user.email,
      name: session.user.name || undefined,
      avatarUrl: session.user.avatarUrl || undefined,
      role: session.user.role,
      isActive: session.user.isActive
    };
    
    console.log('üîê [API Session] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
    
    return NextResponse.json({
      success: true,
      user: userData,
      message: '–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞'
    });
    
  } catch (error) {
    console.error('‚ùå [API Session] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.error('‚ùå [API Session] Stack trace:', error instanceof Error ? error.stack : '–ù–µ—Ç stack trace');
    
    return NextResponse.json({
      success: false,
      user: null,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
