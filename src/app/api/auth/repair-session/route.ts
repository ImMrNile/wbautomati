// src/app/api/auth/repair-session/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '../../../../../lib/supabase/server';
import { prisma } from '../../../../../lib/prisma';
import { cookies } from 'next/headers';

export async function POST(request: NextRequest) {
  try {
    console.log('üîß [Repair Session] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π cookie
    const cookieStore = cookies();
    const currentToken = cookieStore.get('session_token')?.value;
    
    console.log('üîß [Repair Session] –¢–µ–∫—É—â–∏–π token –≤ cookie:', currentToken ? currentToken.substring(0, 10) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ –ë–î
    if (currentToken) {
      const existingSession = await prisma.session.findUnique({
        where: { token: currentToken },
        include: { user: true }
      });
      
      console.log('üîß [Repair Session] –°–µ—Å—Å–∏—è –≤ –ë–î:', existingSession ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
      
      if (existingSession && existingSession.expiresAt > new Date()) {
        console.log('‚úÖ [Repair Session] –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å:', existingSession.user.email);
        return NextResponse.json({
          success: true,
          message: '–°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞',
          user: {
            id: existingSession.user.id,
            email: existingSession.user.email,
            name: existingSession.user.name
          }
        });
      }
    }
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    const supabase = createClient();
    const { data: { user: supabaseUser }, error } = await supabase.auth.getUser();
    
    console.log('üîß [Repair Session] Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      hasUser: !!supabaseUser,
      email: supabaseUser?.email,
      error: error?.message
    });
    
    if (error || !supabaseUser) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π Supabase —Å–µ—Å—Å–∏–∏',
        details: error?.message
      }, { status: 401 });
    }
    
    // 4. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
    let user = await prisma.user.findUnique({
      where: { supabaseId: supabaseUser.id }
    });
    
    console.log('üîß [Repair Session] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î:', user ? user.email : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      user = await prisma.user.create({
        data: {
          supabaseId: supabaseUser.id,
          email: supabaseUser.email || `user-${supabaseUser.id}@unknown.com`,
          name: supabaseUser.user_metadata?.name || supabaseUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          role: 'USER',
          isActive: true,
          lastLoginAt: new Date()
        }
      });
      console.log('‚úÖ [Repair Session] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email);
    }
    
    // 5. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletedSessions = await prisma.session.deleteMany({
      where: { userId: user.id }
    });
    console.log(`üßπ [Repair Session] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: ${deletedSessions.count}`);
    
    // 6. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const newToken = generateToken();
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
    
    const newSession = await prisma.session.create({
      data: {
        userId: user.id,
        token: newToken,
        expiresAt,
        ipAddress: request.ip || request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown'
      }
    });
    
    console.log('‚úÖ [Repair Session] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è:', newToken.substring(0, 10) + '...');
    
    // 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });
    
    const response = NextResponse.json({
      success: true,
      message: '–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      },
      sessionInfo: {
        tokenPreview: newToken.substring(0, 10) + '...',
        expiresAt: expiresAt.toISOString(),
        deletedOldSessions: deletedSessions.count
      }
    });
    
    // 8. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π cookie
    response.cookies.set('session_token', newToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/',
      sameSite: 'lax'
    });
    
    console.log('‚úÖ [Repair Session] Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    return response;
    
  } catch (error) {
    console.error('‚ùå [Repair Session] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  for (let i = 0; i < 64; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
}