// src/app/api/wb-proxy/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–ö–°–ò –° –ù–û–í–´–ú–ò –î–û–ú–ï–ù–ê–ú–ò WB

import { NextRequest, NextResponse } from 'next/server';

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WB API (2025)
const WB_API_CONFIG = {
  BASE_URLS: {
    CONTENT: 'https://content-api.wildberries.ru',
    MARKETPLACE: 'https://marketplace-api.wildberries.ru', 
    STATISTICS: 'https://statistics-api.wildberries.ru',
    DISCOUNTS_PRICES: 'https://discounts-prices-api.wildberries.ru'
  },
  TIMEOUTS: {
    DEFAULT: 30000,
    LONG: 60000
  },
  RATE_LIMITS: {
    REQUESTS_PER_MINUTE: 300,
    WINDOW_MS: 60 * 1000
  }
};

// Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
const FALLBACK_CONFIG = {
  // –ü—É–±–ª–∏—á–Ω—ã–µ endpoints –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
  PUBLIC_ENDPOINTS: {
    CATEGORIES: 'https://static-basket-01.wb.ru/vol0/data/main-menu-ru-ru-v2.json',
    SEARCH: 'https://search.wb.ru/exactmatch/ru/common/v4/search'
  },
  // DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  DNS_SERVERS: ['1.1.1.1', '8.8.8.8', '94.140.14.14'],
  // User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  USER_AGENTS: [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15'
  ]
};

// –ö–µ—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
const cache = new Map<string, { data: any; timestamp: number; ttl: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// Rate limiting (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
const rateLimiter = new Map<string, { count: number; resetTime: number }>();

function checkRateLimit(clientId: string): boolean {
  const now = Date.now();
  const limit = rateLimiter.get(clientId);
  
  if (!limit || now > limit.resetTime) {
    rateLimiter.set(clientId, {
      count: 1,
      resetTime: now + WB_API_CONFIG.RATE_LIMITS.WINDOW_MS
    });
    return true;
  }
  
  if (limit.count >= WB_API_CONFIG.RATE_LIMITS.REQUESTS_PER_MINUTE) {
    return false;
  }
  
  limit.count++;
  return true;
}

function getCacheKey(url: string, method: string, body?: string): string {
  return `${method}:${url}:${body ? Buffer.from(body).toString('base64').slice(0, 50) : ''}`;
}

function getFromCache(key: string): any | null {
  const cached = cache.get(key);
  if (!cached) return null;
  
  if (Date.now() > cached.timestamp + cached.ttl) {
    cache.delete(key);
    return null;
  }
  
  return cached.data;
}

function setCache(key: string, data: any, ttl: number = CACHE_TTL): void {
  cache.set(key, {
    data,
    timestamp: Date.now(),
    ttl
  });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 */
function getRandomUserAgent(): string {
  return FALLBACK_CONFIG.USER_AGENTS[Math.floor(Math.random() * FALLBACK_CONFIG.USER_AGENTS.length)];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –¥–ª—è endpoint
 */
function getCorrectDomain(endpoint: string): string {
  if (endpoint.includes('/content/')) {
    return WB_API_CONFIG.BASE_URLS.CONTENT;
  } else if (endpoint.includes('/marketplace/')) {
    return WB_API_CONFIG.BASE_URLS.MARKETPLACE;
  } else if (endpoint.includes('/statistics/')) {
    return WB_API_CONFIG.BASE_URLS.STATISTICS;
  } else if (endpoint.includes('/discounts/') || endpoint.includes('/prices/')) {
    return WB_API_CONFIG.BASE_URLS.DISCOUNTS_PRICES;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º content API
  return WB_API_CONFIG.BASE_URLS.CONTENT;
}

/**
 * –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
 */
async function getCategoriesPublic(): Promise<any> {
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API...');
    
    const response = await fetch(FALLBACK_CONFIG.PUBLIC_ENDPOINTS.CATEGORIES, {
      method: 'GET',
      headers: {
        'User-Agent': getRandomUserAgent(),
        'Accept': 'application/json',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'Cache-Control': 'no-cache'
      },
      signal: AbortSignal.timeout(WB_API_CONFIG.TIMEOUTS.DEFAULT)
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç WB API
      const convertedData = convertPublicCategoriesToWbFormat(data);
      return { data: convertedData };
    }
    
    throw new Error(`Public API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º ${response.status}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API:', error);
    throw error;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç WB API
 */
function convertPublicCategoriesToWbFormat(publicData: any): any[] {
  const categories: any[] = [];
  
  function extractCategories(items: any[], parentId?: number) {
    if (!Array.isArray(items)) return;
    
    items.forEach((item, index) => {
      if (item.name && item.id) {
        categories.push({
          objectID: item.id || (parentId ? parentId * 1000 + index : index + 1),
          objectName: item.name,
          parentID: parentId || null,
          isVisible: true
        });
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (item.children && Array.isArray(item.children)) {
          extractCategories(item.children, item.id || (parentId ? parentId * 1000 + index : index + 1));
        }
      }
    });
  }
  
  try {
    if (publicData && publicData.menu) {
      extractCategories(publicData.menu);
    } else if (Array.isArray(publicData)) {
      extractCategories(publicData);
    } else {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ fallback
      categories.push(
        { objectID: 963, objectName: '–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã', parentID: null, isVisible: true },
        { objectID: 964, objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏', parentID: null, isVisible: true },
        { objectID: 965, objectName: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', parentID: null, isVisible: true },
        { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: null, isVisible: true },
        { objectID: 2674, objectName: '–ö—É—Ö–æ–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞', parentID: null, isVisible: true }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
  }
  
  return categories;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ WB
 */
function validateWBToken(token: string): boolean {
  if (!token || typeof token !== 'string') {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞ (3 —Å–µ–≥–º–µ–Ω—Ç–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏)
  const segments = token.split('.');
  if (segments.length !== 3) {
    console.error(`‚ùå –¢–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç ${segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º base64
  try {
    segments.forEach((segment, index) => {
      if (segment.length === 0) {
        throw new Error(`–°–µ–≥–º–µ–Ω—Ç ${index + 1} –ø—É—Å—Ç`);
      }
      // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64
      Buffer.from(segment, 'base64');
    });
    return true;
  } catch (error) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JWT:', error);
    return false;
  }
}

export async function POST(request: NextRequest) {
  try {
    // Rate limiting
    const clientIP = request.ip || request.headers.get('x-forwarded-for') || 'unknown';
    if (!checkRateLimit(clientIP)) {
      return NextResponse.json(
        { error: 'Rate limit exceeded. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
        { status: 429 }
      );
    }

    const body = await request.json();
    const { endpoint, method = 'GET', data: requestData, apiToken, useCache = true } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!endpoint) {
      return NextResponse.json(
        { error: 'Endpoint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const isCategoriesRequest = endpoint.includes('/object/all') || endpoint.includes('/object/parent');
    
    if (isCategoriesRequest) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const cacheKey = getCacheKey(endpoint, method, requestData ? JSON.stringify(requestData) : undefined);
      
      if (useCache) {
        const cached = getFromCache(cacheKey);
        if (cached) {
          console.log('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞');
          return NextResponse.json({
            success: true,
            data: cached,
            fromCache: true
          });
        }
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
      try {
        const publicResult = await getCategoriesPublic();
        
        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setCache(cacheKey, publicResult, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        return NextResponse.json({
          success: true,
          data: publicResult,
          fromCache: false,
          source: 'public_api'
        });
      } catch (publicError) {
        console.warn('‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API');
        
        // –ï—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π
        if (!apiToken) {
          return NextResponse.json({
            success: false,
            error: '–ü—É–±–ª–∏—á–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–Ω API —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API'
          }, { status: 400 });
        }
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω)
    if (apiToken && !validateWBToken(apiToken)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JWT —Å 3 —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏.'
      }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const cacheKey = getCacheKey(endpoint, method, requestData ? JSON.stringify(requestData) : undefined);
    
    if (method === 'GET' && useCache && apiToken) {
      const cached = getFromCache(cacheKey);
      if (cached) {
        console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞:', endpoint);
        return NextResponse.json({
          success: true,
          data: cached,
          fromCache: true
        });
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL
    const baseUrl = getCorrectDomain(endpoint);
    const fullUrl = endpoint.startsWith('http') ? endpoint : `${baseUrl}${endpoint}`;

    console.log(`üåê –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å: ${method} ${fullUrl}`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'User-Agent': getRandomUserAgent(),
      'Accept': 'application/json',
      'Accept-Language': 'ru-RU,ru;q=0.9'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    if (apiToken && validateWBToken(apiToken)) {
      headers['Authorization'] = apiToken; // WB API 2025 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç Bearer –ø—Ä–µ—Ñ–∏–∫—Å–∞
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions: RequestInit = {
      method,
      headers,
      signal: AbortSignal.timeout(WB_API_CONFIG.TIMEOUTS.DEFAULT)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST/PUT
    if ((method === 'POST' || method === 'PUT') && requestData) {
      fetchOptions.body = JSON.stringify(requestData);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ WB API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let lastError: Error | null = null;
    const maxRetries = 3;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const response = await fetch(fullUrl, fetchOptions);
        
        console.log(`üì° –û—Ç–≤–µ—Ç WB API: ${response.status} ${response.statusText}`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        let responseData;
        const contentType = response.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
          responseData = await response.json();
        } else {
          responseData = await response.text();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if (!response.ok) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ WB API (${response.status}):`, responseData);
          
          // –î–ª—è –æ—à–∏–±–∫–∏ 401 —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints)
          if (response.status === 401 && apiToken && isCategoriesRequest) {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
            const headersWithoutAuth = { ...headers };
            delete headersWithoutAuth['Authorization'];
            
            const retryResponse = await fetch(fullUrl, {
              ...fetchOptions,
              headers: headersWithoutAuth
            });
            
            if (retryResponse.ok) {
              const retryData = await retryResponse.json();
              return NextResponse.json({
                success: true,
                data: retryData,
                statusCode: retryResponse.status,
                fromCache: false
              });
            }
          }
          
          return NextResponse.json({
            success: false,
            error: `WB API Error ${response.status}: ${typeof responseData === 'string' ? responseData : JSON.stringify(responseData)}`,
            statusCode: response.status
          }, { status: response.status });
        }

        // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –∑–∞–ø—Ä–æ—Å—ã
        if (method === 'GET' && useCache && response.ok) {
          const ttl = isCategoriesRequest ? 24 * 60 * 60 * 1000 : CACHE_TTL; // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
          setCache(cacheKey, responseData, ttl);
        }

        return NextResponse.json({
          success: true,
          data: responseData,
          statusCode: response.status,
          fromCache: false
        });

      } catch (error: any) {
        lastError = error;
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        
        if (attempt < maxRetries) {
          const delay = Math.pow(2, attempt) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã –∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    if (isCategoriesRequest) {
      console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const fallbackCategories = convertPublicCategoriesToWbFormat({});
      
      return NextResponse.json({
        success: true,
        data: { data: fallbackCategories },
        fromCache: false,
        source: 'fallback'
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (lastError?.name === 'TimeoutError') {
      return NextResponse.json(
        { 
          success: false, 
          error: '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
        },
        { status: 408 }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WB API', 
        details: lastError?.message 
      },
      { status: 500 }
    );

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 
        details: error.message 
      },
      { status: 500 }
    );
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const endpoint = searchParams.get('endpoint');
    const apiToken = request.headers.get('authorization')?.replace('Bearer ', '');

    if (!endpoint) {
      return NextResponse.json(
        { error: 'Endpoint –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ POST –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    const mockRequest = new Request(request.url, {
      method: 'POST',
      headers: request.headers,
      body: JSON.stringify({
        endpoint,
        method: 'GET',
        apiToken,
        useCache: true
      })
    });

    return POST(mockRequest as NextRequest);

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GET –ø—Ä–æ–∫—Å–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞', details: error.message },
      { status: 500 }
    );
  }
}

// DELETE –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action');

    if (action === 'clear-cache') {
      cache.clear();
      console.log('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω');
      return NextResponse.json({ success: true, message: '–ö–µ—à –æ—á–∏—â–µ–Ω' });
    }

    if (action === 'clear-rate-limit') {
      rateLimiter.clear();
      console.log('üóëÔ∏è Rate limiter –æ—á–∏—â–µ–Ω');
      return NextResponse.json({ success: true, message: 'Rate limiter –æ—á–∏—â–µ–Ω' });
    }

    return NextResponse.json(
      { error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
      { status: 400 }
    );

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ DELETE –ø—Ä–æ–∫—Å–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DELETE –∑–∞–ø—Ä–æ—Å–∞', details: error.message },
      { status: 500 }
    );
  }
}

// PATCH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function PATCH(request: NextRequest) {
  try {
    const stats = {
      cache: {
        size: cache.size,
        entries: Array.from(cache.keys()).slice(0, 10)
      },
      rateLimiter: {
        activeClients: rateLimiter.size,
        limits: WB_API_CONFIG.RATE_LIMITS
      },
      config: {
        cacheTTL: CACHE_TTL,
        timeout: WB_API_CONFIG.TIMEOUTS.DEFAULT,
        domains: WB_API_CONFIG.BASE_URLS
      }
    };

    return NextResponse.json({
      success: true,
      stats
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', details: error.message },
      { status: 500 }
    );
  }
}