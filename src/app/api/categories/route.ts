// src/app/api/categories/route.ts - API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface CategorySearchResult {
  id: string;
  name: string;
  slug: string;
  parentId: string;
  parentName: string;
  displayName: string;
  wbSubjectId: string | null;
  commissionFbw: number;
  commissionFbs: number;
  commissionDbs: number;
  commissionCc: number;
  commissionEdbs: number;
  commissionBooking: number;
  description: string | null;
  isActive: boolean;
  relevance_score: number;
}

interface FormattedCategory {
  id: number;
  name: string;
  slug: string;
  parentId: number;
  parentName: string;
  displayName: string;
  wbSubjectId?: number;
  commissions: {
    fbw: number;
    fbs: number;
    dbs: number;
    cc: number;
    edbs: number;
    booking: number;
  };
  description?: string;
  isActive: boolean;
}

// –ö–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoriesCache = new Map<string, { data: FormattedCategory[]; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// üÜï –õ–æ–∫–∞–ª—å–Ω—ã–π fallback –ø–æ–∏—Å–∫ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const LOCAL_FALLBACK_CATEGORIES: FormattedCategory[] = [
  {
    id: 409,
    name: "–ù–∞—É—à–Ω–∏–∫–∏",
    slug: "naushniki",
    parentId: 1,
    parentName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞",
    displayName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ / –ù–∞—É—à–Ω–∏–∫–∏",
    wbSubjectId: 593,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–ù–∞—É—à–Ω–∏–∫–∏ –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã",
    isActive: true
  },
  {
    id: 5270,
    name: "–ù–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã",
    slug: "naushniki-dlya-strelby",
    parentId: 2,
    parentName: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    displayName: "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã / –ù–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã",
    wbSubjectId: 6305,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–ó–∞—â–∏—Ç–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã",
    isActive: true
  },
  {
    id: 3227,
    name: "–ù–∞—É—à–Ω–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ",
    slug: "naushniki-protivoshumnye",
    parentId: 3,
    parentName: "–°–ø–µ—Ü–æ–¥–µ–∂–¥–∞ –∏ –°–ò–ó—ã",
    displayName: "–°–ø–µ—Ü–æ–¥–µ–∂–¥–∞ –∏ –°–ò–ó—ã / –ù–∞—É—à–Ω–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ",
    wbSubjectId: 3943,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–ü—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
    isActive: true
  },
  {
    id: 3263,
    name: "–ù–∞—É—à–Ω–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ –¥–µ—Ç—Å–∫–∏–µ",
    slug: "naushniki-protivoshumnye-detskie",
    parentId: 4,
    parentName: "–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–ª—ã—à–µ–π",
    displayName: "–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–ª—ã—à–µ–π / –ù–∞—É—à–Ω–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ –¥–µ—Ç—Å–∫–∏–µ",
    wbSubjectId: 3984,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—à—É–º–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    isActive: true
  },
  {
    id: 29,
    name: "–ù–∞—É—à–Ω–∏–∫–∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ",
    slug: "naushniki-uteplennye",
    parentId: 5,
    parentName: "–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã",
    displayName: "–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã / –ù–∞—É—à–Ω–∏–∫–∏ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ",
    wbSubjectId: 79,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –∑–∏–º—ã",
    isActive: true
  },
  {
    id: 1001,
    name: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    slug: "besprovodnye-naushniki",
    parentId: 1,
    parentName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞",
    displayName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ / –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    wbSubjectId: 594,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "Bluetooth –∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    isActive: true
  },
  {
    id: 1002,
    name: "–ò–≥—Ä–æ–≤—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    slug: "igrovye-naushniki",
    parentId: 1,
    parentName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞",
    displayName: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞—É–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ / –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
    wbSubjectId: 595,
    commissions: { fbw: 5, fbs: 5, dbs: 5, cc: 5, edbs: 5, booking: 5 },
    description: "–ù–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤",
    isActive: true
  }
];

// üÜï –§—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
function localSearch(query: string, limit: number = 20): FormattedCategory[] {
  const normalizedQuery = query.toLowerCase().trim();
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  const exactMatches = LOCAL_FALLBACK_CATEGORIES.filter(cat => 
    cat.name.toLowerCase() === normalizedQuery ||
    cat.displayName.toLowerCase() === normalizedQuery
  );
  
  // –ó–∞—Ç–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
  const nameMatches = LOCAL_FALLBACK_CATEGORIES.filter(cat => 
    !exactMatches.includes(cat) &&
    cat.name.toLowerCase().includes(normalizedQuery)
  );
  
  // –ó–∞—Ç–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const parentMatches = LOCAL_FALLBACK_CATEGORIES.filter(cat => 
    !exactMatches.includes(cat) &&
    !nameMatches.includes(cat) &&
    cat.parentName.toLowerCase().includes(normalizedQuery)
  );
  
  // –ó–∞—Ç–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
  const descriptionMatches = LOCAL_FALLBACK_CATEGORIES.filter(cat => 
    !exactMatches.includes(cat) &&
    !nameMatches.includes(cat) &&
    !parentMatches.includes(cat) &&
    cat.description?.toLowerCase().includes(normalizedQuery)
  );
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const results = [...exactMatches, ...nameMatches, ...parentMatches, ...descriptionMatches];
  
  console.log(`üîç –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
  
  return results.slice(0, limit);
}

// –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
async function ultraFastSearch(query: string, limit: number = 20): Promise<FormattedCategory[]> {
  const cacheKey = `search:${query}:${limit}`;
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  if (categoriesCache.has(cacheKey)) {
    const cached = categoriesCache.get(cacheKey)!;
    if (now - cached.timestamp < CACHE_DURATION) {
      console.log(`‚ö° –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞: "${query}" (${cached.data.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
      return cached.data;
    }
  }

  console.log(`üîç –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: "${query}"`);
  const startTime = Date.now();

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    const results = await prisma.$queryRaw<CategorySearchResult[]>`
      SELECT 
        id,
        name,
        slug,
        parent_id as "parentId",
        parent_name as "parentName", 
        display_name as "displayName",
        wb_subject_id as "wbSubjectId",
        commission_fbw as "commissionFbw",
        commission_fbs as "commissionFbs", 
        commission_dbs as "commissionDbs",
        commission_cc as "commissionCc",
        commission_edbs as "commissionEdbs",
        commission_booking as "commissionBooking",
        description,
        is_active as "isActive",
        -- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        CASE 
          WHEN name ILIKE ${`%${query}%`} THEN 100
          WHEN parent_name ILIKE ${`%${query}%`} THEN 80
          WHEN description ILIKE ${`%${query}%`} THEN 60
          ELSE 40
        END as relevance_score
      FROM mv_categories_search 
      WHERE (
        search_vector @@ plainto_tsquery('russian', ${query})
        OR name ILIKE ${`%${query}%`}
        OR parent_name ILIKE ${`%${query}%`}
        OR description ILIKE ${`%${query}%`}
      )
      AND is_active = true
      ORDER BY relevance_score DESC, popularity_weight DESC, name
      LIMIT ${limit}
    `;

    const duration = Date.now() - startTime;
    console.log(`‚ö° –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}–º—Å (${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üîç [API Categories] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    results.forEach((row, index) => {
      console.log(`  ${index + 1}. ID: ${row.id}, Name: "${row.name}", Parent: "${row.parentName}", wbSubjectId: ${row.wbSubjectId}`);
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedResults: FormattedCategory[] = results.map((row) => ({
      id: Number(row.id),
      name: row.name,
      slug: row.slug,
      parentId: Number(row.parentId),
      parentName: row.parentName,
      displayName: row.displayName,
      wbSubjectId: row.wbSubjectId ? Number(row.wbSubjectId) : undefined,
      commissions: {
        fbw: Number(row.commissionFbw),
        fbs: Number(row.commissionFbs),
        dbs: Number(row.commissionDbs),
        cc: Number(row.commissionCc),
        edbs: Number(row.commissionEdbs),
        booking: Number(row.commissionBooking)
      },
      description: row.description || undefined,
      isActive: row.isActive
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    categoriesCache.set(cacheKey, { data: formattedResults, timestamp: now });
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à–µ
    if (categoriesCache.size > 100) {
      const oldKeys = Array.from(categoriesCache.keys()).slice(0, 20);
      oldKeys.forEach(key => categoriesCache.delete(key));
    }

    return formattedResults;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–º –ø–æ–∏—Å–∫–µ:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Prisma connection pool
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as any;
      if (prismaError.code === 'P2024') {
        console.error('üö® Prisma connection pool timeout - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
        console.error('   Connection limit:', prismaError.meta?.connection_limit);
        console.error('   Timeout:', prismaError.meta?.timeout);
        console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...');
        return localSearch(query, limit);
      }
    }
    
    // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('üîÑ Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫...');
    try {
      return await standardSearch(query, limit);
    } catch (standardError) {
      console.error('‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:', standardError);
      console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...');
      return localSearch(query, limit);
    }
  }
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
async function standardSearch(query: string, limit: number = 20): Promise<FormattedCategory[]> {
  try {
    const results = await prisma.wbSubcategory.findMany({
      include: {
        parentCategory: true
      },
      where: {
        isActive: true,
        OR: [
          { name: { contains: query, mode: 'insensitive' } },
          { parentCategory: { name: { contains: query, mode: 'insensitive' } } },
          { description: { contains: query, mode: 'insensitive' } }
        ]
      },
      take: limit,
      orderBy: [
        { name: 'asc' }
      ]
    });

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    console.log('üîç [API Categories] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    results.forEach((cat, index) => {
      console.log(`  ${index + 1}. ID: ${cat.id}, Name: "${cat.name}", Parent: "${cat.parentCategory.name}", wbSubjectId: ${cat.wbSubjectId}`);
    });

    return results.map(cat => ({
      id: cat.id,
      name: cat.name,
      slug: cat.slug,
      parentId: cat.parentCategoryId,
      parentName: cat.parentCategory.name,
      displayName: `${cat.parentCategory.name} / ${cat.name}`,
      wbSubjectId: cat.wbSubjectId || undefined,
      commissions: {
        fbw: cat.commissionFbw,
        fbs: cat.commissionFbs,
        dbs: cat.commissionDbs,
        cc: cat.commissionCc,
        edbs: cat.commissionEdbs,
        booking: cat.commissionBooking
      },
      description: cat.description ?? undefined,
      isActive: cat.isActive
    }));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Prisma connection pool
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as any;
      if (prismaError.code === 'P2024') {
        console.error('üö® Prisma connection pool timeout –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ–∏—Å–∫–µ');
        console.error('   Connection limit:', prismaError.meta?.connection_limit);
        console.error('   Timeout:', prismaError.meta?.timeout);
      }
    }
    
    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...');
    return localSearch(query, limit);
  }
}

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action');
    const search = searchParams.get('search');
    const limit = parseInt(searchParams.get('limit') || '20');

    console.log(`üìÇ API –∑–∞–ø—Ä–æ—Å: ${action} ${search ? `"${search}"` : ''}`);

    switch (action) {
      case 'search':
        if (!search || search.trim() === '') {
          return NextResponse.json({ 
            success: false, 
            error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
          }, { status: 400, headers: corsHeaders });
        }

        try {
          const searchResults = await ultraFastSearch(search.trim(), limit);
          
          console.log(`‚úÖ –ü–æ–∏—Å–∫ "${search}" –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Date.now() - Date.now()}–º—Å`);
          
          return NextResponse.json({
            success: true,
            data: searchResults,
            total: searchResults.length,
            query: search,
            method: 'ultra_fast_search'
          }, { headers: corsHeaders });
        } catch (searchError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError);
          
          // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
          console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...');
          const localResults = localSearch(search.trim(), limit);
          
          return NextResponse.json({
            success: true,
            data: localResults,
            total: localResults.length,
            query: search,
            method: 'local_fallback',
            message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
          }, { headers: corsHeaders });
        }

      case 'all':
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const cacheKey = `all:${limit}`;
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (categoriesCache.has(cacheKey)) {
          const cached = categoriesCache.get(cacheKey)!;
          if (now - cached.timestamp < CACHE_DURATION) {
            console.log(`‚ö° –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–µ—à–∞ (${cached.data.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
            return NextResponse.json({
              success: true,
              data: cached.data,
              total: cached.data.length,
              method: 'cached'
            }, { headers: corsHeaders });
          }
        }

        try {
          const allCategories = await prisma.wbSubcategory.findMany({
            include: {
              parentCategory: true
            },
            where: {
              isActive: true
            },
            take: limit,
            orderBy: { name: 'asc' }
          });

          const formattedCategories: FormattedCategory[] = allCategories.map(cat => ({
            id: cat.id,
            name: cat.name,
            slug: cat.slug,
            parentId: cat.parentCategoryId,
            parentName: cat.parentCategory.name,
            displayName: `${cat.parentCategory.name} / ${cat.name}`,
            wbSubjectId: cat.wbSubjectId || undefined,
            commissions: {
              fbw: cat.commissionFbw,
              fbs: cat.commissionFbs,
              dbs: cat.commissionDbs,
              cc: cat.commissionCc,
              edbs: cat.commissionEdbs,
              booking: cat.commissionBooking
            },
            description: cat.description ?? undefined,
            isActive: cat.isActive
          }));

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          categoriesCache.set(cacheKey, { data: formattedCategories, timestamp: now });

          return NextResponse.json({
            success: true,
            data: formattedCategories,
            total: formattedCategories.length,
            method: 'database'
          }, { headers: corsHeaders });

        } catch (fallbackError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∑–∞–ø—Ä–æ—Å–∞:', fallbackError);
          
          // üÜï Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
          const localCategories = LOCAL_FALLBACK_CATEGORIES.slice(0, limit);
          
          return NextResponse.json({
            success: true,
            data: localCategories,
            total: localCategories.length,
            method: 'local_fallback',
            message: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
          }, { headers: corsHeaders });
        }

      case 'parents':
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const parents = await prisma.wbParentCategory.findMany({
          include: {
            _count: { select: { subcategories: true } }
          },
          where: {
            isActive: true
          },
          orderBy: { name: 'asc' }
        });

        const parentData = parents.map(cat => ({
          id: cat.id,
          name: cat.name,
          slug: cat.slug,
          count: cat._count.subcategories,
          description: cat.description,
          isActive: cat.isActive
        }));

        return NextResponse.json({
          success: true,
          data: parentData,
          total: parentData.length
        }, { headers: corsHeaders });

      case 'refresh':
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è...');
        
        try {
          await prisma.$executeRawUnsafe('SELECT refresh_categories_search()');
          console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
          
          // –û—á–∏—â–∞–µ–º –∫–µ—à
          categoriesCache.clear();
          
          return NextResponse.json({
            success: true,
            message: '–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
            cacheCleared: true
          }, { headers: corsHeaders });
        } catch (refreshError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', refreshError);
          return NextResponse.json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è',
            details: refreshError instanceof Error ? refreshError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          }, { status: 500, headers: corsHeaders });
        }

      default:
        return NextResponse.json({ 
          success: false, 
          error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: search, all, parents, refresh' 
        }, { status: 400, headers: corsHeaders });
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Prisma connection pool
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as any;
      if (prismaError.code === 'P2024') {
        console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Prisma connection pool');
        console.error('   Connection limit:', prismaError.meta?.connection_limit);
        console.error('   Timeout:', prismaError.meta?.timeout);
        
        return NextResponse.json({ 
          success: false,
          error: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
          details: 'Prisma connection pool timeout',
          suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
          errorCode: 'P2024'
        }, { status: 503, headers: corsHeaders });
      }
    }
    
    return NextResponse.json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500, headers: corsHeaders });
  }
}

// OPTIONS - –¥–ª—è CORS preflight
export async function OPTIONS() {
  return new NextResponse(null, { 
    status: 200,
    headers: corsHeaders
  });
}
