// src/app/api/test-categories/route.ts - –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

import { NextRequest, NextResponse } from 'next/server';

// –ö–æ–ø–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–∞
interface ProductAnalysisResult {
  visualAnalysis: {
    productType: string;
    primaryColor: string;
    material: string;
    style: string;
    keyFeatures: string[];
    targetAudience: string;
    confidence: number;
    detailedDescription?: string;
    categoryKeywords?: string[];
  };
  categoryAnalysis?: {
    primaryCategory: string;
    secondaryCategories: string[];
    categoryConfidence: number;
    reasonForCategory: string;
  };
  seoTitle: string;
  seoDescription: string;
  characteristics: { id: number; value: string; }[];
  suggestedKeywords: string[];
  competitiveAdvantages: string[];
  wbCategory: string;
  marketingInsights: {
    pricePosition: string;
    uniqueSellingPoints: string[];
    targetAgeGroup: string;
    seasonality: string;
  };
}

interface CategoryMatch {
  category: {
    objectID: number;
    objectName: string;
    parentID?: number;
    parentName?: string;
    isLeaf?: boolean;
  };
  score: number;
  reason: string;
  source: 'ai' | 'reference' | 'keywords' | 'fallback';
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getTestCategories(): any[] {
  return [
    { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 5392, objectName: '–ö–∞–±–µ–ª–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã', parentID: 1229, parentName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', isLeaf: true },
    { objectID: 306, objectName: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 566, objectName: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 1347, objectName: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true },
    { objectID: 1408, objectName: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', parentID: 0, parentName: '–ö–æ—Ä–µ–Ω—å', isLeaf: true }
  ];
}

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–∞
function findBestCategoryForProduct(
  geminiAnalysis: ProductAnalysisResult,
  wbCategories: any[],
  referenceData?: any
): CategoryMatch {
  console.log('üéØ === –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ö–ê–¢–ï–ì–û–†–ò–ò ===');
  console.log(`ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: "${geminiAnalysis.wbCategory}"`);
  console.log(`üì¶ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: "${geminiAnalysis.visualAnalysis?.productType}"`);
  
  if (referenceData?.category) {
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceData.category}"`);
  }

  const matches: CategoryMatch[] = [];

  // 1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  const aiMatch = findByAICategory(geminiAnalysis.wbCategory, wbCategories);
  if (aiMatch) {
    matches.push(aiMatch);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò: ${aiMatch.category.objectName} (${aiMatch.score} –±–∞–ª–ª–æ–≤)`);
  }

  // 2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const keywordMatches = findByKeywords(
    geminiAnalysis.visualAnalysis?.productType || '',
    geminiAnalysis.visualAnalysis?.categoryKeywords || [],
    wbCategories
  );
  matches.push(...keywordMatches);

  // 3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞)
  if (referenceData?.category) {
    const referenceMatch = findByReferenceName(referenceData.category, wbCategories, geminiAnalysis);
    if (referenceMatch) {
      matches.push(referenceMatch);
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–æ–≥–æ–º: ${referenceMatch.category.objectName} (${referenceMatch.score} –±–∞–ª–ª–æ–≤)`);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É, –ø–æ—Ç–æ–º –ø–æ —Å–∫–æ—Ä—É
  matches.sort((a, b) => {
    const sourcePriority = { 'ai': 4, 'keywords': 3, 'reference': 2, 'fallback': 1 };
    const aPriority = sourcePriority[a.source];
    const bPriority = sourcePriority[b.source];
    
    if (aPriority !== bPriority) {
      return bPriority - aPriority;
    }
    return b.score - a.score;
  });

  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (matches.length > 0) {
    const bestMatch = matches[0];
    console.log(`üèÜ –í–´–ë–†–ê–ù–ê –ö–ê–¢–ï–ì–û–†–ò–Ø: "${bestMatch.category.objectName}"`);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${bestMatch.source}, –û—Ü–µ–Ω–∫–∞: ${bestMatch.score}, –ü—Ä–∏—á–∏–Ω–∞: ${bestMatch.reason}`);
    
    return bestMatch;
  }

  // Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
  return getFallbackCategory(geminiAnalysis);
}

function findByAICategory(aiCategory: string, categories: any[]): CategoryMatch | null {
  if (!aiCategory || aiCategory.length < 3) return null;

  const aiLower = aiCategory.toLowerCase().trim();
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const category of categories) {
    const categoryName = (category.objectName || '').toLowerCase();
    
    if (categoryName === aiLower) {
      return {
        category,
        score: 100,
        reason: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
        source: 'ai'
      };
    }
  }

  // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const category of categories) {
    const categoryName = (category.objectName || '').toLowerCase();
    
    if (categoryName.includes(aiLower) || aiLower.includes(categoryName)) {
      return {
        category,
        score: 90,
        reason: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
        source: 'ai'
      };
    }
  }

  return null;
}

function findByKeywords(productType: string, categoryKeywords: string[], categories: any[]): CategoryMatch[] {
  const matches: CategoryMatch[] = [];
  
  const electronicsKeywords = [
    '–∫–∞–±–µ–ª—å', 'cable', '–ø—Ä–æ–≤–æ–¥', '—à–Ω—É—Ä', 'usb', 'type-c', 'lightning', 'micro',
    '–∑–∞—Ä—è–¥–Ω–æ–µ', '–∑–∞—Ä—è–¥–∫–∞', 'charger', '–∞–¥–∞–ø—Ç–µ—Ä', 'adapter', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫',
    '–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones', 'bluetooth', '–∫–æ–ª–æ–Ω–∫–∞', 'speaker',
    '—Ç–µ–ª–µ—Ñ–æ–Ω', 'phone', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–ø–ª–∞–Ω—à–µ—Ç', 'tablet',
    '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π', 'electric', 'electronic'
  ];

  const searchText = `${productType} ${categoryKeywords.join(' ')}`.toLowerCase();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É
  const electronicsMatches = electronicsKeywords.filter(keyword => 
    searchText.includes(keyword)
  );

  if (electronicsMatches.length > 0) {
    const electronicsCategory = categories.find(cat => 
      cat.objectName.toLowerCase().includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞') ||
      cat.objectID === 1229 ||
      cat.objectName.toLowerCase().includes('–∫–∞–±–µ–ª')
    );

    if (electronicsCategory) {
      matches.push({
        category: electronicsCategory,
        score: 85 + (electronicsMatches.length * 5),
        reason: `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏: ${electronicsMatches.join(', ')}`,
        source: 'keywords'
      });
    }
  }

  return matches;
}

function findByReferenceName(referenceCategoryName: string, categories: any[], geminiAnalysis: ProductAnalysisResult): CategoryMatch | null {
  if (!referenceCategoryName) return null;

  const refLower = referenceCategoryName.toLowerCase();
  const productType = geminiAnalysis.visualAnalysis?.productType?.toLowerCase() || '';

  // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —è–≤–Ω–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π
  if ((refLower.includes('–¥–æ–º') || refLower.includes('—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞')) && 
      (productType.includes('–∫–∞–±–µ–ª') || productType.includes('–∑–∞—Ä—è–¥–∫') || productType.includes('usb'))) {
    console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞ "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
    return null;
  }

  for (const category of categories) {
    const categoryName = (category.objectName || '').toLowerCase();
    
    if (categoryName.includes(refLower) || refLower.includes(categoryName)) {
      return {
        category,
        score: 60,
        reason: '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∞–Ω–∞–ª–æ–≥–∞',
        source: 'reference'
      };
    }
  }

  return null;
}

function getFallbackCategory(geminiAnalysis: ProductAnalysisResult): CategoryMatch {
  const productType = geminiAnalysis.visualAnalysis?.productType?.toLowerCase() || '';
  const aiCategory = geminiAnalysis.wbCategory?.toLowerCase() || '';
  
  // –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
  if (productType.includes('–∫–∞–±–µ–ª') || productType.includes('–∑–∞—Ä—è–¥–∫') || 
      productType.includes('usb') || aiCategory.includes('—ç–ª–µ–∫—Ç—Ä–æ–Ω')) {
    return {
      category: { objectID: 1229, objectName: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', parentID: 0, parentName: '', isLeaf: true },
      score: 45,
      reason: '–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
      source: 'fallback'
    };
  }

  // –û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  return {
    category: { objectID: 14727, objectName: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', parentID: 0, parentName: '', isLeaf: true },
    score: 25,
    reason: '–û–±—â–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
    source: 'fallback'
  };
}

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const productName = url.searchParams.get('productName') || '–ö–∞–±–µ–ª—å Type-C USB-C 1–º';
    const aiCategory = url.searchParams.get('aiCategory') || '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞';
    const referenceCategory = url.searchParams.get('referenceCategory') || '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞';

    console.log('üß™ === –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô ===');
    console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: "${productName}"`);
    console.log(`ü§ñ –ò–ò –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${aiCategory}"`);
    console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–æ–≥–∞: "${referenceCategory}"`);

    // –°–æ–∑–¥–∞–µ–º mock –∞–Ω–∞–ª–∏–∑
    const mockAnalysis: ProductAnalysisResult = {
      wbCategory: aiCategory,
      visualAnalysis: {
        productType: productName,
        primaryColor: '—á–µ—Ä–Ω—ã–π',
        material: '–ø–ª–∞—Å—Ç–∏–∫',
        style: '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
        keyFeatures: ['–±—ã—Å—Ç—Ä–∞—è –∑–∞—Ä—è–¥–∫–∞', '–ø—Ä–æ—á–Ω—ã–π'],
        targetAudience: '–≤–∑—Ä–æ—Å–ª—ã–µ',
        confidence: 0.9,
        categoryKeywords: ['–∫–∞–±–µ–ª—å', 'usb', 'type-c']
      },
      seoTitle: productName,
      seoDescription: `${productName} –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞`,
      characteristics: [],
      suggestedKeywords: ['–∫–∞–±–µ–ª—å', 'usb', 'type-c'],
      competitiveAdvantages: ['–±—ã—Å—Ç—Ä–∞—è –∑–∞—Ä—è–¥–∫–∞', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
      marketingInsights: {
        pricePosition: '—Å—Ä–µ–¥–Ω–∏–π',
        uniqueSellingPoints: ['–±—ã—Å—Ç—Ä–∞—è –∑–∞—Ä—è–¥–∫–∞'],
        targetAgeGroup: '18-65',
        seasonality: '–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–æ'
      }
    };

    // Mock –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∞
    const mockReferenceData = {
      name: '–ö–∞–±–µ–ª—å USB-C –∞–Ω–∞–ª–æ–≥',
      category: referenceCategory,
      brand: 'TestBrand'
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = getTestCategories();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
    const categoryMatch = findBestCategoryForProduct(
      mockAnalysis,
      categories,
      mockReferenceData
    );

    console.log('‚úÖ === –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê ===');
    console.log(`üèÜ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryMatch.category.objectName}`);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫: ${categoryMatch.source}`);
    console.log(`üíØ –û—Ü–µ–Ω–∫–∞: ${categoryMatch.score}`);

    return NextResponse.json({
      success: true,
      testInput: {
        productName,
        aiCategory,
        referenceCategory
      },
      result: {
        finalCategory: categoryMatch.category.objectName,
        categoryId: categoryMatch.category.objectID,
        source: categoryMatch.source,
        score: categoryMatch.score,
        reason: categoryMatch.reason
      },
      analysis: {
        message: categoryMatch.category.objectName === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' 
          ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢–æ–≤–∞—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞!'
          : `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ "${categoryMatch.category.objectName}" –≤–º–µ—Å—Ç–æ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"`,
        isCorrect: categoryMatch.category.objectName === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        logicWorking: categoryMatch.source === 'ai' || categoryMatch.source === 'keywords'
      }
    });

  } catch (error: any) {
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      details: error.message
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { testCases = [] } = body;

    const results = [];

    for (const testCase of testCases) {
      const { productName, aiCategory, referenceCategory } = testCase;

      const mockAnalysis: ProductAnalysisResult = {
        wbCategory: aiCategory,
        visualAnalysis: {
          productType: productName,
          primaryColor: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
          material: '–Ω–µ —É–∫–∞–∑–∞–Ω',
          style: '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
          keyFeatures: [],
          targetAudience: '–≤–∑—Ä–æ—Å–ª—ã–µ',
          confidence: 0.8,
          categoryKeywords: productName.toLowerCase().split(' ')
        },
        seoTitle: productName,
        seoDescription: productName,
        characteristics: [],
        suggestedKeywords: [],
        competitiveAdvantages: [],
        marketingInsights: {
          pricePosition: '—Å—Ä–µ–¥–Ω–∏–π',
          uniqueSellingPoints: [],
          targetAgeGroup: '18-65',
          seasonality: '–∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–æ'
        }
      };

      const mockReferenceData = referenceCategory ? {
        name: '–ê–Ω–∞–ª–æ–≥',
        category: referenceCategory
      } : null;

      const categories = getTestCategories();
      const categoryMatch = findBestCategoryForProduct(
        mockAnalysis,
        categories,
        mockReferenceData
      );

      results.push({
        input: testCase,
        result: {
          finalCategory: categoryMatch.category.objectName,
          source: categoryMatch.source,
          score: categoryMatch.score,
          reason: categoryMatch.reason
        }
      });
    }

    return NextResponse.json({
      success: true,
      results,
      summary: {
        total: results.length,
        electronics: results.filter(r => r.result.finalCategory === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞').length,
        correctClassification: results.filter(r => 
          (r.input.productName.toLowerCase().includes('–∫–∞–±–µ–ª—å') || 
           r.input.productName.toLowerCase().includes('–∑–∞—Ä—è–¥–∫–∞') ||
           r.input.productName.toLowerCase().includes('usb')) &&
          r.result.finalCategory === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
        ).length
      }
    });

  } catch (error: any) {
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      details: error.message
    }, { status: 500 });
  }
}