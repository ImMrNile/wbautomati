// src/app/api/cabinets/route.ts - –ü–æ–ª–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import { AuthService } from './../../../../lib/auth/auth-service';

// –ù–æ–≤—ã–µ –±–∞–∑–æ–≤—ã–µ URL API Wildberries 2025
const WB_API_ENDPOINTS = {
  content: 'https://content-api.wildberries.ru',
  marketplace: 'https://marketplace-api.wildberries.ru',
  statistics: 'https://statistics-api.wildberries.ru',
  prices: 'https://discounts-prices-api.wildberries.ru'
};

export async function GET() {
  try {
    console.log('üîç [API Cabinets] === –ù–ê–ß–ê–õ–û GET /api/cabinets ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('üîç [API Cabinets] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      console.log('‚ùå [API Cabinets] User not authenticated');
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        suggestion: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤',
        cabinets: []
      }, { status: 401 });
    }

    console.log('‚úÖ [API Cabinets] User authenticated:', { 
      id: user.id, 
      email: user.email,
      role: user.role
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç [API Cabinets] –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –ë–î...');
    
    const cabinets = await prisma.cabinet.findMany({
      where: { 
        userId: user.id
      },
      include: {
        productCabinets: {
          include: {
            product: {
              select: {
                id: true,
                status: true
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log('‚úÖ [API Cabinets] –ö–∞–±–∏–Ω–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', {
      count: cabinets.length,
      cabinets: cabinets.map(c => ({
        id: c.id,
        name: c.name,
        isActive: c.isActive,
        productCount: c.productCabinets.length
      }))
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const cabinetsWithStats = cabinets.map(cabinet => ({
      id: cabinet.id,
      userId: cabinet.userId,
      name: cabinet.name,
      description: cabinet.description,
      apiToken: maskToken(cabinet.apiToken || ''),
      isActive: cabinet.isActive,
      createdAt: cabinet.createdAt,
      updatedAt: cabinet.updatedAt,
      stats: {
        totalProducts: cabinet.productCabinets.length,
        publishedProducts: cabinet.productCabinets.filter(pc => 
          pc.product.status === 'PUBLISHED'
        ).length,
        processingProducts: cabinet.productCabinets.filter(pc => 
          pc.product.status === 'PROCESSING' || pc.product.status === 'PUBLISHING'
        ).length
      }
    }));

    console.log('‚úÖ [API Cabinets] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏:', {
      count: cabinetsWithStats.length,
      activeCount: cabinetsWithStats.filter(c => c.isActive).length
    });

    return NextResponse.json({
      success: true,
      cabinets: cabinetsWithStats,
      total: cabinets.length,
      meta: {
        userId: user.id,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå [API Cabinets] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤';
    let statusCode = 500;
    
    if (error instanceof Error) {
      if (error.message.includes('P1001') || error.message.includes('ENOTFOUND')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 503;
      } else if (error.message.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 504;
      }
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage,
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      cabinets: []
    }, { status: statusCode });
  }
}

// POST - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç
export async function POST(request: NextRequest) {
  try {
    console.log('üìù [API Cabinets] === –ù–ê–ß–ê–õ–û POST /api/cabinets ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        suggestion: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞'
      }, { status: 401 });
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    let name: string | undefined;
    let apiToken: string | undefined;
    let description: string | undefined;
    let skipValidation: boolean | undefined;

    const contentType = request.headers.get('content-type') || '';
    if (contentType.includes('application/json')) {
      const body = await request.json();
      name = body.name;
      apiToken = body.apiToken || body.token || body.api_key;
      description = body.description;
      skipValidation = body.skipValidation === true || body.skipValidation === 'true';
    } else {
      const form = await request.formData();
      name = (form.get('name') as string) || undefined;
      apiToken = (form.get('apiToken') as string) || (form.get('token') as string) || undefined;
      description = (form.get('description') as string) || undefined;
      const sv = form.get('skipValidation');
      const svStr = typeof sv === 'string' ? sv : '';
      skipValidation = svStr === 'true' || svStr === '1' || svStr === 'on';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π'
      }, { status: 400 });
    }

    if (!apiToken || typeof apiToken !== 'string' || apiToken.trim().length === 0) {
      return NextResponse.json({
        success: false,
        error: 'API —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingCabinet = await prisma.cabinet.findFirst({
      where: { 
        name: name.trim(),
        userId: user.id
      }
    });

    if (existingCabinet) {
      return NextResponse.json({
        success: false,
        error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é)
    if (!skipValidation) {
      const validation = await validateWBToken(apiToken.trim());
      if (!validation.valid) {
        return NextResponse.json({
          success: false,
          error: validation.error,
          suggestion: validation.networkError ? 
            '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞.' : 
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.',
          canSkipValidation: validation.networkError,
          tokenAnalysis: validation.tokenAnalysis
        }, { status: 400 });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç
    const newCabinet = await prisma.cabinet.create({
      data: {
        userId: user.id,
        name: name.trim(),
        apiToken: apiToken.trim(),
        description: description?.trim() || null,
        isActive: true
      }
    });

    console.log('‚úÖ [API Cabinets] –ù–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω:', {
      id: newCabinet.id,
      name: newCabinet.name,
      userId: newCabinet.userId
    });

    return NextResponse.json({
      success: true,
      cabinet: {
        ...newCabinet,
        apiToken: maskToken(newCabinet.apiToken || ''),
        stats: {
          totalProducts: 0,
          publishedProducts: 0,
          processingProducts: 0
        }
      },
      message: skipValidation 
        ? '–ö–∞–±–∏–Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' 
        : '–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå [API Cabinets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞';
    let statusCode = 500;
    
    if (error instanceof Error) {
      if (error.message.includes('P1001') || error.message.includes('ENOTFOUND')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 503;
      } else if (error.message.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 504;
      } else if (error.message.includes('P2002')) {
        errorMessage = '–ö–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        statusCode = 409;
      }
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage,
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: statusCode });
  }
}

// PUT - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç
export async function PUT(request: NextRequest) {
  try {
    console.log('üìù [API Cabinets] === –ù–ê–ß–ê–õ–û PUT /api/cabinets ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      }, { status: 401 });
    }

    const body = await request.json();
    const { id, name, apiToken, description, isActive, skipValidation } = body;

    if (!id || typeof id !== 'string') {
      return NextResponse.json({
        success: false,
        error: 'ID –∫–∞–±–∏–Ω–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cabinet = await prisma.cabinet.findFirst({
      where: { 
        id,
        userId: user.id
      }
    });

    if (!cabinet) {
      return NextResponse.json({
        success: false,
        error: '–ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      }, { status: 404 });
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (apiToken && apiToken !== cabinet.apiToken && !skipValidation) {
      const validation = await validateWBToken(apiToken.trim());
      if (!validation.valid) {
        return NextResponse.json({
          success: false,
          error: validation.error,
          suggestion: validation.networkError ? 
            '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Wildberries. –û–±–Ω–æ–≤–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞.' : 
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ API —Ç–æ–∫–µ–Ω–∞.',
          canSkipValidation: validation.networkError
        }, { status: 400 });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
    if (name && name !== cabinet.name) {
      const existingCabinet = await prisma.cabinet.findFirst({
        where: { 
          name: name.trim(),
          userId: user.id,
          id: { not: id }
        }
      });

      if (existingCabinet) {
        return NextResponse.json({
          success: false,
          error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
        }, { status: 400 });
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {};
    
    if (name !== undefined && name !== null) {
      updateData.name = name.trim();
    }
    
    if (apiToken !== undefined && apiToken !== null) {
      updateData.apiToken = apiToken.trim();
    }
    
    if (description !== undefined) {
      updateData.description = description?.trim() || null;
    }
    
    if (typeof isActive !== 'undefined') {
      updateData.isActive = isActive;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–±–∏–Ω–µ—Ç
    const updatedCabinet = await prisma.cabinet.update({
      where: { id },
      data: updateData
    });

    console.log('‚úÖ [API Cabinets] –ö–∞–±–∏–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', {
      id: updatedCabinet.id,
      name: updatedCabinet.name
    });

    return NextResponse.json({
      success: true,
      cabinet: {
        ...updatedCabinet,
        apiToken: maskToken(updatedCabinet.apiToken || ''),
        stats: {
          totalProducts: 0,
          publishedProducts: 0,
          processingProducts: 0
        }
      },
      message: '–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå [API Cabinets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞';
    let statusCode = 500;
    
    if (error instanceof Error) {
      if (error.message.includes('P1001') || error.message.includes('ENOTFOUND')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 503;
      } else if (error.message.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 504;
      } else if (error.message.includes('P2002')) {
        errorMessage = '–ö–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        statusCode = 409;
      }
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage,
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: statusCode });
  }
}

// DELETE - —É–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç
export async function DELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è [API Cabinets] === –ù–ê–ß–ê–õ–û DELETE /api/cabinets ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id || typeof id !== 'string') {
      return NextResponse.json({
        success: false,
        error: 'ID –∫–∞–±–∏–Ω–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cabinet = await prisma.cabinet.findFirst({
      where: { 
        id,
        userId: user.id
      },
      include: {
        productCabinets: true
      }
    });

    if (!cabinet) {
      return NextResponse.json({
        success: false,
        error: '–ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è'
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    if (cabinet.productCabinets && cabinet.productCabinets.length > 0) {
      return NextResponse.json({
        success: false,
        error: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç: —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–æ ${cabinet.productCabinets.length} —Ç–æ–≤–∞—Ä–æ–≤`,
        canForceDelete: true,
        relatedProductsCount: cabinet.productCabinets.length
      }, { status: 400 });
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞–±–∏–Ω–µ—Ç
    await prisma.cabinet.delete({
      where: { id }
    });

    console.log('‚úÖ [API Cabinets] –ö–∞–±–∏–Ω–µ—Ç —É–¥–∞–ª–µ–Ω:', {
      id: cabinet.id,
      name: cabinet.name
    });

    return NextResponse.json({
      success: true,
      message: '–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå [API Cabinets] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞';
    let statusCode = 500;
    
    if (error instanceof Error) {
      if (error.message.includes('P1001') || error.message.includes('ENOTFOUND')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 503;
      } else if (error.message.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        statusCode = 504;
      } else if (error.message.includes('P2003')) {
        errorMessage = '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏';
        statusCode = 409;
      }
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage,
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: statusCode });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WB —Ç–æ–∫–µ–Ω–∞
async function validateWBToken(token: string): Promise<{ 
  valid: boolean; 
  error?: string; 
  networkError?: boolean;
  tokenAnalysis?: any;
}> {
  console.log('üîç [API Cabinets] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω WB...');
  
  // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω
  const tokenAnalysis = analyzeJWTToken(token);
  if (!tokenAnalysis.valid) {
    return {
      valid: false,
      error: tokenAnalysis.error,
      tokenAnalysis
    };
  }

  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
  if (tokenAnalysis.isExpired) {
    return {
      valid: false,
      error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries.',
      tokenAnalysis
    };
  }

  // –°–ø–∏—Å–æ–∫ ping endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const pingEndpoints = [
    { name: 'Content API', url: `${WB_API_ENDPOINTS.content}/ping` },
    { name: 'Marketplace API', url: `${WB_API_ENDPOINTS.marketplace}/ping` }
  ];

  let successCount = 0;
  let lastError = '';
  let hasNetworkError = false;

  for (const endpoint of pingEndpoints) {
    try {
      console.log(`üì° [API Cabinets] –ü—Ä–æ–≤–µ—Ä—è–µ–º ${endpoint.name}: ${endpoint.url}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const response = await fetch(endpoint.url, {
        method: 'GET',
        headers: {
          'Authorization': token,
          'Content-Type': 'application/json',
          'User-Agent': 'WB-Automation/1.0'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      console.log(`${endpoint.name} –æ—Ç–≤–µ—Ç: ${response.status}`);

      if (response.ok) {
        successCount++;
        console.log(`‚úÖ ${endpoint.name} - —É—Å–ø–µ—à–Ω–æ!`);
        
        if (successCount === 1) {
          return { 
            valid: true, 
            tokenAnalysis 
          };
        }
      } else if (response.status === 401) {
        lastError = '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      } else if (response.status === 403) {
        lastError = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É API';
      } else {
        lastError = `–û—à–∏–±–∫–∞ API: ${response.status}`;
      }

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ${endpoint.name}:`, error.message);
      hasNetworkError = true;
      
      if (error.name === 'AbortError') {
        lastError = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥)';
      } else if (error.message.includes('ENOTFOUND')) {
        lastError = '–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä API Wildberries';
      } else if (error.message.includes('fetch failed')) {
        lastError = '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API';
      } else {
        lastError = '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      }
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  if (successCount === 0) {
    return { 
      valid: false, 
      error: lastError || '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Wildberries',
      networkError: hasNetworkError,
      tokenAnalysis
    };
  }

  return { 
    valid: true, 
    tokenAnalysis 
  };
}

// –ê–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
function analyzeJWTToken(token: string) {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      return { 
        valid: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)' 
      };
    }

    const b64 = parts[1].replace(/-/g, '+').replace(/_/g, '/');
    const payloadJson = Buffer.from(b64, 'base64').toString('utf8');
    const payload = JSON.parse(payloadJson);
    
    const now = Math.floor(Date.now() / 1000);
    const isExpired = payload.exp && payload.exp < now;
    
    return {
      valid: true,
      isExpired,
      expiresAt: payload.exp ? new Date(payload.exp * 1000).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      sellerId: payload.sid || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      permissions: payload.s || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      isTestToken: payload.t || false,
      tokenId: payload.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ JWT —Ç–æ–∫–µ–Ω–∞:', error);
    
    let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JWT —Ç–æ–∫–µ–Ω';
    
    if (error instanceof Error) {
      if (error.message.includes('JSON')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞';
      } else if (error.message.includes('base64')) {
        errorMessage = '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞';
      } else {
        errorMessage = `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: ${error.message}`;
      }
    }
    
    return { 
      valid: false, 
      error: errorMessage
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
function maskToken(token: string): string {
  if (!token) return '***';
  if (token.length === 0) return '***';
  if (token.length <= 8) return '*'.repeat(Math.min(token.length, 10));
  
  return token.substring(0, 4) + '*'.repeat(Math.max(token.length - 8, 3)) + token.substring(token.length - 4);
}