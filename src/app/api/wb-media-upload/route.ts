// src/app/api/wb-proxy/route.ts - –ü—Ä–æ–∫—Å–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å WB API

import { NextRequest, NextResponse } from 'next/server';
import { WB_API_CONFIG } from '../../../../lib/config/wbApiConfig';

// –ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
const cache = new Map<string, { data: any; timestamp: number; ttl: number }>();

// TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const CACHE_TTL = {
  CATEGORIES: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
  CHARACTERISTICS: 12 * 60 * 60 * 1000, // 12 —á–∞—Å–æ–≤
  DIRECTORIES: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
  DEFAULT: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
};

interface ProxyRequest {
  endpoint: string;
  method: string;
  data?: any;
  apiToken: string;
  useCache?: boolean;
}

export async function POST(request: NextRequest) {
  try {
    const body: ProxyRequest = await request.json();
    const { endpoint, method, data, apiToken, useCache = true } = body;

    if (!endpoint || !apiToken) {
      return NextResponse.json({
        success: false,
        error: 'Endpoint –∏ apiToken –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 });
    }

    console.log(`üîó WB Proxy: ${method} ${endpoint}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if (method === 'GET' && useCache) {
      const cacheKey = `${endpoint}_${apiToken.slice(-10)}`;
      const cached = getCachedData(cacheKey);
      if (cached) {
        console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞: ${endpoint}`);
        return NextResponse.json({
          success: true,
          data: cached,
          cached: true
        });
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
    const url = `${WB_API_CONFIG.BASE_URLS.CONTENT}${endpoint}`;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const headers = {
      'Authorization': apiToken, // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º "Bearer" –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ
      'Content-Type': 'application/json',
      'User-Agent': 'WB-Automation/1.0'
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
    console.log(`üîó WB Proxy –∑–∞–ø—Ä–æ—Å: ${method} ${endpoint}`);
    console.log(`üîë –¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${apiToken.substring(0, 10)}...`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions: RequestInit = {
      method,
      headers
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST/PUT
    if ((method === 'POST' || method === 'PUT') && data) {
      fetchOptions.body = JSON.stringify(data);
    }

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ WB API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥

    try {
      const response = await fetch(url, {
        ...fetchOptions,
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå WB API –æ—à–∏–±–∫–∞ ${response.status}:`, errorText);
        
        return NextResponse.json({
          success: false,
          error: `WB API Error ${response.status}: ${errorText}`,
          statusCode: response.status
        }, { status: response.status });
      }

      const responseData = await response.json();
      console.log(`‚úÖ WB API —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç`);

      // –ö–µ—à–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å—ã
      if (method === 'GET' && useCache) {
        const cacheKey = `${endpoint}_${apiToken.slice(-10)}`;
        setCachedData(cacheKey, responseData, getCacheTTL(endpoint));
      }

      return NextResponse.json({
        success: true,
        data: responseData
      });

    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error instanceof Error && error.name === 'AbortError') {
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API');
        return NextResponse.json({
          success: false,
          error: '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API'
        }, { status: 408 });
      }

      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API:', error);
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WB API'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–∫—Å–∏:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞'
    }, { status: 500 });
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const action = searchParams.get('action');

  if (action === 'stats') {
    const stats = {
      cacheSize: cache.size,
      entries: Array.from(cache.keys()).map(key => {
        const entry = cache.get(key);
        return {
          key: key.substring(0, 50) + '...',
          age: entry ? Date.now() - entry.timestamp : 0,
          ttl: entry?.ttl,
          expired: entry ? Date.now() > entry.timestamp + entry.ttl : true
        };
      })
    };

    return NextResponse.json({ stats });
  }

  return NextResponse.json({
    message: 'WB API Proxy –∞–∫—Ç–∏–≤–µ–Ω',
    endpoints: {
      POST: '–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WB API',
      'GET?action=stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞',
      'DELETE?action=clear-cache': '–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞'
    }
  });
}

// DELETE - –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
export async function DELETE(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const action = searchParams.get('action');

  if (action === 'clear-cache') {
    const sizeBefore = cache.size;
    cache.clear();
    console.log(`üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ ${sizeBefore} –∑–∞–ø–∏—Å–µ–π`);
    
    return NextResponse.json({
      success: true,
      message: `–ö–µ—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ ${sizeBefore} –∑–∞–ø–∏—Å–µ–π`
    });
  }

  return NextResponse.json({
    success: false,
    error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
  }, { status: 400 });
}

// PATCH - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export async function PATCH() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = {
    totalRequests: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
    cacheHits: 0,
    cacheMisses: 0,
    errors: 0,
    avgResponseTime: 0
  };

  return NextResponse.json({ stats });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º
function getCachedData(key: string): any | null {
  const entry = cache.get(key);
  if (!entry) return null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–µ—à
  if (Date.now() > entry.timestamp + entry.ttl) {
    cache.delete(key);
    return null;
  }

  return entry.data;
}

function setCachedData(key: string, data: any, ttl: number): void {
  cache.set(key, {
    data,
    timestamp: Date.now(),
    ttl
  });

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
  if (cache.size > 1000) {
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    const entries = Array.from(cache.entries());
    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
    
    // –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const toDelete = Math.floor(entries.length * 0.2);
    for (let i = 0; i < toDelete; i++) {
      cache.delete(entries[i][0]);
    }
  }
}

function getCacheTTL(endpoint: string): number {
  if (endpoint.includes('/object/all') || endpoint.includes('/object/parent')) {
    return CACHE_TTL.CATEGORIES;
  }
  
  if (endpoint.includes('/charcs')) {
    return CACHE_TTL.CHARACTERISTICS;
  }
  
  if (endpoint.includes('/directory/')) {
    return CACHE_TTL.DIRECTORIES;
  }
  
  return CACHE_TTL.DEFAULT;
}

// –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
if (typeof setInterval !== 'undefined') {
  setInterval(() => {
    const now = Date.now();
    const keysToDelete: string[] = [];
    
    cache.forEach((entry, key) => {
      if (now > entry.timestamp + entry.ttl) {
        keysToDelete.push(key);
      }
    });
    
    keysToDelete.forEach(key => cache.delete(key));
    
    if (keysToDelete.length > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${keysToDelete.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞`);
    }
  }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
}