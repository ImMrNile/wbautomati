// /scripts/update-characteristics.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –†–ê–ë–û–¢–´

import { PrismaClient } from '@prisma/client';
import 'dotenv/config';

const prisma = new PrismaClient();

const WB_API_TOKEN = process.env.WB_API_TOKEN;
const WB_API_BASE_URL = 'https://content-api.wildberries.ru';

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const REQUEST_DELAY_MS = 1000;

if (!WB_API_TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω WB_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª–µ).');
    process.exit(1);
}

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function makeWbApiRequest(endpoint) {
    const url = `${WB_API_BASE_URL}${endpoint}`;
    const headers = { 'Authorization': WB_API_TOKEN, 'Content-Type': 'application/json' };
    const response = await fetch(url, { headers });
    if (!response.ok) {
        if (response.status === 429) {
            throw new Error(`429 Too Many Requests`);
        }
        if (response.status !== 404) {
            const errorText = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ WB API (${response.status}): ${errorText}`);
        }
        return null;
    }
    return response.json();
}

async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    console.log(`üïí –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: ${REQUEST_DELAY_MS} –º—Å.`);

    try {
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞—à–µ–π –ë–î
        const allSubcategories = await prisma.wbSubcategory.findMany({
            orderBy: { id: 'asc' },
        });

        if (allSubcategories.length === 0) {
            console.error('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
            return;
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allSubcategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î.`);

        // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –£–ñ–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        const processedCategoryIds = (await prisma.wbCategoryCharacteristic.findMany({
            select: { subcategoryId: true },
            distinct: ['subcategoryId']
        })).map(c => c.subcategoryId);

        if (processedCategoryIds.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${processedCategoryIds.length} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.`);
        }

        // –®–∞–≥ 3: –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesToProcess = allSubcategories.filter(
            cat => !processedCategoryIds.includes(cat.id)
        );

        if (categoriesToProcess.length === 0) {
            console.log('üéâ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
            return;
        }
        console.log(`üî• –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${categoriesToProcess.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`);


        // –®–∞–≥ 4: –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ú –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        let totalCharacteristicsSynced = 0;
        let categoriesWithoutChars = 0;

        for (let i = 0; i < categoriesToProcess.length; i++) {
            const subcategory = categoriesToProcess[i];
            if (!subcategory.wbSubjectId) {
                console.log(`[${i + 1}/${categoriesToProcess.length}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${subcategory.name}" –Ω–µ—Ç WB Subject ID.`);
                continue;
            }

            console.log(`[${i + 1}/${categoriesToProcess.length}] üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è "${subcategory.name}" (ID: ${subcategory.wbSubjectId})...`);

            try {
                const characteristicsResponse = await makeWbApiRequest(`/content/v2/object/charcs/${subcategory.wbSubjectId}`);

                if (!characteristicsResponse || !characteristicsResponse.data || characteristicsResponse.data.length === 0) {
                    console.log(`  ü§î –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${subcategory.name}" –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.`);
                    categoriesWithoutChars++;
                    await delay(REQUEST_DELAY_MS);
                    continue;
                }

                const characteristics = characteristicsResponse.data;

                for (const char of characteristics) {
                    const characteristicId = char.id || char.charcID;
                    if (!characteristicId || !char.name || typeof char.charcType === 'undefined') {
                        console.warn(`  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:`, char);
                        continue;
                    }

                    await prisma.wbCategoryCharacteristic.create({
                        data: {
                            subcategoryId: subcategory.id,
                            wbCharacteristicId: characteristicId,
                            name: char.name,
                            type: String(char.charcType),
                            isRequired: char.required || false,
                            isMultiselect: char.isMultiselect || false,
                        },
                    });
                    totalCharacteristicsSynced++;
                }
                console.log(`  üëç –£—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.`);

            } catch (error) {
                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${subcategory.name}": ${error.message}`);
                if (error.message.includes('429')) {
                    console.error('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å —ç—Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞.');
                    process.exit(1);
                }
            }

            await delay(REQUEST_DELAY_MS);
        }

        console.log('\n=============================================');
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log(`  - –ù–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${totalCharacteristicsSynced}`);
        console.log('=============================================');

    } catch (error) {
        console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

main();