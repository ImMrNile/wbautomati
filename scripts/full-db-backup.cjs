// scripts/simple-xlsx.cjs
const { PrismaClient } = require('@prisma/client')
const XLSX = require('xlsx')
const fs = require('fs')

const prisma = new PrismaClient()

async function quickExcelExport() {
    try {
        console.log('üîÑ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel...')

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
        const workbook = XLSX.utils.book_new()

        // === –ü–†–û–î–£–ö–¢–´ ===
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã...')
        const products = await prisma.product.findMany({
            include: {
                subcategory: {
                    include: {
                        parentCategory: true
                    }
                },
                productCabinets: {
                    include: {
                        cabinet: true
                    }
                }
            }
        })

        const productsData = products.map(product => ({
            'ID': product.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': product.name,
            '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': product.generatedName || '',
            '–¶–µ–Ω–∞': product.price,
            '–°—Ç–∞—Ç—É—Å': product.status,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.subcategory ? .parentCategory ? .name || '',
            '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è': product.subcategory ? .name || '',
            '–ö–∞–±–∏–Ω–µ—Ç—ã': product.productCabinets.map(pc => pc.cabinet.name).join(', '),
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': product.createdAt ? .toISOString().split('T')[0] || ''
        }))

        const productsSheet = XLSX.utils.json_to_sheet(productsData)
        XLSX.utils.book_append_sheet(workbook, productsSheet, 'Products')
        console.log(`   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`)

        // === –ö–ê–ë–ò–ù–ï–¢–´ ===
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã...')
        const cabinets = await prisma.cabinet.findMany({
            include: {
                _count: {
                    select: { productCabinets: true }
                }
            }
        })

        const cabinetsData = cabinets.map(cabinet => ({
            'ID': cabinet.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': cabinet.name,
            '–û–ø–∏—Å–∞–Ω–∏–µ': cabinet.description || '',
            '–ê–∫—Ç–∏–≤–µ–Ω': cabinet.isActive ? '–î–∞' : '–ù–µ—Ç',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤': cabinet._count.productCabinets,
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': cabinet.createdAt ? .toISOString().split('T')[0] || ''
        }))

        const cabinetsSheet = XLSX.utils.json_to_sheet(cabinetsData)
        XLSX.utils.book_append_sheet(workbook, cabinetsSheet, 'Cabinets')
        console.log(`   ‚úÖ –ö–∞–±–∏–Ω–µ—Ç–æ–≤: ${cabinets.length}`)

        // === –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
        const parentCategories = await prisma.wbParentCategory.findMany({
            include: {
                _count: {
                    select: { subcategories: true }
                }
            }
        })

        const parentCategoriesData = parentCategories.map(cat => ({
            'ID': cat.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': cat.name,
            'Slug': cat.slug,
            '–û–ø–∏—Å–∞–Ω–∏–µ': cat.description || '',
            '–ê–∫—Ç–∏–≤–Ω–∞': cat.isActive ? '–î–∞' : '–ù–µ—Ç',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π': cat._count.subcategories
        }))

        const parentCategoriesSheet = XLSX.utils.json_to_sheet(parentCategoriesData)
        XLSX.utils.book_append_sheet(workbook, parentCategoriesSheet, 'Parent Categories')
        console.log(`   ‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${parentCategories.length}`)

        // === –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò (–í–´–ë–û–†–û–ß–ù–û) ===
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–µ 500)...')
        const subcategories = await prisma.wbSubcategory.findMany({
            take: 500,
            include: {
                parentCategory: true,
                _count: {
                    select: { products: true }
                }
            }
        })

        const subcategoriesData = subcategories.map(sub => ({
            'ID': sub.id,
            'WB Subject ID': sub.wbSubjectId || '',
            '–ù–∞–∑–≤–∞–Ω–∏–µ': sub.name,
            'Slug': sub.slug,
            '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è': sub.parentCategory.name,
            '–ö–æ–º–∏—Å—Å–∏—è FBW': sub.commissionFbw + '%',
            '–ö–æ–º–∏—Å—Å–∏—è FBS': sub.commissionFbs + '%',
            '–ê–∫—Ç–∏–≤–Ω–∞': sub.isActive ? '–î–∞' : '–ù–µ—Ç',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤': sub._count.products
        }))

        const subcategoriesSheet = XLSX.utils.json_to_sheet(subcategoriesData)
        XLSX.utils.book_append_sheet(workbook, subcategoriesSheet, 'Subcategories (500)')
        console.log(`   ‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategories.length} –∏–∑ 7211`)

        // === –°–û–•–†–ê–ù–ï–ù–ò–ï ===
        const exportDir = './exports'
        if (!fs.existsSync(exportDir)) {
            fs.mkdirSync(exportDir, { recursive: true })
        }

        const fileName = `wb_quick_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`
        const filePath = `${exportDir}/${fileName}`

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª...')
        XLSX.writeFile(workbook, filePath)

        console.log(`\n‚úÖ –ë–´–°–¢–†–´–ô –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!`)
        console.log(`üìÅ –§–∞–π–ª: ${filePath}`)
        console.log(`\nüìä –ß—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:`)
        console.log(`   - –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`)
        console.log(`   - –ö–∞–±–∏–Ω–µ—Ç–æ–≤: ${cabinets.length}`)
        console.log(`   - –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${parentCategories.length}`)
        console.log(`   - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategories.length} (–ø–µ—Ä–≤—ã–µ 500)`)
        console.log(`\nüí° –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø`)

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error)
    } finally {
        await prisma.$disconnect()
    }
}

quickExcelExport()