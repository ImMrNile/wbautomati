#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Wildberries Parser 2025 - —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü WB
"""

import json
import time
import random
import sys
import re
import os
from typing import Optional, Dict, List, Any, Tuple
from dataclasses import dataclass, asdict
import logging
from urllib.parse import urlencode, urlparse, parse_qs

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ requests —Å fallback
try:
    import requests
    from bs4 import BeautifulSoup
    HAS_REQUESTS = True
    HAS_BS4 = True
except ImportError:
    HAS_REQUESTS = False
    HAS_BS4 = False
    # –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ requests
    class MockRequests:
        class Session:
            def __init__(self):
                self.headers = {}
            def get(self, *args, **kwargs):
                raise Exception("requests module not available")
            def head(self, *args, **kwargs):
                raise Exception("requests module not available")
        def Session(self):
            return MockRequests.Session()
    requests = MockRequests()
    BeautifulSoup = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform.startswith('win'):
    import codecs
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
    if hasattr(sys.stderr, 'buffer'):
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stderr)]
)
logger = logging.getLogger(__name__)

@dataclass
class WBProductData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ WB —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
    id: str
    name: str
    brand: str
    price: int
    rating: float
    reviewsCount: int
    description: str
    characteristics: List[Dict[str, str]]
    images: List[str]
    category: str
    categoryId: Optional[int] = None
    availability: bool = True
    vendorCode: str = ""
    supplierId: Optional[str] = None
    tnved: str = "8544429009"
    variantId: Optional[str] = None  # ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (size parameter)

class WildberriesParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Wildberries —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ HTML"""
    
    def __init__(self):
        self.session = requests.Session() if HAS_REQUESTS else None
        
        if self.session:
            self.session.verify = True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ User-Agent –¥–ª—è 2025
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15'
        ]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.base_headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'max-age=0'
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ GitHub –ø—Ä–æ–µ–∫—Ç–æ–≤)
        self.default_params = {
            'curr': 'rub',
            'dest': '-1257786',  # –ú–æ—Å–∫–≤–∞
            'spp': '30',
            'appType': '1',
            'version': '2'
        }
        
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ API endpoints
        self.endpoints = {
            'card_detail': 'https://card.wb.ru/cards/detail',
            'card_detail_v2': 'https://card.wb.ru/cards/v2/detail',
            'search_v5': 'https://search.wb.ru/exactmatch/ru/common/v5/search',
            'search_v4': 'https://search.wb.ru/exactmatch/ru/common/v4/search',
            'enrichment': 'https://card.wb.ru/cards/v1/detail',
            'basket_base': 'https://basket-{}.wbbasket.ru'
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.request_count = 0
        self.success_count = 0
        self.failure_count = 0
    
    def get_random_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π User-Agent"""
        headers = self.base_headers.copy()
        headers['User-Agent'] = random.choice(self.user_agents)
        headers['Referer'] = 'https://www.wildberries.ru/'
        return headers
    
    def apply_rate_limit(self, min_delay: float = 0.5, max_delay: float = 2.0):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ rate limiting —Å —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
    
    def extract_product_id(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL"""
        patterns = [
            r'/catalog/(\d+)/detail\.aspx',
            r'/catalog/(\d+)(?:/|$|\?)',
            r'product/(\d+)',
            r'detail/(\d+)',
            r'nm[=:]?(\d+)',
            r'(?:^|\D)(\d{6,12})(?:\D|$)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                nm_id = match.group(1)
                if 6 <= len(nm_id) <= 12:
                    return nm_id
        return None
    
    def extract_size_parameter(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ size –∏–∑ URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
        try:
            parsed_url = urlparse(url)
            query_params = parse_qs(parsed_url.query)
            
            if 'size' in query_params:
                size_param = query_params['size'][0]
                if size_param and size_param.isdigit():
                    return size_param
            
            size_patterns = [
                r'size=(\d+)',
                r'size:(\d+)',
                r'sku=(\d+)',
                r'variant=(\d+)'
            ]
            
            for pattern in size_patterns:
                match = re.search(pattern, url)
                if match:
                    return match.group(1)
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è size –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {e}")
        
        return None
    
    def parse_html_page(self, url: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        if not HAS_REQUESTS or not HAS_BS4:
            logger.warning("BeautifulSoup –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML")
            return None
        
        try:
            logger.info(f"üåê –ü–∞—Ä—Å–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            headers = self.get_random_headers()
            response = self.session.get(url, headers=headers, timeout=15)
            
            if response.status_code != 200:
                logger.warning(f"HTTP {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return None
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
            product_data = self._extract_data_from_html(soup, url)
            
            if product_data:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML: {product_data.name}")
                return product_data
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
        
        return None
    
    def _extract_data_from_html(self, soup: BeautifulSoup, url: str) -> Optional[WBProductData]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ HTML"""
        try:
            nm_id = self.extract_product_id(url)
            size_param = self.extract_size_parameter(url)
            
            if not nm_id:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = self._extract_product_name(soup)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = self._extract_price_from_html(soup)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
            rating, reviews_count = self._extract_rating_and_reviews(soup)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥
            brand = self._extract_brand_from_html(soup)
            
            # –ì–ª–∞–≤–Ω–æ–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ HTML
            characteristics = self._extract_characteristics_from_html(soup)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = self._extract_description_from_html(soup, characteristics)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._extract_category_from_html(soup)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = self._generate_image_urls(nm_id)
            
            return WBProductData(
                id=nm_id,
                name=name or f'–¢–æ–≤–∞—Ä {nm_id}',
                brand=brand or 'NoName',
                price=price,
                rating=rating,
                reviewsCount=reviews_count,
                description=description,
                characteristics=characteristics,
                images=images,
                category=category or '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
                categoryId=None,
                availability=True,
                vendorCode=nm_id,
                supplierId=None,
                tnved='8544429009',
                variantId=size_param
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML: {e}")
            return None
    
    def _extract_product_name(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        selectors = [
            'h1[data-link]',
            'h1.product-page__title',
            '.product-page__header h1',
            '[data-testid="product-title"]',
            '.goods-name',
            'h1'
        ]
        
        for selector in selectors:
            element = soup.select_one(selector)
            if element and element.get_text(strip=True):
                name = element.get_text(strip=True)
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                name = re.sub(r'\s+', ' ', name)
                if len(name) > 3:
                    return name
        
        return None
    
    def _extract_price_from_html(self, soup: BeautifulSoup) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ HTML"""
        price_selectors = [
            '.price-block__final-price',
            '.product-page__price-final',
            '[data-testid="price-current"]',
            '.price__lower-price',
            '.price-current',
            '.mini-product__price-value'
        ]
        
        for selector in price_selectors:
            element = soup.select_one(selector)
            if element:
                price_text = element.get_text(strip=True)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–Ω—ã
                price_match = re.search(r'(\d+(?:\s?\d+)*)', price_text.replace('\xa0', ' '))
                if price_match:
                    price_str = price_match.group(1).replace(' ', '')
                    try:
                        return int(price_str)
                    except ValueError:
                        continue
        
        return 0
    
    def _extract_rating_and_reviews(self, soup: BeautifulSoup) -> Tuple[float, int]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        rating = 0.0
        reviews_count = 0
        
        # –†–µ–π—Ç–∏–Ω–≥
        rating_selectors = [
            '[data-testid="product-rating"]',
            '.product-review__rating',
            '.rating-number',
            '.product-page__rating-value'
        ]
        
        for selector in rating_selectors:
            element = soup.select_one(selector)
            if element:
                rating_text = element.get_text(strip=True)
                rating_match = re.search(r'(\d+[.,]\d+)', rating_text)
                if rating_match:
                    try:
                        rating = float(rating_match.group(1).replace(',', '.'))
                        break
                    except ValueError:
                        continue
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        reviews_selectors = [
            '[data-testid="product-reviews-count"]',
            '.product-review__count',
            '.feedback-count',
            '.product-page__reviews-count'
        ]
        
        for selector in reviews_selectors:
            element = soup.select_one(selector)
            if element:
                reviews_text = element.get_text(strip=True)
                reviews_match = re.search(r'(\d+)', reviews_text)
                if reviews_match:
                    try:
                        reviews_count = int(reviews_match.group(1))
                        break
                    except ValueError:
                        continue
        
        return rating, reviews_count
    
    def _extract_brand_from_html(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ HTML"""
        brand_selectors = [
            '[data-testid="product-brand"]',
            '.product-page__brand',
            '.brand-name',
            '.seller-name'
        ]
        
        for selector in brand_selectors:
            element = soup.select_one(selector)
            if element and element.get_text(strip=True):
                brand = element.get_text(strip=True)
                if len(brand) > 1 and len(brand) < 100:
                    return brand
        
        return None
    
    def _extract_characteristics_from_html(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ HTML"""
        characteristics = []
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            tables_characteristics = self._extract_from_characteristic_tables(soup)
            characteristics.extend(tables_characteristics)
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ popup-–º–æ–¥–∞–ª–∞—Ö —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            popup_characteristics = self._extract_from_popup_details(soup)
            characteristics.extend(popup_characteristics)
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤ JSON –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            json_characteristics = self._extract_from_page_json(soup)
            characteristics.extend(json_characteristics)
            
            # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
            meta_characteristics = self._extract_from_meta_data(soup)
            characteristics.extend(meta_characteristics)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            characteristics = self._clean_and_deduplicate_characteristics(characteristics)
            
            logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(characteristics)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ HTML")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for char in characteristics:
                logger.debug(f"   ‚Ä¢ {char['name']}: {char['value']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
        
        return characteristics
    
    def _extract_from_characteristic_tables(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü product-params"""
        characteristics = []
        
        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        table_selectors = [
            '.product-params__table',
            '.characteristics-table',
            '.product-characteristics__table',
            '.params-table'
        ]
        
        for selector in table_selectors:
            tables = soup.select(selector)
            for table in tables:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                caption = table.select_one('caption, .product-params__caption')
                group_name = caption.get_text(strip=True) if caption else None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                rows = table.select('tr.product-params__row, tr')
                for row in rows:
                    cells = row.select('td, th')
                    if len(cells) >= 2:
                        name_cell = cells[0]
                        value_cell = cells[1]
                        
                        name = name_cell.get_text(strip=True)
                        value = value_cell.get_text(strip=True)
                        
                        if name and value and len(name) > 1 and len(value) > 0:
                            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            name = re.sub(r'[^\w\s\-.,()]+', '', name).strip()
                            
                            characteristics.append({
                                'name': name,
                                'value': value,
                                'group': group_name
                            })
        
        return characteristics
    
    def _extract_from_popup_details(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ popup-–º–æ–¥–∞–ª–æ–≤"""
        characteristics = []
        
        # –ü–æ–∏—Å–∫ popup-–º–æ–¥–∞–ª–æ–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        popup_selectors = [
            '.popup-product-details',
            '.product-details',
            '.characteristics-popup'
        ]
        
        for selector in popup_selectors:
            popups = soup.select(selector)
            for popup in popups:
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–Ω—É—Ç—Ä–∏ popup
                tables = popup.select('.product-params__table, table')
                for table in tables:
                    caption = table.select_one('caption')
                    group_name = caption.get_text(strip=True) if caption else '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'
                    
                    rows = table.select('tr')
                    for row in rows:
                        cells = row.select('td, th')
                        if len(cells) >= 2:
                            name = cells[0].get_text(strip=True)
                            value = cells[1].get_text(strip=True)
                            
                            if name and value and len(name) > 1:
                                characteristics.append({
                                    'name': name,
                                    'value': value,
                                    'group': group_name
                                })
        
        return characteristics
    
    def _extract_from_page_json(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        characteristics = []
        
        try:
            # –ü–æ–∏—Å–∫ script —Ç–µ–≥–æ–≤ —Å JSON –¥–∞–Ω–Ω—ã–º–∏
            scripts = soup.find_all('script', type='application/ld+json')
            scripts.extend(soup.find_all('script', string=re.compile(r'"characteristics"')))
            scripts.extend(soup.find_all('script', string=re.compile(r'"options"')))
            
            for script in scripts:
                if script.string:
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                        json_data = json.loads(script.string)
                        
                        # –ü–æ–∏—Å–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö JSON
                        chars = self._extract_characteristics_from_json(json_data)
                        characteristics.extend(chars)
                        
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ –Ω–µ JSON, –∏—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript
                        js_data = script.string
                        chars = self._extract_from_javascript_data(js_data)
                        characteristics.extend(chars)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ JSON: {e}")
        
        return characteristics
    
    def _extract_characteristics_from_json(self, data: Any) -> List[Dict[str, str]]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        characteristics = []
        
        if isinstance(data, dict):
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if 'options' in data and isinstance(data['options'], list):
                for option in data['options']:
                    if isinstance(option, dict) and 'name' in option and 'value' in option:
                        characteristics.append({
                            'name': str(option['name']),
                            'value': str(option['value']),
                            'group': 'JSON –¥–∞–Ω–Ω—ã–µ'
                        })
            
            if 'characteristics' in data and isinstance(data['characteristics'], list):
                for char in data['characteristics']:
                    if isinstance(char, dict) and 'name' in char and 'value' in char:
                        characteristics.append({
                            'name': str(char['name']),
                            'value': str(char['value']),
                            'group': 'JSON –¥–∞–Ω–Ω—ã–µ'
                        })
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–∞—Ö
            for key, value in data.items():
                if key not in ['options', 'characteristics']:
                    characteristics.extend(self._extract_characteristics_from_json(value))
        
        elif isinstance(data, list):
            for item in data:
                characteristics.extend(self._extract_characteristics_from_json(item))
        
        return characteristics
    
    def _extract_from_javascript_data(self, js_code: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ JavaScript –∫–æ–¥–∞"""
        characteristics = []
        
        try:
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –≤ JS –∫–æ–¥–µ
            patterns = [
                r'"name"\s*:\s*"([^"]+)"\s*,\s*"value"\s*:\s*"([^"]+)"',
                r"'name'\s*:\s*'([^']+)'\s*,\s*'value'\s*:\s*'([^']+)'",
                r'name:\s*"([^"]+)"\s*,\s*value:\s*"([^"]+)"'
            ]
            
            for pattern in patterns:
                matches = re.finditer(pattern, js_code)
                for match in matches:
                    name = match.group(1)
                    value = match.group(2)
                    
                    if name and value and len(name) > 1:
                        characteristics.append({
                            'name': name,
                            'value': value,
                            'group': 'JavaScript –¥–∞–Ω–Ω—ã–µ'
                        })
        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ JavaScript: {e}")
        
        return characteristics
    
    def _extract_from_meta_data(self, soup: BeautifulSoup) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        characteristics = []
        
        try:
            # Open Graph –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
            meta_tags = soup.find_all('meta')
            
            for meta in meta_tags:
                property_name = meta.get('property', '') or meta.get('name', '')
                content = meta.get('content', '')
                
                if property_name and content:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç–∞-—Å–≤–æ–π—Å—Ç–≤–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if 'brand' in property_name.lower():
                        characteristics.append({
                            'name': '–ë—Ä–µ–Ω–¥',
                            'value': content,
                            'group': '–ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ'
                        })
                    elif 'price' in property_name.lower():
                        characteristics.append({
                            'name': '–¶–µ–Ω–∞',
                            'value': content,
                            'group': '–ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ'
                        })
                    elif 'category' in property_name.lower():
                        characteristics.append({
                            'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                            'value': content,
                            'group': '–ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ'
                        })
        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return characteristics
    
    def _clean_and_deduplicate_characteristics(self, characteristics: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """–û—á–∏—Å—Ç–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        seen = set()
        cleaned = []
        
        for char in characteristics:
            name = char.get('name', '').strip()
            value = char.get('value', '').strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if not name or not value or len(name) < 2 or len(value) < 1:
                continue
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            name = re.sub(r'[^\w\s\-.,()]+', '', name).strip()
            
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            value = re.sub(r'\s+', ' ', value).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            key = f"{name.lower()}:{value.lower()}"
            if key not in seen:
                seen.add(key)
                cleaned.append({
                    'name': name,
                    'value': value
                })
        
        return cleaned
    
    def _extract_description_from_html(self, soup: BeautifulSoup, characteristics: List[Dict[str, str]]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        description_parts = []
        
        # –ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        description_selectors = [
            '.product-details__description',
            '.product-description',
            '.goods-description',
            '[data-testid="product-description"]'
        ]
        
        for selector in description_selectors:
            element = soup.select_one(selector)
            if element:
                desc_text = element.get_text(strip=True)
                if len(desc_text) > 10:
                    description_parts.append(desc_text)
                    break
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        if not description_parts and characteristics:
            description_parts.append("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:")
            for char in characteristics[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                description_parts.append(f"‚Ä¢ {char['name']}: {char['value']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è
        description_parts.extend([
            "",
            "‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
            "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"
        ])
        
        return '\n'.join(description_parts)
    
    def _extract_category_from_html(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ HTML"""
        category_selectors = [
            '.breadcrumbs a:last-child',
            '.product-page__category',
            '[data-testid="breadcrumb"] a:last-child',
            '.category-name'
        ]
        
        for selector in category_selectors:
            element = soup.select_one(selector)
            if element and element.get_text(strip=True):
                category = element.get_text(strip=True)
                if len(category) > 2:
                    return category
        
        return None
    
    def make_request(self, url: str, retries: int = 3, timeout: int = 15, as_html: bool = False) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not HAS_REQUESTS:
            logger.error("requests module not available")
            return None
            
        self.request_count += 1
        
        for attempt in range(retries):
            try:
                if attempt > 0:
                    delay = (2 ** attempt) * 0.5 + random.uniform(0, 0.5)
                    time.sleep(delay)
                else:
                    self.apply_rate_limit()
                
                headers = self.get_random_headers()
                
                response = self.session.get(
                    url, 
                    headers=headers, 
                    timeout=timeout,
                    allow_redirects=True
                )
                
                if response.status_code == 200:
                    self.success_count += 1
                    
                    if as_html:
                        return response
                    
                    try:
                        return response.json()
                    except ValueError as e:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç {url}: {str(e)[:100]}")
                        return None
                        
                elif response.status_code == 404:
                    logger.info(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404): {url}")
                    return None
                    
                elif response.status_code == 403:
                    logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (403): {url}")
                    if attempt < retries - 1:
                        delay = (2 ** attempt) * 2 + random.uniform(0, 1)
                        time.sleep(delay)
                    continue
                    
                elif response.status_code == 429:
                    retry_after = response.headers.get('retry-after')
                    delay = int(retry_after) if retry_after else (2 ** attempt) * 2
                    logger.warning(f"Rate limit (429), –∂–¥–µ–º {delay}—Å")
                    time.sleep(delay)
                    continue
                    
                elif response.status_code >= 500:
                    logger.warning(f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ {response.status_code}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    if attempt < retries - 1:
                        time.sleep(random.uniform(1, 3))
                    continue
                else:
                    logger.error(f"HTTP {response.status_code}: {url}")
                    
            except Exception as e:
                if 'timeout' in str(e).lower():
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    continue
                    
                if self.is_network_error(e):
                    logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}")
                    if attempt < retries - 1:
                        time.sleep(random.uniform(1, 2))
                    continue
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:100]}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    if attempt < retries - 1:
                        time.sleep(random.uniform(0.5, 1.5))
                    continue
        
        self.failure_count += 1
        return None
    
    def is_network_error(self, error: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏"""
        if not HAS_REQUESTS:
            return True
            
        error_str = str(error).lower()
        network_errors = [
            'connection error', 'timeout', 'network', 'unreachable',
            'name resolution failed', 'connection refused', 
            'ssl', 'certificate', 'dns', 'host'
        ]
        return any(net_err in error_str for net_err in network_errors)
    
    def get_product_data(self, url: str) -> Optional[WBProductData]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º HTML –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not HAS_REQUESTS:
            return self._create_fallback_product("000000", Exception("requests module not available"))
            
        nm_id = self.extract_product_id(url)
        if not nm_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL")
            return None
        
        if len(nm_id) < 6:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞: {nm_id}")
            return None
        
        size_param = self.extract_size_parameter(url)
        if size_param:
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–∑–º–µ—Ä–∞/–≤–∞—Ä–∏–∞–Ω—Ç–∞: {size_param}")
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ {nm_id}" + (f" (–≤–∞—Ä–∏–∞–Ω—Ç: {size_param})" if size_param else ""))
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
        if HAS_BS4:
            try:
                logger.info("üåê –ü—Ä–æ–±—É–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥)")
                html_result = self.parse_html_page(url)
                if html_result and html_result.name and len(html_result.name) > 3:
                    logger.info(f"‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {html_result.name}")
                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(html_result.characteristics)}")
                    return html_result
            except Exception as e:
                logger.warning(f"HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)[:100]}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategies = [
            ('Card API v2', self._get_from_card_api_v2),
            ('Card API v1', self._get_from_card_api_v1),
            ('Enrichment API', self._get_from_enrichment_api),
            ('Search API v5', self._get_from_search_api_v5),
            ('Basket API', self._get_from_basket_api),
            ('Search API v4', self._get_from_search_api_v4)
        ]
        
        last_error = None
        
        for strategy_name, strategy_func in strategies:
            try:
                logger.info(f"üì° –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_name}")
                
                result = strategy_func(nm_id)
                if result and result.name and len(result.name) > 3 and result.name != f"–¢–æ–≤–∞—Ä {nm_id}":
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ {strategy_name}: {result.name}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä size, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    if size_param:
                        result = self._find_specific_variant(result, nm_id, size_param)
                    
                    return result
                    
            except Exception as e:
                last_error = e
                logger.warning(f"{strategy_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)[:100]}")
                
                if self.is_network_error(e):
                    time.sleep(random.uniform(1, 2))
                continue
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: Fallback –ø—Ä–æ–¥—É–∫—Ç –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logger.warning('–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        if self._check_product_exists_basic(nm_id):
            logger.info(f"–¢–æ–≤–∞—Ä {nm_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ")
            return self._create_fallback_product(nm_id, last_error)
        
        logger.error(f"–¢–æ–≤–∞—Ä {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
        return None
    
    def _find_specific_variant(self, product_data: WBProductData, nm_id: str, size_param: str) -> WBProductData:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É size"""
        try:
            logger.info(f"–ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —Å size={size_param}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
            variant_data = self._get_variant_data(nm_id, size_param)
            
            if variant_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                product_data = self._apply_variant_data(product_data, variant_data, size_param)
                logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {size_param}")
            else:
                logger.info(f"–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç {size_param} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –≤–∞—Ä–∏–∞–Ω—Ç–∞
            product_data.variantId = size_param
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {str(e)}")
        
        return product_data
    
    def _get_variant_data(self, nm_id: str, size_param: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ API"""
        variant_data = None
        
        try:
            # –ú–µ—Ç–æ–¥ 1: Card API v2 —Å —Ä–∞–∑–º–µ—Ä–æ–º
            params = dict(self.default_params)
            params.update({
                'nm': nm_id,
                'size': size_param
            })
            url = f"{self.endpoints['card_detail_v2']}?{urlencode(params)}"
            
            data = self.make_request(url, retries=1, timeout=10)
            if data and data.get('data', {}).get('products'):
                products = data['data']['products']
                if products:
                    variant_data = products[0]
                    logger.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ Card API v2")
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
            if not variant_data:
                size_url = f"https://card.wb.ru/cards/v1/detail?nm={nm_id}&size={size_param}&spp=30"
                data = self.make_request(size_url, retries=1, timeout=10)
                if data and data.get('data', {}).get('products'):
                    products = data['data']['products']
                    if products:
                        variant_data = products[0]
                        logger.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ size endpoint")
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        
        return variant_data
    
    def _apply_variant_data(self, base_product: WBProductData, variant_data: Dict, size_param: str) -> WBProductData:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫ –±–∞–∑–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
            if variant_data.get('salePriceU') or variant_data.get('priceU'):
                base_product.price = self._parse_price(
                    variant_data.get('salePriceU') or variant_data.get('priceU')
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ
            if 'totalQty' in variant_data:
                base_product.availability = (variant_data.get('totalQty', 0) > 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            variant_characteristics = self._extract_variant_characteristics(variant_data, size_param)
            if variant_characteristics:
                # –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                existing_names = [char['name'].lower() for char in base_product.characteristics]
                
                for var_char in variant_characteristics:
                    char_name_lower = var_char['name'].lower()
                    
                    # –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å, –∑–∞–º–µ–Ω—è–µ–º
                    replaced = False
                    for i, existing_char in enumerate(base_product.characteristics):
                        if existing_char['name'].lower() == char_name_lower:
                            base_product.characteristics[i] = var_char
                            replaced = True
                            break
                    
                    # –ï—Å–ª–∏ –Ω–µ –∑–∞–º–µ–Ω–∏–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º
                    if not replaced:
                        base_product.characteristics.append(var_char)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        
        return base_product
    
    def _extract_variant_characteristics(self, variant_data: Dict, size_param: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        characteristics = []
        
        try:
            # 1. –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
            if variant_data.get('sizes'):
                for size in variant_data['sizes']:
                    size_ids = [
                        str(size.get('optionId', '')),
                        str(size.get('id', '')),
                        str(size.get('chrmId', '')),
                        str(size.get('skuId', ''))
                    ]
                    
                    if size_param in size_ids:
                        size_name = size.get('name', '')
                        if size_name:
                            characteristics.append({
                                'name': '–†–∞–∑–º–µ—Ä',
                                'value': str(size_name)
                            })
                        break
            
            # 2. –ü–æ–∏—Å–∫ –≤ —Ü–≤–µ—Ç–∞—Ö
            if variant_data.get('colors'):
                for color in variant_data['colors']:
                    color_ids = [
                        str(color.get('id', '')),
                        str(color.get('colorId', '')),
                        str(color.get('chrmId', ''))
                    ]
                    
                    if size_param in color_ids:
                        color_name = color.get('name', '')
                        if color_name:
                            characteristics.append({
                                'name': '–¶–≤–µ—Ç',
                                'value': str(color_name)
                            })
                        break
            
            # 3. –ü–æ–∏—Å–∫ –≤ –æ–±—â–∏—Ö –æ–ø—Ü–∏—è—Ö/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
            for options_key in ['options', 'characteristics', 'attributes']:
                if variant_data.get(options_key):
                    for option in variant_data[options_key]:
                        option_ids = [
                            str(option.get('id', '')),
                            str(option.get('optionId', '')),
                            str(option.get('charId', '')),
                            str(option.get('chrmId', ''))
                        ]
                        
                        if (size_param in option_ids or 
                            str(option.get('valueId', '')) == size_param):
                            
                            option_name = option.get('name', '') or option.get('charName', '')
                            option_value = option.get('value', '') or option.get('charValue', '')
                            
                            if option_name and option_value:
                                characteristics.append({
                                    'name': str(option_name),
                                    'value': str(option_value)
                                })
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(characteristics)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {size_param}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        
        return characteristics
    
    # API –º–µ—Ç–æ–¥—ã (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    def _get_from_card_api_v2(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Card API v2"""
        params = dict(self.default_params)
        params['nm'] = nm_id
        url = f"{self.endpoints['card_detail_v2']}?{urlencode(params)}"
        
        data = self.make_request(url)
        if data and data.get('data', {}).get('products'):
            products = data['data']['products']
            if products and len(products) > 0:
                product = products[0]
                detailed_product = self._enrich_product_data(product, nm_id)
                return self._parse_card_response(detailed_product, nm_id)
        return None
    
    def _get_from_card_api_v1(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Card API v1"""
        params = dict(self.default_params)
        params['nm'] = nm_id
        url = f"{self.endpoints['card_detail']}?{urlencode(params)}"
        
        data = self.make_request(url)
        if data and data.get('data', {}).get('products'):
            products = data['data']['products']
            if products and len(products) > 0:
                return self._parse_card_response(products[0], nm_id)
        return None
    
    def _get_from_enrichment_api(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Enrichment API"""
        params = {'spp': '0', 'nm': nm_id}
        url = f"{self.endpoints['enrichment']}?{urlencode(params)}"
        
        data = self.make_request(url)
        if data and data.get('data', {}).get('products'):
            products = data['data']['products']
            if products and len(products) > 0:
                return self._parse_enrichment_response(products[0], nm_id)
        return None
    
    def _get_from_search_api_v5(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Search API v5"""
        params = dict(self.default_params)
        params.update({
            'query': nm_id,
            'resultset': 'catalog'
        })
        url = f"{self.endpoints['search_v5']}?{urlencode(params)}"
        
        data = self.make_request(url)
        if data and data.get('data', {}).get('products'):
            products = data['data']['products']
            for product in products:
                if str(product.get('id', '')) == nm_id or str(product.get('root', '')) == nm_id:
                    return self._parse_search_response(product, nm_id)
        return None
    
    def _get_from_basket_api(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Basket API"""
        if len(nm_id) < 6:
            return None
            
        vol = nm_id[:-5] if len(nm_id) > 5 else "0"
        part = nm_id[-5:-3] if len(nm_id) > 3 else "00"
        
        baskets = ['basket-01', 'basket-02', 'basket-03', 'basket-04']
        
        for basket in baskets:
            try:
                url = f"https://{basket}.wbbasket.ru/vol{vol}/part{part}/{nm_id}/info/ru/card.json"
                data = self.make_request(url, timeout=8)
                
                if data and (data.get('imt_name') or data.get('nm_id')):
                    return self._parse_basket_response(data, nm_id)
                    
            except Exception as e:
                logger.debug(f"Basket {basket} –æ—à–∏–±–∫–∞: {str(e)}")
                continue
        
        return None
    
    def _get_from_search_api_v4(self, nm_id: str) -> Optional[WBProductData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Search API v4"""
        params = dict(self.default_params)
        params.update({
            'query': nm_id,
            'resultset': 'catalog'
        })
        url = f"{self.endpoints['search_v4']}?{urlencode(params)}"
        
        data = self.make_request(url)
        if data and data.get('data', {}).get('products'):
            products = data['data']['products']
            for product in products:
                if str(product.get('id', '')) == nm_id or str(product.get('root', '')) == nm_id:
                    return self._parse_search_response(product, nm_id)
        return None
    
    def _enrich_product_data(self, product: Dict, nm_id: str) -> Dict:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            if len(nm_id) >= 6:
                basket_data = self._get_basket_description(nm_id)
                if basket_data:
                    if basket_data.get('description') and not product.get('description'):
                        product['description'] = basket_data['description']
                    
                    if basket_data.get('options'):
                        if not product.get('options'):
                            product['options'] = []
                        
                        existing_names = {opt.get('name', '').lower() for opt in product.get('options', [])}
                        for basket_opt in basket_data['options']:
                            if basket_opt.get('name') and basket_opt.get('name', '').lower() not in existing_names:
                                product['options'].append(basket_opt)
            
            enrichment_data = self._get_enrichment_data(nm_id)
            if enrichment_data:
                if enrichment_data.get('description') and not product.get('description'):
                    product['description'] = enrichment_data['description']
                
                if enrichment_data.get('options') and not product.get('options'):
                    product['options'] = enrichment_data['options']
        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        return product
    
    def _get_basket_description(self, nm_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ basket API"""
        if len(nm_id) < 6:
            return None
            
        vol = nm_id[:-5] if len(nm_id) > 5 else "0"
        part = nm_id[-5:-3] if len(nm_id) > 3 else "00"
        
        baskets = ['basket-01', 'basket-02', 'basket-03']
        
        for basket in baskets:
            try:
                url = f"https://{basket}.wbbasket.ru/vol{vol}/part{part}/{nm_id}/info/ru/card.json"
                data = self.make_request(url, timeout=5, retries=1)
                
                if data and (data.get('description') or data.get('options')):
                    return data
                    
            except Exception:
                continue
        
        return None
    
    def _get_enrichment_data(self, nm_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            params = {'spp': '0', 'nm': nm_id}
            url = f"{self.endpoints['enrichment']}?{urlencode(params)}"
            
            data = self.make_request(url, timeout=5, retries=1)
            if data and data.get('data', {}).get('products'):
                products = data['data']['products']
                if products and len(products) > 0:
                    return products[0]
        except Exception:
            pass
        
        return None
    
    # –ü–∞—Ä—Å–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
    def _parse_card_response(self, product: Dict, nm_id: str) -> WBProductData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Card API"""
        return WBProductData(
            id=nm_id,
            name=product.get('name', f'–¢–æ–≤–∞—Ä {nm_id}'),
            brand=product.get('brand', 'NoName'),
            price=self._parse_price(product.get('salePriceU') or product.get('priceU')),
            rating=float(product.get('rating', 0)),
            reviewsCount=int(product.get('feedbacks', 0)),
            description=self._build_description(product),
            characteristics=self._extract_characteristics(product),
            images=self._generate_image_urls(nm_id),
            category=product.get('subjectName', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞'),
            categoryId=product.get('subjectId'),
            availability=(product.get('totalQty', 0) > 0),
            vendorCode=product.get('vendorCode', nm_id),
            supplierId=str(product.get('supplierId', '')) if product.get('supplierId') else None,
            tnved=product.get('tnved', '8544429009')
        )
    
    def _parse_enrichment_response(self, product: Dict, nm_id: str) -> WBProductData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Enrichment API"""
        return WBProductData(
            id=nm_id,
            name=product.get('name', f'–¢–æ–≤–∞—Ä {nm_id}'),
            brand=product.get('brand', 'NoName'),
            price=self._parse_price(product.get('priceU')),
            rating=float(product.get('rating', 0)),
            reviewsCount=int(product.get('feedbacks', 0)),
            description=self._build_description(product),
            characteristics=self._extract_characteristics(product),
            images=self._generate_image_urls(nm_id),
            category=product.get('subjectName', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞'),
            categoryId=product.get('subjectId'),
            availability=True,
            vendorCode=nm_id,
            supplierId=str(product.get('supplierId', '')) if product.get('supplierId') else None,
            tnved='8544429009'
        )
    
    def _parse_search_response(self, product: Dict, nm_id: str) -> WBProductData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Search API"""
        return WBProductData(
            id=nm_id,
            name=product.get('name', f'–¢–æ–≤–∞—Ä {nm_id}'),
            brand=product.get('brand', 'NoName'),
            price=self._parse_price(product.get('priceU')),
            rating=float(product.get('rating', 0)),
            reviewsCount=int(product.get('feedbacks', 0)),
            description=self._generate_default_description(product.get('name', f'–¢–æ–≤–∞—Ä {nm_id}')),
            characteristics=self._extract_basic_characteristics(product),
            images=self._generate_image_urls(nm_id),
            category=product.get('subjectName', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞'),
            categoryId=product.get('subjectId'),
            availability=True,
            vendorCode=nm_id,
            supplierId=str(product.get('supplierId', '')) if product.get('supplierId') else None,
            tnved='8544429009'
        )
    
    def _parse_basket_response(self, data: Dict, nm_id: str) -> WBProductData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Basket API"""
        return WBProductData(
            id=nm_id,
            name=data.get('imt_name', f'–¢–æ–≤–∞—Ä {nm_id}'),
            brand=data.get('selling', {}).get('brand_name', 'NoName'),
            price=0,
            rating=0.0,
            reviewsCount=0,
            description=data.get('description', self._generate_default_description(data.get('imt_name', f'–¢–æ–≤–∞—Ä {nm_id}'))),
            characteristics=self._parse_basket_characteristics(data),
            images=self._generate_image_urls(nm_id),
            category=data.get('subj_name', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞'),
            categoryId=data.get('subj_root_id'),
            availability=True,
            vendorCode=nm_id,
            supplierId=str(data.get('supplier_id', '')) if data.get('supplier_id') else None,
            tnved=data.get('tnved', '8544429009')
        )
    
    def _create_fallback_product(self, nm_id: str, error: Optional[Exception]) -> WBProductData:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º —Å–±–æ–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        return WBProductData(
            id=nm_id,
            name=f"–¢–æ–≤–∞—Ä {nm_id}",
            brand='NoName',
            price=0,
            rating=0.0,
            reviewsCount=0,
            description='–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
            characteristics=[
                {'name': '–ê—Ä—Ç–∏–∫—É–ª', 'value': nm_id},
                {'name': '–°—Ç–∞—Ç—É—Å', 'value': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è'},
                {'name': '–ò—Å—Ç–æ—á–Ω–∏–∫', 'value': 'Python –ø–∞—Ä—Å–µ—Ä (fallback)'}
            ],
            images=self._generate_image_urls(nm_id),
            category='–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
            categoryId=14727,
            availability=True,
            vendorCode=nm_id,
            supplierId=None,
            tnved='8544429009'
        )
    
    def _parse_price(self, price_u: Optional[int]) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏"""
        if not price_u or price_u <= 0:
            return 0
        return int(price_u / 100)
    
    def _extract_characteristics(self, product: Dict) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API –¥–∞–Ω–Ω—ã—Ö"""
        characteristics = []
        
        # 1. –û–ø—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
        if product.get('options'):
            for option in product['options']:
                if option.get('name') and option.get('value'):
                    name = str(option['name']).strip()
                    value = str(option['value']).strip()
                    
                    if name and value and len(value) < 200:
                        characteristics.append({
                            'name': name,
                            'value': value
                        })
        
        # 2. –¶–≤–µ—Ç–∞
        if product.get('colors') and product['colors']:
            color_names = []
            for color in product['colors']:
                color_name = color.get('name', '').strip()
                if color_name and color_name.lower() not in ['–Ω–µ —É–∫–∞–∑–∞–Ω', '–Ω–µ—Ç', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']:
                    color_names.append(color_name)
            
            if color_names:
                has_color = any(char['name'].lower() in ['—Ü–≤–µ—Ç', 'color'] for char in characteristics)
                if not has_color:
                    characteristics.append({
                        'name': '–¶–≤–µ—Ç',
                        'value': ', '.join(color_names[:3])
                    })
        
        # 3. –†–∞–∑–º–µ—Ä—ã
        if product.get('sizes') and product['sizes']:
            sizes = []
            for size in product['sizes']:
                size_name = str(size.get('name', '')).strip()
                if size_name and size_name not in sizes and len(size_name) < 50:
                    sizes.append(size_name)
            
            if sizes:
                has_size = any(char['name'].lower() in ['—Ä–∞–∑–º–µ—Ä', '—Ä–∞–∑–º–µ—Ä—ã', 'size'] for char in characteristics)
                if not has_size:
                    characteristics.append({
                        'name': '–†–∞–∑–º–µ—Ä—ã',
                        'value': ', '.join(sizes[:5])
                    })
        
        # 4. –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not characteristics:
            if product.get('brand') and product['brand'] not in ['NoName', '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞']:
                characteristics.append({'name': '–ë—Ä–µ–Ω–¥', 'value': str(product['brand'])})
            
            if product.get('vendorCode'):
                characteristics.append({'name': '–ê—Ä—Ç–∏–∫—É–ª', 'value': str(product['vendorCode'])})
        
        return characteristics
    
    def _extract_basic_characteristics(self, product: Dict) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è Search API"""
        characteristics = []
        
        if product.get('brand') and product['brand'] != 'NoName':
            characteristics.append({'name': '–ë—Ä–µ–Ω–¥', 'value': str(product['brand'])})
            
        return characteristics
    
    def _parse_basket_characteristics(self, data: Dict) -> List[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ Basket API"""
        characteristics = []
        
        if data.get('options'):
            for option in data['options']:
                if option.get('name') and option.get('value'):
                    characteristics.append({
                        'name': str(option['name']),
                        'value': str(option['value'])
                    })
        
        if data.get('selling', {}).get('brand_name'):
            characteristics.append({
                'name': '–ë—Ä–µ–Ω–¥',
                'value': str(data['selling']['brand_name'])
            })
        
        return characteristics
    
    def _build_description(self, product: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        parts = []
        
        if product.get('brand') and product['brand'] not in ['NoName', '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞']:
            parts.append(f"‚úÖ –ë—Ä–µ–Ω–¥: {product['brand']}")
        
        if product.get('rating', 0) > 0:
            parts.append(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']}")
        
        if product.get('feedbacks', 0) > 0:
            parts.append(f"üí¨ –û—Ç–∑—ã–≤–æ–≤: {product['feedbacks']}")
        
        if product.get('description') and len(product['description'].strip()) > 10:
            parts.append('')
            parts.append(product['description'])
        
        parts.extend([
            '',
            '‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä',
            '‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
            '‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞'
        ])
        
        return '\n'.join(parts)
    
    def _generate_default_description(self, name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        return f"""{name}

‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞  
‚úÖ –í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
    
    def _generate_image_urls(self, nm_id: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if len(nm_id) < 6:
            return []
            
        vol = nm_id[:-5] if len(nm_id) > 5 else "0"
        part = nm_id[-5:-3] if len(nm_id) > 3 else "00"
        
        images = []
        hosts = ['images.wbstatic.net', 'basket-01.wbbasket.ru', 'basket-02.wbbasket.ru']
        
        for i in range(1, 6):
            host = hosts[i % len(hosts)]
            images.append(f"https://{host}/vol{vol}/part{part}/{nm_id}/images/c516x688/{i}.webp")
        
        return images
    
    def _check_product_exists_basic(self, nm_id: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if not HAS_REQUESTS:
            return True
            
        try:
            if len(nm_id) >= 6:
                vol = nm_id[:-5] if len(nm_id) > 5 else "0"
                part = nm_id[-5:-3] if len(nm_id) > 3 else "00"
                image_url = f"https://images.wbstatic.net/vol{vol}/part{part}/{nm_id}/images/c246x328/1.webp"
                
                response = self.session.head(
                    image_url, 
                    headers=self.get_random_headers(), 
                    timeout=5
                )
                if response.status_code == 200:
                    return True
            
            params = dict(self.default_params)
            params['nm'] = nm_id
            url = f"{self.endpoints['card_detail']}?{urlencode(params)}"
            
            data = self.make_request(url, retries=1, timeout=10)
            return bool(data and data.get('data', {}).get('products'))
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: {str(e)}")
            return False
    
    def check_product_exists(self, nm_id: str) -> bool:
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        return self._check_product_exists_basic(nm_id)
    
    def get_parser_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        total_requests = self.request_count
        success_rate = (self.success_count / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'total_requests': total_requests,
            'successful_requests': self.success_count,
            'failed_requests': self.failure_count,
            'success_rate': round(success_rate, 2),
            'endpoints_used': list(self.endpoints.keys()),
            'has_requests_module': HAS_REQUESTS,
            'has_beautifulsoup': HAS_BS4,
            'html_parsing_available': HAS_REQUESTS and HAS_BS4
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.request_count = 0
        self.success_count = 0
        self.failure_count = 0
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

def convert_to_dict(product: WBProductData) -> Dict[str, Any]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è dataclass –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    return {
        'id': product.id,
        'name': product.name,
        'brand': product.brand,
        'price': product.price,
        'rating': product.rating,
        'reviewsCount': product.reviewsCount,
        'description': product.description,
        'characteristics': product.characteristics,
        'images': product.images,
        'category': product.category,
        'categoryId': product.categoryId,
        'availability': product.availability,
        'vendorCode': product.vendorCode,
        'supplierId': product.supplierId,
        'tnved': product.tnved,
        'variantId': product.variantId
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    if len(sys.argv) < 2:
        result = {
            'success': False,
            'error': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python wb_parser.py <URL_—Ç–æ–≤–∞—Ä–∞_–∏–ª–∏_--test>',
            'example': 'python wb_parser.py https://www.wildberries.ru/catalog/221501024/detail.aspx?size=351871410',
            'has_requests': HAS_REQUESTS,
            'has_beautifulsoup': HAS_BS4
        }
        print(json.dumps(result, ensure_ascii=False))
        return
    
    if sys.argv[1] == '--test':
        test_parser()
        return
    
    url = sys.argv[1]
    parser = WildberriesParser()
    
    if not HAS_REQUESTS:
        result = {
            'success': False,
            'error': '–ú–æ–¥—É–ª—å requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests beautifulsoup4',
            'fallback_mode': True,
            'recommendations': [
                'pip install requests beautifulsoup4',
                'pip3 install requests beautifulsoup4',
                'python -m pip install requests beautifulsoup4'
            ]
        }
        print(json.dumps(result, ensure_ascii=False))
        return
    
    if not HAS_BS4:
        logger.warning("‚ö†Ô∏è BeautifulSoup –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install beautifulsoup4")
    
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {url}")
        product_data = parser.get_product_data(url)
        
        if product_data:
            result = {
                'success': True,
                'data': convert_to_dict(product_data),
                'parsing_method': 'HTML' if HAS_BS4 and len(product_data.characteristics) > 2 else 'API',
                'characteristics_count': len(product_data.characteristics),
                'variant_id': product_data.variantId,
                'stats': parser.get_parser_stats()
            }
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {product_data.name}")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(product_data.characteristics)}")
            
            # –í—ã–≤–æ–¥–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if product_data.characteristics:
                logger.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                for char in product_data.characteristics:
                    logger.info(f"  ‚Ä¢ {char['name']}: {char['value']}")
        else:
            result = {
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞',
                'stats': parser.get_parser_stats()
            }
            logger.error("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–µ—É–¥–∞—á–Ω–æ")
            
        print(json.dumps(result, ensure_ascii=False))
            
    except KeyboardInterrupt:
        result = {
            'success': False,
            'error': '–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            'stats': parser.get_parser_stats()
        }
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        result = {
            'success': False,
            'error': str(e),
            'stats': parser.get_parser_stats()
        }
        print(json.dumps(result, ensure_ascii=False))
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def test_parser():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = WildberriesParser()
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WB –ø–∞—Ä—Å–µ—Ä–∞...")
    print(f"üì¶ –ú–æ–¥—É–ª—å requests: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if HAS_REQUESTS else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üåê –ú–æ–¥—É–ª—å BeautifulSoup: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if HAS_BS4 else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not HAS_REQUESTS:
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests beautifulsoup4")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–≤–∫–ª—é—á–∞—è —Ç–æ–≤–∞—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º size)
    test_urls = [
        'https://www.wildberries.ru/catalog/221501024/detail.aspx?size=351871410',  # –¢–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        'https://www.wildberries.ru/catalog/221501024/detail.aspx',                 # –¢–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        'https://www.wildberries.ru/catalog/68789915/detail.aspx',                  # –î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä
        'https://www.wildberries.ru/catalog/999999999/detail.aspx'                  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
    ]
    
    results = []
    for i, url in enumerate(test_urls, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}/4: {url}")
        try:
            start_time = time.time()
            product = parser.get_product_data(url)
            end_time = time.time()
            
            if product:
                parsing_method = 'HTML' if HAS_BS4 and len(product.characteristics) > 2 else 'API'
                results.append({
                    'test': i,
                    'url': url,
                    'success': True,
                    'name': product.name,
                    'brand': product.brand,
                    'price': product.price,
                    'characteristics_count': len(product.characteristics),
                    'variant_id': product.variantId,
                    'parsing_method': parsing_method,
                    'parse_time': round(end_time - start_time, 2)
                })
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {product.name} ({product.brand})")
                print(f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(product.characteristics)}")
                print(f"üîß –ú–µ—Ç–æ–¥: {parsing_method}")
                if product.variantId:
                    print(f"üéØ –í–∞—Ä–∏–∞–Ω—Ç: {product.variantId}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                if product.characteristics:
                    print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                    for char in product.characteristics[:3]:
                        print(f"  ‚Ä¢ {char['name']}: {char['value']}")
                    if len(product.characteristics) > 3:
                        print(f"  ... –∏ –µ—â–µ {len(product.characteristics) - 3}")
            else:
                results.append({
                    'test': i,
                    'url': url,
                    'success': False,
                    'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'parse_time': round(end_time - start_time, 2)
                })
                print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            results.append({
                'test': i,
                'url': url,
                'success': False,
                'error': str(e)
            })
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
    
    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    successful_tests = sum(1 for r in results if r['success'])
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{len(results)}")
    print(f"HTML –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if HAS_BS4 else '‚ùå –ù–µ—Ç'}")
    
    stats = parser.get_parser_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    # –ü–æ–ª–Ω—ã–π JSON –æ—Ç—á–µ—Ç
    final_report = {
        'test_summary': {
            'total_tests': len(results),
            'successful_tests': successful_tests,
            'success_rate': round(successful_tests / len(results) * 100, 2),
            'html_parsing_available': HAS_BS4
        },
        'test_results': results,
        'parser_stats': stats
    }
    
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:")
    print(json.dumps(final_report, ensure_ascii=False, indent=2))

def install_requirements():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    if HAS_REQUESTS and HAS_BS4:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    missing_modules = []
    if not HAS_REQUESTS:
        missing_modules.append('requests')
    if not HAS_BS4:
        missing_modules.append('beautifulsoup4')
    
    print(f"üì¶ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π: {', '.join(missing_modules)}...")
    
    import subprocess
    import sys
    
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install'] + missing_modules)
        print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        return True
    except subprocess.CalledProcessError:
        try:
            subprocess.check_call(['pip3', 'install'] + missing_modules)
            print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ pip3")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
            print(f"   pip install {' '.join(missing_modules)}")
            print(f"   pip3 install {' '.join(missing_modules)}")
            print(f"   python -m pip install {' '.join(missing_modules)}")
            return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == '--install':
            install_requirements()
        elif sys.argv[1] == '--test':
            test_parser()
        elif sys.argv[1] == '--help':
            print("""
üõ†Ô∏è  WB Parser Enhanced - –ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python wb_parser.py <URL>           - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –ø–æ URL
  python wb_parser.py --test          - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
  python wb_parser.py --install       - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  python wb_parser.py --help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python wb_parser.py https://www.wildberries.ru/catalog/221501024/detail.aspx?size=351871410
  python wb_parser.py --test

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - Python 3.6+
  - requests (pip install requests)
  - beautifulsoup4 (pip install beautifulsoup4) - –¥–ª—è HTML –ø–∞—Ä—Å–∏–Ω–≥–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π HTML –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä size)
  - Fallback –Ω–∞ API –º–µ—Ç–æ–¥—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HTML
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            """)
        else:
            main()
    else:
        main()